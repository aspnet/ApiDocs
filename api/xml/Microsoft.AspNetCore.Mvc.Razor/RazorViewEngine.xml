<Type Name="RazorViewEngine" FullName="Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine">
  <TypeSignature Language="C#" Value="public class RazorViewEngine : Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine, Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RazorViewEngine extends System.Object implements class Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine, class Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine" />
  <TypeSignature Language="VB.NET" Value="Public Class RazorViewEngine&#xA;Implements IRazorViewEngine, IViewEngine" />
  <TypeSignature Language="F#" Value="type RazorViewEngine = class&#xA;    interface IRazorViewEngine&#xA;    interface IViewEngine" />
  <TypeSignature Language="C++ CLI" Value="public ref class RazorViewEngine : Microsoft::AspNetCore::Mvc::Razor::IRazorViewEngine, Microsoft::AspNetCore::Mvc::ViewEngines::IViewEngine" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class RazorViewEngine : Microsoft::AspNetCore::Mvc::Razor::IRazorViewEngine, Microsoft::AspNetCore::Mvc::ViewEngines::IViewEngine" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.Razor</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Default implementation of <see cref="T:Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine" />.
            </summary>
    <remarks>
            For <c>ViewResults</c> returned from controllers, views should be located in
            <see cref="P:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions.ViewLocationFormats" />
            by default. For the controllers in an area, views should exist in
            <see cref="P:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions.AreaViewLocationFormats" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RazorViewEngine (Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider pageFactory, Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator pageActivator, System.Text.Encodings.Web.HtmlEncoder htmlEncoder, Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions&gt; optionsAccessor, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider pageFactory, class Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator pageActivator, class System.Text.Encodings.Web.HtmlEncoder htmlEncoder, class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions&gt; optionsAccessor, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.#ctor(Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider,Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator,System.Text.Encodings.Web.HtmlEncoder,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions},Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine : Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider * Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator * System.Text.Encodings.Web.HtmlEncoder * Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions&gt; * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine" Usage="new Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine (pageFactory, pageActivator, htmlEncoder, optionsAccessor, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RazorViewEngine(Microsoft::AspNetCore::Mvc::Razor::IRazorPageFactoryProvider ^ pageFactory, Microsoft::AspNetCore::Mvc::Razor::IRazorPageActivator ^ pageActivator, System::Text::Encodings::Web::HtmlEncoder ^ htmlEncoder, Microsoft::Extensions::Options::IOptions&lt;Microsoft::AspNetCore::Mvc::Razor::RazorViewEngineOptions ^&gt; ^ optionsAccessor, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pageFactory" Type="Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider" />
        <Parameter Name="pageActivator" Type="Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator" />
        <Parameter Name="htmlEncoder" Type="System.Text.Encodings.Web.HtmlEncoder" />
        <Parameter Name="optionsAccessor" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions&gt;" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="pageFactory">To be added.</param>
        <param name="pageActivator">To be added.</param>
        <param name="htmlEncoder">To be added.</param>
        <param name="optionsAccessor">To be added.</param>
        <param name="loggerFactory">To be added.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPage">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Razor.RazorPageResult FindPage (Microsoft.AspNetCore.Mvc.ActionContext context, string pageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.AspNetCore.Mvc.Razor.RazorPageResult FindPage(class Microsoft.AspNetCore.Mvc.ActionContext context, string pageName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindPage(Microsoft.AspNetCore.Mvc.ActionContext,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindPage (context As ActionContext, pageName As String) As RazorPageResult" />
      <MemberSignature Language="F#" Value="abstract member FindPage : Microsoft.AspNetCore.Mvc.ActionContext * string -&gt; Microsoft.AspNetCore.Mvc.Razor.RazorPageResult&#xA;override this.FindPage : Microsoft.AspNetCore.Mvc.ActionContext * string -&gt; Microsoft.AspNetCore.Mvc.Razor.RazorPageResult" Usage="razorViewEngine.FindPage (context, pageName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::AspNetCore::Mvc::Razor::RazorPageResult FindPage(Microsoft::AspNetCore::Mvc::ActionContext ^ context, System::String ^ pageName);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::AspNetCore::Mvc::Razor::RazorPageResult FindPage(Microsoft::AspNetCore::Mvc::ActionContext const &amp; context, std::wstring const &amp; pageName);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine.FindPage(Microsoft.AspNetCore.Mvc.ActionContext,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Razor.RazorPageResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.ActionContext" />
        <Parameter Name="pageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="pageName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="FindView">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult FindView (Microsoft.AspNetCore.Mvc.ActionContext context, string viewName, bool isMainPage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult FindView(class Microsoft.AspNetCore.Mvc.ActionContext context, string viewName, bool isMainPage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(Microsoft.AspNetCore.Mvc.ActionContext,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindView (context As ActionContext, viewName As String, isMainPage As Boolean) As ViewEngineResult" />
      <MemberSignature Language="F#" Value="abstract member FindView : Microsoft.AspNetCore.Mvc.ActionContext * string * bool -&gt; Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult&#xA;override this.FindView : Microsoft.AspNetCore.Mvc.ActionContext * string * bool -&gt; Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult" Usage="razorViewEngine.FindView (context, viewName, isMainPage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::AspNetCore::Mvc::ViewEngines::ViewEngineResult ^ FindView(Microsoft::AspNetCore::Mvc::ActionContext ^ context, System::String ^ viewName, bool isMainPage);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::AspNetCore::Mvc::ViewEngines::ViewEngineResult FindView(Microsoft::AspNetCore::Mvc::ActionContext const &amp; context, std::wstring const &amp; viewName, bool isMainPage);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine.FindView(Microsoft.AspNetCore.Mvc.ActionContext,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.ActionContext" />
        <Parameter Name="viewName" Type="System.String" />
        <Parameter Name="isMainPage" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="viewName">To be added.</param>
        <param name="isMainPage">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetAbsolutePath">
      <MemberSignature Language="C#" Value="public string GetAbsolutePath (string executingFilePath, string pagePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAbsolutePath(string executingFilePath, string pagePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetAbsolutePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbsolutePath (executingFilePath As String, pagePath As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GetAbsolutePath : string * string -&gt; string&#xA;override this.GetAbsolutePath : string * string -&gt; string" Usage="razorViewEngine.GetAbsolutePath (executingFilePath, pagePath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetAbsolutePath(System::String ^ executingFilePath, System::String ^ pagePath);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Platform::String ^ GetAbsolutePath(Platform::String ^ executingFilePath, Platform::String ^ pagePath);" />
      <MemberSignature Language="C++ WINRT" Value="std::wstring GetAbsolutePath(std::wstring const &amp; executingFilePath, std::wstring const &amp; pagePath);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine.GetAbsolutePath(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executingFilePath" Type="System.String" />
        <Parameter Name="pagePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="executingFilePath">To be added.</param>
        <param name="pagePath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetNormalizedRouteValue">
      <MemberSignature Language="C#" Value="public static string GetNormalizedRouteValue (Microsoft.AspNetCore.Mvc.ActionContext context, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetNormalizedRouteValue(class Microsoft.AspNetCore.Mvc.ActionContext context, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetNormalizedRouteValue(Microsoft.AspNetCore.Mvc.ActionContext,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNormalizedRouteValue (context As ActionContext, key As String) As String" />
      <MemberSignature Language="F#" Value="static member GetNormalizedRouteValue : Microsoft.AspNetCore.Mvc.ActionContext * string -&gt; string" Usage="Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetNormalizedRouteValue (context, key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetNormalizedRouteValue(Microsoft::AspNetCore::Mvc::ActionContext ^ context, System::String ^ key);" />
      <MemberSignature Language="C++ WINRT" Value=" static std::wstring GetNormalizedRouteValue(Microsoft::AspNetCore::Mvc::ActionContext const &amp; context, std::wstring const &amp; key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.ActionContext" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:Microsoft.AspNetCore.Mvc.ActionContext" />.</param>
        <param name="key">The route key to lookup.</param>
        <summary>
            Gets the case-normalized route value for the specified route <paramref name="key" />.
            </summary>
        <returns>The value corresponding to the key.</returns>
        <remarks>
            The casing of a route value in <see cref="P:Microsoft.AspNetCore.Mvc.ActionContext.RouteData" /> is determined by the client.
            This making constructing paths for view locations in a case sensitive file system unreliable. Using the
            <see cref="P:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.RouteValues" /> to get route values
            produces consistently cased results.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPage">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Razor.RazorPageResult GetPage (string executingFilePath, string pagePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.AspNetCore.Mvc.Razor.RazorPageResult GetPage(string executingFilePath, string pagePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetPage(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPage (executingFilePath As String, pagePath As String) As RazorPageResult" />
      <MemberSignature Language="F#" Value="abstract member GetPage : string * string -&gt; Microsoft.AspNetCore.Mvc.Razor.RazorPageResult&#xA;override this.GetPage : string * string -&gt; Microsoft.AspNetCore.Mvc.Razor.RazorPageResult" Usage="razorViewEngine.GetPage (executingFilePath, pagePath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::AspNetCore::Mvc::Razor::RazorPageResult GetPage(System::String ^ executingFilePath, System::String ^ pagePath);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::AspNetCore::Mvc::Razor::RazorPageResult GetPage(std::wstring const &amp; executingFilePath, std::wstring const &amp; pagePath);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine.GetPage(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Razor.RazorPageResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executingFilePath" Type="System.String" />
        <Parameter Name="pagePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="executingFilePath">To be added.</param>
        <param name="pagePath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult GetView (string executingFilePath, string viewPath, bool isMainPage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult GetView(string executingFilePath, string viewPath, bool isMainPage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetView(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetView (executingFilePath As String, viewPath As String, isMainPage As Boolean) As ViewEngineResult" />
      <MemberSignature Language="F#" Value="abstract member GetView : string * string * bool -&gt; Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult&#xA;override this.GetView : string * string * bool -&gt; Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult" Usage="razorViewEngine.GetView (executingFilePath, viewPath, isMainPage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::AspNetCore::Mvc::ViewEngines::ViewEngineResult ^ GetView(System::String ^ executingFilePath, System::String ^ viewPath, bool isMainPage);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::AspNetCore::Mvc::ViewEngines::ViewEngineResult ^ GetView(Platform::String ^ executingFilePath, Platform::String ^ viewPath, bool isMainPage);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::AspNetCore::Mvc::ViewEngines::ViewEngineResult GetView(std::wstring const &amp; executingFilePath, std::wstring const &amp; viewPath, bool isMainPage);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine.GetView(System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executingFilePath" Type="System.String" />
        <Parameter Name="viewPath" Type="System.String" />
        <Parameter Name="isMainPage" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="executingFilePath">To be added.</param>
        <param name="viewPath">To be added.</param>
        <param name="isMainPage">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ViewExtension">
      <MemberSignature Language="C#" Value="public static readonly string ViewExtension;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string ViewExtension" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.ViewExtension" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ViewExtension As String " />
      <MemberSignature Language="F#" Value=" staticval mutable ViewExtension : string" Usage="Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.ViewExtension" />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ ViewExtension;" />
      <MemberSignature Language="C++ WINRT" Value="static initonly std::wstring ViewExtension;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewLookupCache">
      <MemberSignature Language="C#" Value="protected Microsoft.Extensions.Caching.Memory.IMemoryCache ViewLookupCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Caching.Memory.IMemoryCache ViewLookupCache" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.ViewLookupCache" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ViewLookupCache As IMemoryCache" />
      <MemberSignature Language="F#" Value="member this.ViewLookupCache : Microsoft.Extensions.Caching.Memory.IMemoryCache" Usage="Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.ViewLookupCache" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property Microsoft::Extensions::Caching::Memory::IMemoryCache ^ ViewLookupCache { Microsoft::Extensions::Caching::Memory::IMemoryCache ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Caching.Memory.IMemoryCache</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A cache for results of view lookups.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
