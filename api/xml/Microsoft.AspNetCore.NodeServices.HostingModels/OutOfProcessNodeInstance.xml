<Type Name="OutOfProcessNodeInstance" FullName="Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance">
  <TypeSignature Language="C#" Value="public abstract class OutOfProcessNodeInstance : IDisposable, Microsoft.AspNetCore.NodeServices.HostingModels.INodeInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OutOfProcessNodeInstance extends System.Object implements class Microsoft.AspNetCore.NodeServices.HostingModels.INodeInstance, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OutOfProcessNodeInstance&#xA;Implements IDisposable, INodeInstance" />
  <TypeSignature Language="F#" Value="type OutOfProcessNodeInstance = class&#xA;    interface INodeInstance&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfProcessNodeInstance abstract : IDisposable, Microsoft::AspNetCore::NodeServices::HostingModels::INodeInstance" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.NodeServices.HostingModels.INodeInstance</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             Class responsible for launching a Node child process on the local machine, determining when it is ready to
             accept invocations, detecting if it dies on its own, and finally terminating it on disposal.
            
             This abstract base class uses the input/output streams of the child process to perform a simple handshake
             to determine when the child process is ready to accept invocations. This is agnostic to the mechanism that
             derived classes use to actually perform the invocations (e.g., they could use HTTP-RPC, or a binary TCP
             protocol, or any other RPC-type mechanism).
             </summary>
    <remarks>To be added.</remarks>
    <altmember cref="T:Microsoft.AspNetCore.NodeServices.HostingModels.INodeInstance" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfProcessNodeInstance (string entryPointScript, string projectPath, string[] watchFileExtensions, string commandLineArguments, System.Threading.CancellationToken applicationStoppingToken, Microsoft.Extensions.Logging.ILogger nodeOutputLogger, System.Collections.Generic.IDictionary&lt;string,string&gt; environmentVars, int invocationTimeoutMilliseconds, bool launchWithDebugging, int debuggingPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string entryPointScript, string projectPath, string[] watchFileExtensions, string commandLineArguments, valuetype System.Threading.CancellationToken applicationStoppingToken, class Microsoft.Extensions.Logging.ILogger nodeOutputLogger, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; environmentVars, int32 invocationTimeoutMilliseconds, bool launchWithDebugging, int32 debuggingPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.#ctor(System.String,System.String,System.String[],System.String,System.Threading.CancellationToken,Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (entryPointScript As String, projectPath As String, watchFileExtensions As String(), commandLineArguments As String, applicationStoppingToken As CancellationToken, nodeOutputLogger As ILogger, environmentVars As IDictionary(Of String, String), invocationTimeoutMilliseconds As Integer, launchWithDebugging As Boolean, debuggingPort As Integer)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance : string * string * string[] * string * System.Threading.CancellationToken * Microsoft.Extensions.Logging.ILogger * System.Collections.Generic.IDictionary&lt;string, string&gt; * int * bool * int -&gt; Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance" Usage="new Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance (entryPointScript, projectPath, watchFileExtensions, commandLineArguments, applicationStoppingToken, nodeOutputLogger, environmentVars, invocationTimeoutMilliseconds, launchWithDebugging, debuggingPort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfProcessNodeInstance(System::String ^ entryPointScript, System::String ^ projectPath, cli::array &lt;System::String ^&gt; ^ watchFileExtensions, System::String ^ commandLineArguments, System::Threading::CancellationToken applicationStoppingToken, Microsoft::Extensions::Logging::ILogger ^ nodeOutputLogger, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ environmentVars, int invocationTimeoutMilliseconds, bool launchWithDebugging, int debuggingPort);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="entryPointScript" Type="System.String" />
        <Parameter Name="projectPath" Type="System.String" />
        <Parameter Name="watchFileExtensions" Type="System.String[]" />
        <Parameter Name="commandLineArguments" Type="System.String" />
        <Parameter Name="applicationStoppingToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="nodeOutputLogger" Type="Microsoft.Extensions.Logging.ILogger" />
        <Parameter Name="environmentVars" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="invocationTimeoutMilliseconds" Type="System.Int32" />
        <Parameter Name="launchWithDebugging" Type="System.Boolean" />
        <Parameter Name="debuggingPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="entryPointScript">The path to the entry point script that the Node instance should load and execute.</param>
        <param name="projectPath">The root path of the current project. This is used when resolving Node.js module paths relative to the project root.</param>
        <param name="watchFileExtensions">The filename extensions that should be watched within the project root. The Node instance will automatically shut itself down if any matching file changes.</param>
        <param name="commandLineArguments">Additional command-line arguments to be passed to the Node.js instance.</param>
        <param name="applicationStoppingToken">A token that indicates when the host application is stopping.</param>
        <param name="nodeOutputLogger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to which the Node.js instance's stdout/stderr (and other log information) should be written.</param>
        <param name="environmentVars">Environment variables to be set on the Node.js process.</param>
        <param name="invocationTimeoutMilliseconds">The maximum duration, in milliseconds, to wait for RPC calls to complete.</param>
        <param name="launchWithDebugging">If true, passes a flag to the Node.js process telling it to accept V8 debugger connections.</param>
        <param name="debuggingPort">If debugging is enabled, the Node.js process should listen for V8 debugger connections on this port.</param>
        <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="outOfProcessNodeInstance.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="C++ WINRT" Value="void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Disposes this instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="outOfProcessNodeInstance.Dispose disposing" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">True if the object is disposing or false if it is finalizing.</param>
        <summary>
            Disposes the instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~OutOfProcessNodeInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="outOfProcessNodeInstance.Finalize " />
      <MemberSignature Language="C++ CLI" Value="!OutOfProcessNodeInstance ()" />
      <MemberSignature Language="C++ CX" Value="!OutOfProcessNodeInstance ()" />
      <MemberSignature Language="C++ WINRT" Value="!OutOfProcessNodeInstance ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Implements the finalization part of the IDisposable pattern by calling Dispose(false).
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeExportAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected abstract System.Threading.Tasks.Task&lt;T&gt; InvokeExportAsync&lt;T&gt; (Microsoft.AspNetCore.NodeServices.HostingModels.NodeInvocationInfo invocationInfo, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; InvokeExportAsync&lt;T&gt;(class Microsoft.AspNetCore.NodeServices.HostingModels.NodeInvocationInfo invocationInfo, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.InvokeExportAsync``1(Microsoft.AspNetCore.NodeServices.HostingModels.NodeInvocationInfo,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member InvokeExportAsync : Microsoft.AspNetCore.NodeServices.HostingModels.NodeInvocationInfo * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="outOfProcessNodeInstance.InvokeExportAsync (invocationInfo, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA;generic &lt;typename T&gt;&#xA; abstract System::Threading::Tasks::Task&lt;T&gt; ^ InvokeExportAsync(Microsoft::AspNetCore::NodeServices::HostingModels::NodeInvocationInfo ^ invocationInfo, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="invocationInfo" Type="Microsoft.AspNetCore.NodeServices.HostingModels.NodeInvocationInfo" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">The JSON-serializable data type that the Node.js code will asynchronously return.</typeparam>
        <param name="invocationInfo">Specifies the Node.js function to be invoked and arguments to be passed to it.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the invocation.</param>
        <summary>
            Asynchronously invokes code in the Node.js instance.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the completion of the RPC call.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeExportAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; InvokeExportAsync&lt;T&gt; (System.Threading.CancellationToken cancellationToken, string moduleName, string exportNameOrNull, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; InvokeExportAsync&lt;T&gt;(valuetype System.Threading.CancellationToken cancellationToken, string moduleName, string exportNameOrNull, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.InvokeExportAsync``1(System.Threading.CancellationToken,System.String,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="abstract member InvokeExportAsync : System.Threading.CancellationToken * string * string * obj[] -&gt; System.Threading.Tasks.Task&lt;'T&gt;&#xA;override this.InvokeExportAsync : System.Threading.CancellationToken * string * string * obj[] -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="outOfProcessNodeInstance.InvokeExportAsync (cancellationToken, moduleName, exportNameOrNull, args)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; virtual System::Threading::Tasks::Task&lt;T&gt; ^ InvokeExportAsync(System::Threading::CancellationToken cancellationToken, System::String ^ moduleName, System::String ^ exportNameOrNull, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.NodeServices.HostingModels.INodeInstance.InvokeExportAsync``1(System.Threading.CancellationToken,System.String,System.String,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance/&lt;InvokeExportAsync&gt;d__13`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="exportNameOrNull" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The JSON-serializable data type that the Node.js code will asynchronously return.</typeparam>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the invocation.</param>
        <param name="moduleName">The path to the Node.js module (i.e., JavaScript file) relative to your project root that contains the code to be invoked.</param>
        <param name="exportNameOrNull">If set, specifies the CommonJS export to be invoked. If not set, the module's default CommonJS export itself must be a function to be invoked.</param>
        <param name="args">Any sequence of JSON-serializable arguments to be passed to the Node.js function.</param>
        <summary>
            Asynchronously invokes code in the Node.js instance.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the completion of the RPC call.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorDataReceived">
      <MemberSignature Language="C#" Value="protected virtual void OnErrorDataReceived (string errorData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnErrorDataReceived(string errorData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.OnErrorDataReceived(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnErrorDataReceived (errorData As String)" />
      <MemberSignature Language="F#" Value="abstract member OnErrorDataReceived : string -&gt; unit&#xA;override this.OnErrorDataReceived : string -&gt; unit" Usage="outOfProcessNodeInstance.OnErrorDataReceived errorData" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnErrorDataReceived(System::String ^ errorData);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual void OnErrorDataReceived(Platform::String ^ errorData);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void OnErrorDataReceived(std::wstring const &amp; errorData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorData" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="errorData">The line emitted to the Node.js process's stderr.</param>
        <summary>
            Virtual method invoked whenever the Node.js process emits a line to its stderr.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnOutputDataReceived">
      <MemberSignature Language="C#" Value="protected virtual void OnOutputDataReceived (string outputData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOutputDataReceived(string outputData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.OnOutputDataReceived(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnOutputDataReceived (outputData As String)" />
      <MemberSignature Language="F#" Value="abstract member OnOutputDataReceived : string -&gt; unit&#xA;override this.OnOutputDataReceived : string -&gt; unit" Usage="outOfProcessNodeInstance.OnOutputDataReceived outputData" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnOutputDataReceived(System::String ^ outputData);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual void OnOutputDataReceived(Platform::String ^ outputData);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void OnOutputDataReceived(std::wstring const &amp; outputData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputData" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputData">The line emitted to the Node.js process's stdout.</param>
        <summary>
            Virtual method invoked whenever the Node.js process emits a line to its stdout.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputLogger">
      <MemberSignature Language="C#" Value="protected readonly Microsoft.Extensions.Logging.ILogger OutputLogger;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly class Microsoft.Extensions.Logging.ILogger OutputLogger" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.OutputLogger" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly OutputLogger As ILogger " />
      <MemberSignature Language="F#" Value="val mutable OutputLogger : Microsoft.Extensions.Logging.ILogger" Usage="Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.OutputLogger" />
      <MemberSignature Language="C++ CLI" Value="protected: initonly Microsoft::Extensions::Logging::ILogger ^ OutputLogger;" />
      <MemberSignature Language="C++ CX" Value="protected: initonly Microsoft::Extensions::Logging::ILogger ^ OutputLogger;" />
      <MemberSignature Language="C++ WINRT" Value="initonly Microsoft::Extensions::Logging::ILogger OutputLogger;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to which the Node.js instance's stdout/stderr is being redirected.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareNodeProcessStartInfo">
      <MemberSignature Language="C#" Value="protected virtual System.Diagnostics.ProcessStartInfo PrepareNodeProcessStartInfo (string entryPointFilename, string projectPath, string commandLineArguments, System.Collections.Generic.IDictionary&lt;string,string&gt; environmentVars, bool launchWithDebugging, int debuggingPort);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Diagnostics.ProcessStartInfo PrepareNodeProcessStartInfo(string entryPointFilename, string projectPath, string commandLineArguments, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; environmentVars, bool launchWithDebugging, int32 debuggingPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.PrepareNodeProcessStartInfo(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function PrepareNodeProcessStartInfo (entryPointFilename As String, projectPath As String, commandLineArguments As String, environmentVars As IDictionary(Of String, String), launchWithDebugging As Boolean, debuggingPort As Integer) As ProcessStartInfo" />
      <MemberSignature Language="F#" Value="abstract member PrepareNodeProcessStartInfo : string * string * string * System.Collections.Generic.IDictionary&lt;string, string&gt; * bool * int -&gt; System.Diagnostics.ProcessStartInfo&#xA;override this.PrepareNodeProcessStartInfo : string * string * string * System.Collections.Generic.IDictionary&lt;string, string&gt; * bool * int -&gt; System.Diagnostics.ProcessStartInfo" Usage="outOfProcessNodeInstance.PrepareNodeProcessStartInfo (entryPointFilename, projectPath, commandLineArguments, environmentVars, launchWithDebugging, debuggingPort)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Diagnostics::ProcessStartInfo ^ PrepareNodeProcessStartInfo(System::String ^ entryPointFilename, System::String ^ projectPath, System::String ^ commandLineArguments, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ environmentVars, bool launchWithDebugging, int debuggingPort);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessStartInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryPointFilename" Type="System.String" />
        <Parameter Name="projectPath" Type="System.String" />
        <Parameter Name="commandLineArguments" Type="System.String" />
        <Parameter Name="environmentVars" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="launchWithDebugging" Type="System.Boolean" />
        <Parameter Name="debuggingPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="entryPointFilename">The entrypoint JavaScript file that the Node.js process should execute.</param>
        <param name="projectPath">The root path of the project. This is used when locating Node.js modules relative to the project root.</param>
        <param name="commandLineArguments">Command-line arguments to be passed to the Node.js process.</param>
        <param name="environmentVars">Environment variables to be set on the Node.js process.</param>
        <param name="launchWithDebugging">If true, passes a flag to the Node.js process telling it to accept V8 Inspector connections.</param>
        <param name="debuggingPort">If debugging is enabled, the Node.js process should listen for V8 Inspector connections on this port.</param>
        <summary>
            Configures a <see cref="T:System.Diagnostics.ProcessStartInfo" /> instance describing how to launch the Node.js process.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>