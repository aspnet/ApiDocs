<Type Name="IEntityFrameworkService" FullName="Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.IEntityFrameworkService">
  <TypeSignature Language="C#" Value="public interface IEntityFrameworkService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEntityFrameworkService" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.IEntityFrameworkService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEntityFrameworkService" />
  <TypeSignature Language="F#" Value="type IEntityFrameworkService = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetModelMetadata">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.ContextProcessingResult&gt; GetModelMetadata (string dbContextFullTypeName, Microsoft.VisualStudio.Web.CodeGeneration.ModelType modelTypeName, string areaName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.ContextProcessingResult&gt; GetModelMetadata(string dbContextFullTypeName, class Microsoft.VisualStudio.Web.CodeGeneration.ModelType modelTypeName, string areaName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.IEntityFrameworkService.GetModelMetadata(System.String,Microsoft.VisualStudio.Web.CodeGeneration.ModelType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModelMetadata (dbContextFullTypeName As String, modelTypeName As ModelType, areaName As String) As Task(Of ContextProcessingResult)" />
      <MemberSignature Language="F#" Value="abstract member GetModelMetadata : string * Microsoft.VisualStudio.Web.CodeGeneration.ModelType * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.ContextProcessingResult&gt;" Usage="iEntityFrameworkService.GetModelMetadata (dbContextFullTypeName, modelTypeName, areaName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.ContextProcessingResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dbContextFullTypeName" Type="System.String" />
        <Parameter Name="modelTypeName" Type="Microsoft.VisualStudio.Web.CodeGeneration.ModelType" />
        <Parameter Name="areaName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dbContextFullTypeName">Full name (including namespace) of the context class.</param>
        <param name="modelTypeName">Model type for which the EF metadata has to be returned.</param>
        <param name="areaName">Name of the area on which scaffolding is being run. Used for generating path for new DbContext.</param>
        <summary>
            Gets the EF metadata for given context and model.
            Method takes in full type name of context and if there is no context with that name,
            attempts to create one. When creating a context, the method also tries to modify Startup
            code to register the new context through DI.
            When the given context is available but there is no DbSet property of given model type
            context will be edited to add the property.
            The method throws exceptions if there are any errors running EF code to get the EF metadata.
            And no changes are written to disk.
            When the method successfully returned, it's guranteed to have ModelMetadata present
            in the return value. Before returning all the code edits are persisted to disk.
            </summary>
        <returns>Returns <see cref="T:Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.ContextProcessingResult" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>