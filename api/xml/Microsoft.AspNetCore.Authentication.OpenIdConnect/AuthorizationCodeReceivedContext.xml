<Type Name="AuthorizationCodeReceivedContext" FullName="Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext">
  <TypeSignature Language="C#" Value="public class AuthorizationCodeReceivedContext : Microsoft.AspNetCore.Authentication.OpenIdConnect.BaseOpenIdConnectContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthorizationCodeReceivedContext extends Microsoft.AspNetCore.Authentication.OpenIdConnect.BaseOpenIdConnectContext" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AuthorizationCodeReceivedContext&#xA;Inherits BaseOpenIdConnectContext" />
  <TypeSignature Language="F#" Value="type AuthorizationCodeReceivedContext = class&#xA;    inherit BaseOpenIdConnectContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AuthorizationCodeReceivedContext : Microsoft::AspNetCore::Authentication::OpenIdConnect::BaseOpenIdConnectContext" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class AuthorizationCodeReceivedContext : Microsoft::AspNetCore::Authentication::OpenIdConnect::BaseOpenIdConnectContext" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.AspNetCore.Authentication.OpenIdConnect.BaseOpenIdConnectContext</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This Context can be used to be informed when an 'AuthorizationCode' is received over the OpenIdConnect protocol.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthorizationCodeReceivedContext (Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Builder.OpenIdConnectOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Http.HttpContext context, class Microsoft.AspNetCore.Builder.OpenIdConnectOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Builder.OpenIdConnectOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As HttpContext, options As OpenIdConnectOptions)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext : Microsoft.AspNetCore.Http.HttpContext * Microsoft.AspNetCore.Builder.OpenIdConnectOptions -&gt; Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext" Usage="new Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext (context, options)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AuthorizationCodeReceivedContext(Microsoft::AspNetCore::Http::HttpContext ^ context, Microsoft::AspNetCore::Builder::OpenIdConnectOptions ^ options);" />
      <MemberSignature Language="C++ WINRT" Value=" AuthorizationCodeReceivedContext(Microsoft::AspNetCore::Http::HttpContext const &amp; context, Microsoft::AspNetCore::Builder::OpenIdConnectOptions const &amp; options);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.OpenIdConnectOptions" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="options">To be added.</param>
        <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Backchannel">
      <MemberSignature Language="C#" Value="public System.Net.Http.HttpClient Backchannel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.HttpClient Backchannel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.Backchannel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Backchannel As HttpClient" />
      <MemberSignature Language="F#" Value="member this.Backchannel : System.Net.Http.HttpClient" Usage="Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.Backchannel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::HttpClient ^ Backchannel { System::Net::Http::HttpClient ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpClient</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The configured communication channel to the identity provider for use when making custom requests to the token endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleCodeRedemption">
      <MemberSignature Language="C#" Value="public void HandleCodeRedemption ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HandleCodeRedemption() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.HandleCodeRedemption" />
      <MemberSignature Language="VB.NET" Value="Public Sub HandleCodeRedemption ()" />
      <MemberSignature Language="F#" Value="member this.HandleCodeRedemption : unit -&gt; unit" Usage="authorizationCodeReceivedContext.HandleCodeRedemption " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HandleCodeRedemption();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void HandleCodeRedemption();" />
      <MemberSignature Language="C++ WINRT" Value="void HandleCodeRedemption();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Tells the middleware to skip the code redemption process. The developer may have redeemed the code themselves, or
            decided that the redemption was not required. If tokens were retrieved that are needed for further processing then
            call one of the overloads that allows providing tokens. An IdToken is required if one had not been previously received
            in the authorization response. An access token can optionally be provided for the middleware to contact the
            user-info endpoint. Calling this is the same as setting TokenEndpointResponse.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleCodeRedemption">
      <MemberSignature Language="C#" Value="public void HandleCodeRedemption (Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage tokenEndpointResponse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HandleCodeRedemption(class Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage tokenEndpointResponse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.HandleCodeRedemption(Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HandleCodeRedemption (tokenEndpointResponse As OpenIdConnectMessage)" />
      <MemberSignature Language="F#" Value="member this.HandleCodeRedemption : Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage -&gt; unit" Usage="authorizationCodeReceivedContext.HandleCodeRedemption tokenEndpointResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HandleCodeRedemption(Microsoft::IdentityModel::Protocols::OpenIdConnect::OpenIdConnectMessage ^ tokenEndpointResponse);" />
      <MemberSignature Language="C++ WINRT" Value="void HandleCodeRedemption(Microsoft::IdentityModel::Protocols::OpenIdConnect::OpenIdConnectMessage const &amp; tokenEndpointResponse);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenEndpointResponse" Type="Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage" />
      </Parameters>
      <Docs>
        <param name="tokenEndpointResponse">To be added.</param>
        <summary>
            Tells the middleware to skip the code redemption process. The developer may have redeemed the code themselves, or
            decided that the redemption was not required. If tokens were retrieved that are needed for further processing then
            call one of the overloads that allows providing tokens. An IdToken is required if one had not been previously received
            in the authorization response. An access token can optionally be provided for the middleware to contact the
            user-info endpoint. Calling this is the same as setting TokenEndpointResponse.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleCodeRedemption">
      <MemberSignature Language="C#" Value="public void HandleCodeRedemption (string accessToken, string idToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HandleCodeRedemption(string accessToken, string idToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.HandleCodeRedemption(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HandleCodeRedemption (accessToken As String, idToken As String)" />
      <MemberSignature Language="F#" Value="member this.HandleCodeRedemption : string * string -&gt; unit" Usage="authorizationCodeReceivedContext.HandleCodeRedemption (accessToken, idToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HandleCodeRedemption(System::String ^ accessToken, System::String ^ idToken);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void HandleCodeRedemption(Platform::String ^ accessToken, Platform::String ^ idToken);" />
      <MemberSignature Language="C++ WINRT" Value="void HandleCodeRedemption(std::wstring const &amp; accessToken, std::wstring const &amp; idToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessToken" Type="System.String" />
        <Parameter Name="idToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="accessToken">To be added.</param>
        <param name="idToken">To be added.</param>
        <summary>
            Tells the middleware to skip the code redemption process. The developer may have redeemed the code themselves, or
            decided that the redemption was not required. If tokens were retrieved that are needed for further processing then
            call one of the overloads that allows providing tokens. An IdToken is required if one had not been previously received
            in the authorization response. An access token can optionally be provided for the middleware to contact the
            user-info endpoint. Calling this is the same as setting TokenEndpointResponse.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandledCodeRedemption">
      <MemberSignature Language="C#" Value="public bool HandledCodeRedemption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HandledCodeRedemption" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.HandledCodeRedemption" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HandledCodeRedemption As Boolean" />
      <MemberSignature Language="F#" Value="member this.HandledCodeRedemption : bool" Usage="Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.HandledCodeRedemption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HandledCodeRedemption { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool HandledCodeRedemption { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates if the developer choose to handle (or skip) the code redemption. If true then the middleware will not attempt
            to redeem the code. See HandleCodeRedemption and TokenEndpointResponse.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JwtSecurityToken">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.Jwt.JwtSecurityToken JwtSecurityToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.Jwt.JwtSecurityToken JwtSecurityToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.JwtSecurityToken" />
      <MemberSignature Language="VB.NET" Value="Public Property JwtSecurityToken As JwtSecurityToken" />
      <MemberSignature Language="F#" Value="member this.JwtSecurityToken : System.IdentityModel.Tokens.Jwt.JwtSecurityToken with get, set" Usage="Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.JwtSecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::Jwt::JwtSecurityToken ^ JwtSecurityToken { System::IdentityModel::Tokens::Jwt::JwtSecurityToken ^ get(); void set(System::IdentityModel::Tokens::Jwt::JwtSecurityToken ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.Jwt.JwtSecurityToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the <see cref="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.JwtSecurityToken" /> that was received in the authentication response, if any.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties Properties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties Properties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.Properties" />
      <MemberSignature Language="VB.NET" Value="Public Property Properties As AuthenticationProperties" />
      <MemberSignature Language="F#" Value="member this.Properties : Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties with get, set" Usage="Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.Properties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::Http::Authentication::AuthenticationProperties ^ Properties { Microsoft::AspNetCore::Http::Authentication::AuthenticationProperties ^ get(); void set(Microsoft::AspNetCore::Http::Authentication::AuthenticationProperties ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenEndpointRequest">
      <MemberSignature Language="C#" Value="public Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage TokenEndpointRequest { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage TokenEndpointRequest" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.TokenEndpointRequest" />
      <MemberSignature Language="VB.NET" Value="Public Property TokenEndpointRequest As OpenIdConnectMessage" />
      <MemberSignature Language="F#" Value="member this.TokenEndpointRequest : Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage with get, set" Usage="Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.TokenEndpointRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::IdentityModel::Protocols::OpenIdConnect::OpenIdConnectMessage ^ TokenEndpointRequest { Microsoft::IdentityModel::Protocols::OpenIdConnect::OpenIdConnectMessage ^ get(); void set(Microsoft::IdentityModel::Protocols::OpenIdConnect::OpenIdConnectMessage ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The request that will be sent to the token endpoint and is available for customization.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenEndpointResponse">
      <MemberSignature Language="C#" Value="public Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage TokenEndpointResponse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage TokenEndpointResponse" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.TokenEndpointResponse" />
      <MemberSignature Language="VB.NET" Value="Public Property TokenEndpointResponse As OpenIdConnectMessage" />
      <MemberSignature Language="F#" Value="member this.TokenEndpointResponse : Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage with get, set" Usage="Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.TokenEndpointResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::IdentityModel::Protocols::OpenIdConnect::OpenIdConnectMessage ^ TokenEndpointResponse { Microsoft::IdentityModel::Protocols::OpenIdConnect::OpenIdConnectMessage ^ get(); void set(Microsoft::IdentityModel::Protocols::OpenIdConnect::OpenIdConnectMessage ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If the developer chooses to redeem the code themselves then they can provide the resulting tokens here. This is the
            same as calling HandleCodeRedemption. If set then the middleware will not attempt to redeem the code. An IdToken
            is required if one had not been previously received in the authorization response. An access token is optional
            if the middleware is to contact the user-info endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
