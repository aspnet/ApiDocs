<Type Name="IPipeReader" FullName="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader">
  <TypeSignature Language="C#" Value="public interface IPipeReader" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPipeReader" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPipeReader" />
  <TypeSignature Language="F#" Value="type IPipeReader = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Defines a class that provides a pipeline from which data can be read.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Advance">
      <MemberSignature Language="C#" Value="public void Advance (Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor consumed, Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor examined);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Advance(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor consumed, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor examined) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader.Advance(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor,Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Advance (consumed As ReadCursor, examined As ReadCursor)" />
      <MemberSignature Language="F#" Value="abstract member Advance : Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor * Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor -&gt; unit" Usage="iPipeReader.Advance (consumed, examined)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="consumed" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor" />
        <Parameter Name="examined" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor" />
      </Parameters>
      <Docs>
        <param name="consumed">Marks the extent of the data that has been succesfully proceesed.</param>
        <param name="examined">Marks the extent of the data that has been read and examined.</param>
        <summary>
            Moves forward the pipeline's read cursor to after the consumed data.
            </summary>
        <remarks>
            The memory for the consumed data will be released and no longer available.
            The examined data communicates to the pipeline when it should signal more data is available.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRead">
      <MemberSignature Language="C#" Value="public void CancelPendingRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelPendingRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader.CancelPendingRead" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRead ()" />
      <MemberSignature Language="F#" Value="abstract member CancelPendingRead : unit -&gt; unit" Usage="iPipeReader.CancelPendingRead " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Cancel to currently pending or next call to <see cref="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader.ReadAsync(System.Threading.CancellationToken)" /> if none is pending, without completing the <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete (Exception exception = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader.Complete(System.Exception)" />
      <MemberSignature Language="F#" Value="abstract member Complete : Exception -&gt; unit" Usage="iPipeReader.Complete exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Optional Exception indicating a failure that's causing the pipeline to complete.</param>
        <summary>
            Signal to the producer that the consumer is done reading.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWriterCompleted">
      <MemberSignature Language="C#" Value="public void OnWriterCompleted (Action&lt;Exception,object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWriterCompleted(class System.Action`2&lt;class System.Exception, object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader.OnWriterCompleted(System.Action{System.Exception,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnWriterCompleted (callback As Action(Of Exception, Object), state As Object)" />
      <MemberSignature Language="F#" Value="abstract member OnWriterCompleted : Action&lt;Exception, obj&gt; * obj -&gt; unit" Usage="iPipeReader.OnWriterCompleted (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Exception,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="state">To be added.</param>
        <summary>
            Registers callback that gets executed when writer side of pipe completes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBufferAwaitable ReadAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBufferAwaitable ReadAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader.ReadAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadAsync : System.Threading.CancellationToken -&gt; Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBufferAwaitable" Usage="iPipeReader.ReadAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBufferAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
            Asynchronously reads a sequence of bytes from the current <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader" />.
            </summary>
        <returns>A <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBufferAwaitable" /> representing the asynchronous read operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead">
      <MemberSignature Language="C#" Value="public bool TryRead (out Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryRead([out] valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadResult&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader.TryRead(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadResult@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryRead (ByRef result As ReadResult) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryRead :  -&gt; bool" Usage="iPipeReader.TryRead result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadResult" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">The <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadResult" /></param>
        <summary>
            Attempt to synchronously read data the <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader" />.
            </summary>
        <returns>True if data was available, or if the call was cancelled or the writer completed with an error.</returns>
        <remarks>If the pipe returns false, there's no need to call Advance.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>