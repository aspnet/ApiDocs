<Type Name="ConditionEvaluator" FullName="Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.ConditionEvaluator">
  <TypeSignature Language="C#" Value="public static class ConditionEvaluator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ConditionEvaluator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.ConditionEvaluator" />
  <TypeSignature Language="VB.NET" Value="Public Class ConditionEvaluator" />
  <TypeSignature Language="F#" Value="type ConditionEvaluator = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConditionEvaluator abstract sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class ConditionEvaluator abstract sealed" />
  <TypeSignature Language="C++ WINRT" Value="class ConditionEvaluator abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Rewrite</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.Internal.MatchResults Evaluate (System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Condition&gt; conditions, Microsoft.AspNetCore.Rewrite.RewriteContext context, Microsoft.AspNetCore.Rewrite.Internal.BackReferenceCollection backReferences);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.Internal.MatchResults Evaluate(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Condition&gt; conditions, class Microsoft.AspNetCore.Rewrite.RewriteContext context, class Microsoft.AspNetCore.Rewrite.Internal.BackReferenceCollection backReferences) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.ConditionEvaluator.Evaluate(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Condition},Microsoft.AspNetCore.Rewrite.RewriteContext,Microsoft.AspNetCore.Rewrite.Internal.BackReferenceCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Evaluate (conditions As IEnumerable(Of Condition), context As RewriteContext, backReferences As BackReferenceCollection) As MatchResults" />
      <MemberSignature Language="F#" Value="static member Evaluate : seq&lt;Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Condition&gt; * Microsoft.AspNetCore.Rewrite.RewriteContext * Microsoft.AspNetCore.Rewrite.Internal.BackReferenceCollection -&gt; Microsoft.AspNetCore.Rewrite.Internal.MatchResults" Usage="Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.ConditionEvaluator.Evaluate (conditions, context, backReferences)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::AspNetCore::Rewrite::Internal::MatchResults ^ Evaluate(System::Collections::Generic::IEnumerable&lt;Microsoft::AspNetCore::Rewrite::Internal::ApacheModRewrite::Condition ^&gt; ^ conditions, Microsoft::AspNetCore::Rewrite::RewriteContext ^ context, Microsoft::AspNetCore::Rewrite::Internal::BackReferenceCollection ^ backReferences);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Rewrite</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Rewrite.Internal.MatchResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Condition&gt;" />
        <Parameter Name="context" Type="Microsoft.AspNetCore.Rewrite.RewriteContext" />
        <Parameter Name="backReferences" Type="Microsoft.AspNetCore.Rewrite.Internal.BackReferenceCollection" />
      </Parameters>
      <Docs>
        <param name="conditions">To be added.</param>
        <param name="context">To be added.</param>
        <param name="backReferences">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.Internal.MatchResults Evaluate (System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Condition&gt; conditions, Microsoft.AspNetCore.Rewrite.RewriteContext context, Microsoft.AspNetCore.Rewrite.Internal.BackReferenceCollection backReferences, bool trackAllCaptures);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.Internal.MatchResults Evaluate(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Condition&gt; conditions, class Microsoft.AspNetCore.Rewrite.RewriteContext context, class Microsoft.AspNetCore.Rewrite.Internal.BackReferenceCollection backReferences, bool trackAllCaptures) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.ConditionEvaluator.Evaluate(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Condition},Microsoft.AspNetCore.Rewrite.RewriteContext,Microsoft.AspNetCore.Rewrite.Internal.BackReferenceCollection,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Evaluate (conditions As IEnumerable(Of Condition), context As RewriteContext, backReferences As BackReferenceCollection, trackAllCaptures As Boolean) As MatchResults" />
      <MemberSignature Language="F#" Value="static member Evaluate : seq&lt;Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Condition&gt; * Microsoft.AspNetCore.Rewrite.RewriteContext * Microsoft.AspNetCore.Rewrite.Internal.BackReferenceCollection * bool -&gt; Microsoft.AspNetCore.Rewrite.Internal.MatchResults" Usage="Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.ConditionEvaluator.Evaluate (conditions, context, backReferences, trackAllCaptures)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::AspNetCore::Rewrite::Internal::MatchResults ^ Evaluate(System::Collections::Generic::IEnumerable&lt;Microsoft::AspNetCore::Rewrite::Internal::ApacheModRewrite::Condition ^&gt; ^ conditions, Microsoft::AspNetCore::Rewrite::RewriteContext ^ context, Microsoft::AspNetCore::Rewrite::Internal::BackReferenceCollection ^ backReferences, bool trackAllCaptures);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Rewrite</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Rewrite.Internal.MatchResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Condition&gt;" />
        <Parameter Name="context" Type="Microsoft.AspNetCore.Rewrite.RewriteContext" />
        <Parameter Name="backReferences" Type="Microsoft.AspNetCore.Rewrite.Internal.BackReferenceCollection" />
        <Parameter Name="trackAllCaptures" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="conditions">To be added.</param>
        <param name="context">To be added.</param>
        <param name="backReferences">To be added.</param>
        <param name="trackAllCaptures">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>