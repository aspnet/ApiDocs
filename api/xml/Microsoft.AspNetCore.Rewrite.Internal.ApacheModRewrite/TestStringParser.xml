<Type Name="TestStringParser" FullName="Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.TestStringParser">
  <TypeSignature Language="C#" Value="public class TestStringParser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TestStringParser extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.TestStringParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TestStringParser" />
  <TypeSignature Language="F#" Value="type TestStringParser = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Rewrite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Parses the TestString segment of the mod_rewrite condition.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TestStringParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.TestStringParser.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Rewrite</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Rewrite.Internal.Pattern Parse (string testString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.AspNetCore.Rewrite.Internal.Pattern Parse(string testString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.TestStringParser.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (testString As String) As Pattern" />
      <MemberSignature Language="F#" Value="member this.Parse : string -&gt; Microsoft.AspNetCore.Rewrite.Internal.Pattern" Usage="testStringParser.Parse testString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Rewrite</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Rewrite.Internal.Pattern</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="testString">The test string portion of the RewriteCond
            Examples:
            %{REMOTE_ADDR}
            /var/www/%{REQUEST_URI}
            %1
            $1</param>
        <summary>
            Creates a pattern, which is a template to create a new test string to 
            compare to the condition pattern. Can contain server variables, back references, etc.
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Rewrite.Internal.Pattern" />, containing a list of <see cref="T:Microsoft.AspNetCore.Rewrite.Internal.PatternSegment" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>