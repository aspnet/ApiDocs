<Type Name="WebHookEventMapperConstraint" FullName="Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint">
  <TypeSignature Language="C#" Value="public class WebHookEventMapperConstraint : Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebHookEventMapperConstraint extends System.Object implements class Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint, class Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint" />
  <TypeSignature Language="VB.NET" Value="Public Class WebHookEventMapperConstraint&#xA;Implements IActionConstraint" />
  <TypeSignature Language="F#" Value="type WebHookEventMapperConstraint = class&#xA;    interface IActionConstraint&#xA;    interface IActionConstraintMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebHookEventMapperConstraint : Microsoft::AspNetCore::Mvc::ActionConstraints::IActionConstraint" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class WebHookEventMapperConstraint : Microsoft::AspNetCore::Mvc::ActionConstraints::IActionConstraint" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint" /> implementation which uses <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata" /> to determine
            the event name(s) for a WebHook request. This constraint accepts all candidates for receivers lacking
            <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata" /> or with <see cref="P:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata.ConstantValue" />
            non-<see langword="null" />. Otherwise, the request must contain one or more event names.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebHookEventMapperConstraint (System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata&gt; eventMetadata, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata&gt; eventMetadata, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata},Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventMetadata As IEnumerable(Of IWebHookEventMetadata), loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint : seq&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata&gt; * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint" Usage="new Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint (eventMetadata, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebHookEventMapperConstraint(System::Collections::Generic::IEnumerable&lt;Microsoft::AspNetCore::WebHooks::Metadata::IWebHookEventMetadata ^&gt; ^ eventMetadata, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventMetadata" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata&gt;" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="eventMetadata">The collection of <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata" /> services.</param>
        <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />.</param>
        <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public bool Accept (Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Accept(class Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint.Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function Accept (context As ActionConstraintContext) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Accept : Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext -&gt; bool&#xA;override this.Accept : Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext -&gt; bool" Usage="webHookEventMapperConstraint.Accept context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Accept(Microsoft::AspNetCore::Mvc::ActionConstraints::ActionConstraintContext ^ context);" />
      <MemberSignature Language="C++ WINRT" Value="bool Accept(Microsoft::AspNetCore::Mvc::ActionConstraints::ActionConstraintContext const &amp; context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected virtual bool Accept (Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata eventMetadata, Microsoft.AspNetCore.Routing.RouteContext routeContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Accept(class Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata eventMetadata, class Microsoft.AspNetCore.Routing.RouteContext routeContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint.Accept(Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata,Microsoft.AspNetCore.Routing.RouteContext)" />
      <MemberSignature Language="F#" Value="abstract member Accept : Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata * Microsoft.AspNetCore.Routing.RouteContext -&gt; bool&#xA;override this.Accept : Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata * Microsoft.AspNetCore.Routing.RouteContext -&gt; bool" Usage="webHookEventMapperConstraint.Accept (eventMetadata, routeContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Accept(Microsoft::AspNetCore::WebHooks::Metadata::IWebHookEventMetadata ^ eventMetadata, Microsoft::AspNetCore::Routing::RouteContext ^ routeContext);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual bool Accept(Microsoft::AspNetCore::WebHooks::Metadata::IWebHookEventMetadata const &amp; eventMetadata, Microsoft::AspNetCore::Routing::RouteContext const &amp; routeContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventMetadata" Type="Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata" />
        <Parameter Name="routeContext" Type="Microsoft.AspNetCore.Routing.RouteContext" />
      </Parameters>
      <Docs>
        <param name="eventMetadata">The <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata" /> for this receiver.</param>
        <param name="routeContext">The <see cref="T:Microsoft.AspNetCore.Routing.RouteContext" /> for this constraint and request.</param>
        <summary>
            Gets an indication whether the expected event names are available in the request. Maps the event names into
            route values.
            </summary>
        <returns>
          <see langword="true" /> if event names are available in the request; <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Order">
      <MemberSignature Language="C#" Value="int Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Order { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Order" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint.Microsoft#AspNetCore#Mvc#ActionConstraints#IActionConstraint#Order" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Order As Integer Implements IActionConstraint.Order" />
      <MemberSignature Language="F#" Usage="Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Order" />
      <MemberSignature Language="C++ CLI" Value="property int Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Order { int get(); };" />
      <MemberSignature Language="C++ CX" Value="property int Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Order { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Order</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public static int Order { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 Order" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint.Order" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Order As Integer" />
      <MemberSignature Language="F#" Value="member this.Order : int" Usage="Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint.Order" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int Order { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static property int Order { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Order</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Order" /> value used in all <see cref="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint" />
            instances.
            </summary>
        <value>Chosen to run this constraint just after <see cref="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookIdConstraint" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>