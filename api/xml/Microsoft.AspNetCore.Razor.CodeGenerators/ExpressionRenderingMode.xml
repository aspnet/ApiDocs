<Type Name="ExpressionRenderingMode" FullName="Microsoft.AspNetCore.Razor.CodeGenerators.ExpressionRenderingMode">
  <TypeSignature Language="C#" Value="public enum ExpressionRenderingMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExpressionRenderingMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Razor.CodeGenerators.ExpressionRenderingMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum ExpressionRenderingMode" />
  <TypeSignature Language="F#" Value="type ExpressionRenderingMode = " />
  <TypeSignature Language="C++ CLI" Value="public enum class ExpressionRenderingMode" />
  <TypeSignature Language="C++ CX" Value="public enum class ExpressionRenderingMode" />
  <TypeSignature Language="C++ WINRT" Value="enum ExpressionRenderingMode" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="InjectCode">
      <MemberSignature Language="C#" Value="InjectCode" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.AspNetCore.Razor.CodeGenerators.ExpressionRenderingMode InjectCode = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.Razor.CodeGenerators.ExpressionRenderingMode.InjectCode" />
      <MemberSignature Language="VB.NET" Value="InjectCode" />
      <MemberSignature Language="F#" Value="InjectCode = 1" Usage="Microsoft.AspNetCore.Razor.CodeGenerators.ExpressionRenderingMode.InjectCode" />
      <MemberSignature Language="C++ CLI" Value="InjectCode" />
      <MemberSignature Language="C++ CX" Value="InjectCode" />
      <MemberSignature Language="C++ WINRT" Value="InjectCode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Razor.CodeGenerators.ExpressionRenderingMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
             Indicates that expressions should simply be placed as-is in the code, and the context in which
             the code exists will be used to render it
             </summary>
        <example>
             If @foo is rendered with InjectCode, the code generator would output the following code:
            
             foo
             </example>
      </Docs>
    </Member>
    <Member MemberName="WriteToOutput">
      <MemberSignature Language="C#" Value="WriteToOutput" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.AspNetCore.Razor.CodeGenerators.ExpressionRenderingMode WriteToOutput = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.Razor.CodeGenerators.ExpressionRenderingMode.WriteToOutput" />
      <MemberSignature Language="VB.NET" Value="WriteToOutput" />
      <MemberSignature Language="F#" Value="WriteToOutput = 0" Usage="Microsoft.AspNetCore.Razor.CodeGenerators.ExpressionRenderingMode.WriteToOutput" />
      <MemberSignature Language="C++ CLI" Value="WriteToOutput" />
      <MemberSignature Language="C++ CX" Value="WriteToOutput" />
      <MemberSignature Language="C++ WINRT" Value="WriteToOutput" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Razor.CodeGenerators.ExpressionRenderingMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
             Indicates that expressions should be written to the output stream
             </summary>
        <example>
             If @foo is rendered with WriteToOutput, the code generator would output the following code:
            
             Write(foo);
             </example>
      </Docs>
    </Member>
  </Members>
</Type>
