<Type Name="CSharpTagHelperCodeRenderer" FullName="Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer">
  <TypeSignature Language="C#" Value="public class CSharpTagHelperCodeRenderer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CSharpTagHelperCodeRenderer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer" />
  <TypeSignature Language="VB.NET" Value="Public Class CSharpTagHelperCodeRenderer" />
  <TypeSignature Language="F#" Value="type CSharpTagHelperCodeRenderer = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class CSharpTagHelperCodeRenderer" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class CSharpTagHelperCodeRenderer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Renders tag helper rendering code.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CSharpTagHelperCodeRenderer (Microsoft.AspNetCore.Razor.CodeGenerators.Visitors.IChunkVisitor bodyVisitor, Microsoft.AspNetCore.Razor.CodeGenerators.CSharpCodeWriter writer, Microsoft.AspNetCore.Razor.CodeGenerators.CodeGeneratorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Razor.CodeGenerators.Visitors.IChunkVisitor bodyVisitor, class Microsoft.AspNetCore.Razor.CodeGenerators.CSharpCodeWriter writer, class Microsoft.AspNetCore.Razor.CodeGenerators.CodeGeneratorContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer.#ctor(Microsoft.AspNetCore.Razor.CodeGenerators.Visitors.IChunkVisitor,Microsoft.AspNetCore.Razor.CodeGenerators.CSharpCodeWriter,Microsoft.AspNetCore.Razor.CodeGenerators.CodeGeneratorContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bodyVisitor As IChunkVisitor, writer As CSharpCodeWriter, context As CodeGeneratorContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer : Microsoft.AspNetCore.Razor.CodeGenerators.Visitors.IChunkVisitor * Microsoft.AspNetCore.Razor.CodeGenerators.CSharpCodeWriter * Microsoft.AspNetCore.Razor.CodeGenerators.CodeGeneratorContext -&gt; Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer" Usage="new Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer (bodyVisitor, writer, context)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CSharpTagHelperCodeRenderer(Microsoft::AspNetCore::Razor::CodeGenerators::Visitors::IChunkVisitor ^ bodyVisitor, Microsoft::AspNetCore::Razor::CodeGenerators::CSharpCodeWriter ^ writer, Microsoft::AspNetCore::Razor::CodeGenerators::CodeGeneratorContext ^ context);" />
      <MemberSignature Language="C++ WINRT" Value=" CSharpTagHelperCodeRenderer(Microsoft::AspNetCore::Razor::CodeGenerators::Visitors::IChunkVisitor const &amp; bodyVisitor, Microsoft::AspNetCore::Razor::CodeGenerators::CSharpCodeWriter const &amp; writer, Microsoft::AspNetCore::Razor::CodeGenerators::CodeGeneratorContext const &amp; context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bodyVisitor" Type="Microsoft.AspNetCore.Razor.CodeGenerators.Visitors.IChunkVisitor" />
        <Parameter Name="writer" Type="Microsoft.AspNetCore.Razor.CodeGenerators.CSharpCodeWriter" />
        <Parameter Name="context" Type="Microsoft.AspNetCore.Razor.CodeGenerators.CodeGeneratorContext" />
      </Parameters>
      <Docs>
        <param name="bodyVisitor">The <see cref="T:Microsoft.AspNetCore.Razor.CodeGenerators.Visitors.IChunkVisitor" /> used to render chunks found in the body.</param>
        <param name="writer">The <see cref="T:Microsoft.AspNetCore.Razor.CodeGenerators.CSharpCodeWriter" /> used to write code.</param>
        <param name="context">A <see cref="T:Microsoft.AspNetCore.Razor.CodeGenerators.CodeGeneratorContext" /> instance that contains information about
            the current code generation process.</param>
        <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeValueCodeRenderer">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Razor.CodeGenerators.TagHelperAttributeValueCodeRenderer AttributeValueCodeRenderer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Razor.CodeGenerators.TagHelperAttributeValueCodeRenderer AttributeValueCodeRenderer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer.AttributeValueCodeRenderer" />
      <MemberSignature Language="VB.NET" Value="Public Property AttributeValueCodeRenderer As TagHelperAttributeValueCodeRenderer" />
      <MemberSignature Language="F#" Value="member this.AttributeValueCodeRenderer : Microsoft.AspNetCore.Razor.CodeGenerators.TagHelperAttributeValueCodeRenderer with get, set" Usage="Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer.AttributeValueCodeRenderer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::Razor::CodeGenerators::TagHelperAttributeValueCodeRenderer ^ AttributeValueCodeRenderer { Microsoft::AspNetCore::Razor::CodeGenerators::TagHelperAttributeValueCodeRenderer ^ get(); void set(Microsoft::AspNetCore::Razor::CodeGenerators::TagHelperAttributeValueCodeRenderer ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Razor.CodeGenerators.TagHelperAttributeValueCodeRenderer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateUniqueId">
      <MemberSignature Language="C#" Value="protected virtual string GenerateUniqueId ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GenerateUniqueId() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer.GenerateUniqueId" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateUniqueId () As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateUniqueId : unit -&gt; string&#xA;override this.GenerateUniqueId : unit -&gt; string" Usage="cSharpTagHelperCodeRenderer.GenerateUniqueId " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GenerateUniqueId();" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual Platform::String ^ GenerateUniqueId();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual std::wstring GenerateUniqueId();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Generates a unique ID for an HTML element.
            </summary>
        <returns>
            A globally unique ID.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDynamicAttributeValue">
      <MemberSignature Language="C#" Value="public static bool IsDynamicAttributeValue (Microsoft.AspNetCore.Razor.Chunks.Chunk attributeValueChunk);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDynamicAttributeValue(class Microsoft.AspNetCore.Razor.Chunks.Chunk attributeValueChunk) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer.IsDynamicAttributeValue(Microsoft.AspNetCore.Razor.Chunks.Chunk)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDynamicAttributeValue (attributeValueChunk As Chunk) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsDynamicAttributeValue : Microsoft.AspNetCore.Razor.Chunks.Chunk -&gt; bool" Usage="Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer.IsDynamicAttributeValue attributeValueChunk" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDynamicAttributeValue(Microsoft::AspNetCore::Razor::Chunks::Chunk ^ attributeValueChunk);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsDynamicAttributeValue(Microsoft::AspNetCore::Razor::Chunks::Chunk const &amp; attributeValueChunk);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeValueChunk" Type="Microsoft.AspNetCore.Razor.Chunks.Chunk" />
      </Parameters>
      <Docs>
        <param name="attributeValueChunk">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTagHelper">
      <MemberSignature Language="C#" Value="public void RenderTagHelper (Microsoft.AspNetCore.Razor.Chunks.TagHelperChunk chunk);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RenderTagHelper(class Microsoft.AspNetCore.Razor.Chunks.TagHelperChunk chunk) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer.RenderTagHelper(Microsoft.AspNetCore.Razor.Chunks.TagHelperChunk)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenderTagHelper (chunk As TagHelperChunk)" />
      <MemberSignature Language="F#" Value="member this.RenderTagHelper : Microsoft.AspNetCore.Razor.Chunks.TagHelperChunk -&gt; unit" Usage="cSharpTagHelperCodeRenderer.RenderTagHelper chunk" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RenderTagHelper(Microsoft::AspNetCore::Razor::Chunks::TagHelperChunk ^ chunk);" />
      <MemberSignature Language="C++ WINRT" Value="void RenderTagHelper(Microsoft::AspNetCore::Razor::Chunks::TagHelperChunk const &amp; chunk);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chunk" Type="Microsoft.AspNetCore.Razor.Chunks.TagHelperChunk" />
      </Parameters>
      <Docs>
        <param name="chunk">A <see cref="T:Microsoft.AspNetCore.Razor.Chunks.TagHelperChunk" /> to render.</param>
        <summary>
            Renders the code for the given <paramref name="chunk" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetPlainTextValue">
      <MemberSignature Language="C#" Value="public static bool TryGetPlainTextValue (Microsoft.AspNetCore.Razor.Chunks.Chunk chunk, out string plainText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetPlainTextValue(class Microsoft.AspNetCore.Razor.Chunks.Chunk chunk, [out] string&amp; plainText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer.TryGetPlainTextValue(Microsoft.AspNetCore.Razor.Chunks.Chunk,System.String@)" />
      <MemberSignature Language="F#" Value="static member TryGetPlainTextValue : Microsoft.AspNetCore.Razor.Chunks.Chunk *  -&gt; bool" Usage="Microsoft.AspNetCore.Razor.CodeGenerators.CSharpTagHelperCodeRenderer.TryGetPlainTextValue (chunk, plainText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetPlainTextValue(Microsoft::AspNetCore::Razor::Chunks::Chunk ^ chunk, [Runtime::InteropServices::Out] System::String ^ % plainText);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool TryGetPlainTextValue(Microsoft::AspNetCore::Razor::Chunks::Chunk const &amp; chunk, [Runtime::InteropServices::Out] std::wstring const &amp; &amp; plainText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chunk" Type="Microsoft.AspNetCore.Razor.Chunks.Chunk" />
        <Parameter Name="plainText" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="chunk">To be added.</param>
        <param name="plainText">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>