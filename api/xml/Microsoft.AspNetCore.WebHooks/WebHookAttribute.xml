<Type Name="WebHookAttribute" FullName="Microsoft.AspNetCore.WebHooks.WebHookAttribute">
  <TypeSignature Language="C#" Value="public abstract class WebHookAttribute : Attribute, Microsoft.AspNetCore.Authorization.IAllowAnonymous, Microsoft.AspNetCore.Mvc.Filters.IFilterFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WebHookAttribute extends System.Attribute implements class Microsoft.AspNetCore.Authorization.IAllowAnonymous, class Microsoft.AspNetCore.Mvc.Filters.IFilterFactory, class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.WebHooks.WebHookAttribute" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WebHookAttribute&#xA;Inherits Attribute&#xA;Implements IAllowAnonymous, IFilterFactory" />
  <TypeSignature Language="F#" Value="type WebHookAttribute = class&#xA;    inherit Attribute&#xA;    interface IAllowAnonymous&#xA;    interface IFilterFactory&#xA;    interface IFilterMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebHookAttribute abstract : Attribute, Microsoft::AspNetCore::Authorization::IAllowAnonymous, Microsoft::AspNetCore::Mvc::Filters::IFilterFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Authorization.IAllowAnonymous</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Mvc.Filters.IFilterFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Base for <see cref="T:System.Attribute" />s indicating the associated action is a WebHook endpoint. Specifies the
            required (in most cases) <see cref="P:Microsoft.AspNetCore.WebHooks.WebHookAttribute.ReceiverName" /> and optional <see cref="P:Microsoft.AspNetCore.WebHooks.WebHookAttribute.Id" />. Also adds a
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookReceiverExistsFilter" /> and a <see cref="T:Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter" /> (unless
            <see cref="P:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.SuppressModelStateInvalidFilter" /> is <see langword="true" />) for the action.
            </summary>
    <remarks>
      <para>
            If the application enables CORS in general (see the <c>Microsoft.AspNetCore.Cors</c> package), apply
            <c>DisableCorsAttribute</c> to this action. If the application depends on the
            <c>Microsoft.AspNetCore.Mvc.ViewFeatures</c> package, apply <c>IgnoreAntiforgeryTokenAttribute</c> to this
            action.
            </para>
      <para>
            Subclasses of <see cref="T:Microsoft.AspNetCore.WebHooks.WebHookAttribute" /> should be used at most once per <see cref="P:Microsoft.AspNetCore.WebHooks.WebHookAttribute.ReceiverName" /> and
            <see cref="P:Microsoft.AspNetCore.WebHooks.WebHookAttribute.Id" /> in a WebHook application. Some subclasses support additional uniqueness constraints.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebHookAttribute (string receiverName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string receiverName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.WebHookAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (receiverName As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.WebHooks.WebHookAttribute : string -&gt; Microsoft.AspNetCore.WebHooks.WebHookAttribute" Usage="new Microsoft.AspNetCore.WebHooks.WebHookAttribute receiverName" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WebHookAttribute(System::String ^ receiverName);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; WebHookAttribute(Platform::String ^ receiverName);" />
      <MemberSignature Language="C++ WINRT" Value=" WebHookAttribute(std::wstring const &amp; receiverName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="receiverName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="receiverName">The name of an available <see cref="T:Microsoft.AspNetCore.WebHooks.IWebHookReceiver" />.</param>
        <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.WebHooks.WebHookAttribute" /> indicating the associated action is a WebHook endpoint
            for the given <paramref name="receiverName" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.WebHookAttribute.Id" />
      <MemberSignature Language="VB.NET" Value="Public Property Id As String" />
      <MemberSignature Language="F#" Value="member this.Id : string with get, set" Usage="Microsoft.AspNetCore.WebHooks.WebHookAttribute.Id" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::String ^ Id { Platform::String ^ get(); void set(Platform::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the id of the configuration this action accepts.
            </summary>
        <value>
            Default value is <see langword="null" />, indicating this action accepts all requests for this
            <see cref="P:Microsoft.AspNetCore.WebHooks.WebHookAttribute.ReceiverName" />.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.CreateInstance">
      <MemberSignature Language="C#" Value="Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata IFilterFactory.CreateInstance (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.CreateInstance(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.WebHookAttribute.Microsoft#AspNetCore#Mvc#Filters#IFilterFactory#CreateInstance(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Function CreateInstance (serviceProvider As IServiceProvider) As IFilterMetadata Implements IFilterFactory.CreateInstance" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::AspNetCore::Mvc::Filters::IFilterMetadata ^ Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.CreateInstance(IServiceProvider ^ serviceProvider) = Microsoft::AspNetCore::Mvc::Filters::IFilterFactory::CreateInstance;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.CreateInstance(System.IServiceProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.IsReusable">
      <MemberSignature Language="C#" Value="bool Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.IsReusable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.WebHookAttribute.Microsoft#AspNetCore#Mvc#Filters#IFilterFactory#IsReusable" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReusable As Boolean Implements IFilterFactory.IsReusable" />
      <MemberSignature Language="F#" Usage="Microsoft.AspNetCore.WebHooks.WebHookAttribute.Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.IsReusable" />
      <MemberSignature Language="C++ CLI" Value="property bool Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.IsReusable { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="property bool Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.IsReusable { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
            Allow the <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookReceiverExistsFilter" /> service's registration to determine its lifetime.
            </remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ReceiverName">
      <MemberSignature Language="C#" Value="public string ReceiverName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReceiverName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.WebHookAttribute.ReceiverName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReceiverName As String" />
      <MemberSignature Language="F#" Value="member this.ReceiverName : string" Usage="Microsoft.AspNetCore.WebHooks.WebHookAttribute.ReceiverName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ReceiverName { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::String ^ ReceiverName { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of an available <see cref="T:Microsoft.AspNetCore.WebHooks.IWebHookReceiver" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>