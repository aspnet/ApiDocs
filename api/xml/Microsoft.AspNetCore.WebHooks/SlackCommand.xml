<Type Name="SlackCommand" FullName="Microsoft.AspNetCore.WebHooks.SlackCommand">
  <TypeSignature Language="C#" Value="public static class SlackCommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SlackCommand extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.WebHooks.SlackCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class SlackCommand" />
  <TypeSignature Language="F#" Value="type SlackCommand = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class SlackCommand abstract sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class SlackCommand abstract sealed" />
  <TypeSignature Language="C++ WINRT" Value="class SlackCommand abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers.Slack</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             The <see cref="T:Microsoft.AspNetCore.WebHooks.SlackCommand" /> class provides mechanisms for parsing the text contained in
             Slack slash commands and outgoing WebHooks following a variety of different formats enabling
             different scenarios.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetNormalizedParameterString">
      <MemberSignature Language="C#" Value="public static string GetNormalizedParameterString (System.Collections.Generic.IDictionary&lt;Microsoft.Extensions.Primitives.StringSegment,System.Collections.Generic.IList&lt;Microsoft.Extensions.Primitives.StringSegment&gt;&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetNormalizedParameterString(class System.Collections.Generic.IDictionary`2&lt;valuetype Microsoft.Extensions.Primitives.StringSegment, class System.Collections.Generic.IList`1&lt;valuetype Microsoft.Extensions.Primitives.StringSegment&gt;&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.SlackCommand.GetNormalizedParameterString(System.Collections.Generic.IDictionary{Microsoft.Extensions.Primitives.StringSegment,System.Collections.Generic.IList{Microsoft.Extensions.Primitives.StringSegment}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNormalizedParameterString (parameters As IDictionary(Of StringSegment, IList(Of StringSegment))) As String" />
      <MemberSignature Language="F#" Value="static member GetNormalizedParameterString : System.Collections.Generic.IDictionary&lt;Microsoft.Extensions.Primitives.StringSegment, System.Collections.Generic.IList&lt;Microsoft.Extensions.Primitives.StringSegment&gt;&gt; -&gt; string" Usage="Microsoft.AspNetCore.WebHooks.SlackCommand.GetNormalizedParameterString parameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetNormalizedParameterString(System::Collections::Generic::IDictionary&lt;Microsoft::Extensions::Primitives::StringSegment, System::Collections::Generic::IList&lt;Microsoft::Extensions::Primitives::StringSegment&gt; ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers.Slack</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Collections.Generic.IDictionary&lt;Microsoft.Extensions.Primitives.StringSegment,System.Collections.Generic.IList&lt;Microsoft.Extensions.Primitives.StringSegment&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">The mapping of parameter names to zero or more parameter values.</param>
        <summary>
          <para>
            Returns a normalized representation of the given <paramref name="parameters" />. This method and
            <see cref="M:Microsoft.AspNetCore.WebHooks.SlackCommand.TryParseParameters(Microsoft.Extensions.Primitives.StringSegment,System.String@)" /> round-trip the semantics of the original text.
            </para>
          <para>
            Does not preserve syntax such as whitespace in the <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> passed to
            <see cref="M:Microsoft.AspNetCore.WebHooks.SlackCommand.TryParseParameters(Microsoft.Extensions.Primitives.StringSegment,System.String@)" />, how parameter values were quoted, or the parameter order.
            </para>
        </summary>
        <returns>A normalized representation of the given <paramref name="parameters" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseActionWithValue">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.KeyValuePair&lt;Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment&gt; ParseActionWithValue (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Generic.KeyValuePair`2&lt;valuetype Microsoft.Extensions.Primitives.StringSegment, valuetype Microsoft.Extensions.Primitives.StringSegment&gt; ParseActionWithValue(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.SlackCommand.ParseActionWithValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseActionWithValue (text As String) As KeyValuePair(Of StringSegment, StringSegment)" />
      <MemberSignature Language="F#" Value="static member ParseActionWithValue : string -&gt; System.Collections.Generic.KeyValuePair&lt;Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment&gt;" Usage="Microsoft.AspNetCore.WebHooks.SlackCommand.ParseActionWithValue text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::KeyValuePair&lt;Microsoft::Extensions::Primitives::StringSegment, Microsoft::Extensions::Primitives::StringSegment&gt; ParseActionWithValue(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers.Slack</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyValuePair&lt;Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The 'text' of a slash command or 'subtext' of an outgoing WebHook.</param>
        <summary>
            Parses the 'text' of a slash command or 'subtext' of an outgoing WebHook of the form '<c>action value</c>'.
            </summary>
        <returns>
            A <see cref="T:System.Collections.Generic.KeyValuePair`2" /> mapping the action to its value. Both properties of the
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> will be <see cref="F:Microsoft.Extensions.Primitives.StringSegment.Empty" /> when the
            <paramref name="text" /> does not contain an action. The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> will
            be <see cref="F:Microsoft.Extensions.Primitives.StringSegment.Empty" /> when the <paramref name="text" /> contains no interior spaces i.e. the
            action has no value.
            </returns>
        <remarks>To be added.</remarks>
        <example>
            An example of an outgoing WebHook or slash command using this format is
            <c>'/assistant query what's the weather?'</c> where '/assistant' is the trigger word or slash command,
            'query' is the action and 'what's the weather?' is the value.
            </example>
      </Docs>
    </Member>
    <Member MemberName="TryParseParameters">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Microsoft.Extensions.Primitives.StringSegment,System.Collections.Generic.IList&lt;Microsoft.Extensions.Primitives.StringSegment&gt;&gt; TryParseParameters (Microsoft.Extensions.Primitives.StringSegment text, out string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;valuetype Microsoft.Extensions.Primitives.StringSegment, class System.Collections.Generic.IList`1&lt;valuetype Microsoft.Extensions.Primitives.StringSegment&gt;&gt; TryParseParameters(valuetype Microsoft.Extensions.Primitives.StringSegment text, [out] string&amp; errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.SlackCommand.TryParseParameters(Microsoft.Extensions.Primitives.StringSegment,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseParameters (text As StringSegment, ByRef errorMessage As String) As IDictionary(Of StringSegment, IList(Of StringSegment))" />
      <MemberSignature Language="F#" Value="static member TryParseParameters : Microsoft.Extensions.Primitives.StringSegment *  -&gt; System.Collections.Generic.IDictionary&lt;Microsoft.Extensions.Primitives.StringSegment, System.Collections.Generic.IList&lt;Microsoft.Extensions.Primitives.StringSegment&gt;&gt;" Usage="Microsoft.AspNetCore.WebHooks.SlackCommand.TryParseParameters (text, errorMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;Microsoft::Extensions::Primitives::StringSegment, System::Collections::Generic::IList&lt;Microsoft::Extensions::Primitives::StringSegment&gt; ^&gt; ^ TryParseParameters(Microsoft::Extensions::Primitives::StringSegment text, [Runtime::InteropServices::Out] System::String ^ % errorMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers.Slack</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;Microsoft.Extensions.Primitives.StringSegment,System.Collections.Generic.IList&lt;Microsoft.Extensions.Primitives.StringSegment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Microsoft.Extensions.Primitives.StringSegment" />
        <Parameter Name="errorMessage" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">
            The parameter portion of a slash command or an outgoing WebHook. Often the
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> from what
            <see cref="M:Microsoft.AspNetCore.WebHooks.SlackCommand.ParseActionWithValue(System.String)" /> returned.
            </param>
        <param name="errorMessage">
            A <see cref="T:System.String" /> describing the specific problem when an issue is encountered. <see langword="null" />
            when the method successfully returns a non-<see langword="null" /> dictionary.
            <paramref name="errorMessage" /> and the return value are never both <see langword="null" />.
            </param>
        <summary>
            Parses the parameters a slash command or of an outgoing WebHook of the form
            '<c>action param1; param2=value2; param3=value 3; param4="quoted value4"; ...</c>'.
            Parameter values containing semi-colons can either escape the semi-colon using a backslash character,
            i.e '\;', or quote the value using single quotes or double quotes.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IDictionary`2" /> mapping zero or more parameter names to zero or more values.
            <see langword="null" /> when an issue is encountered. <paramref name="errorMessage" /> and the return value
            are never both <see langword="null" />.
            </returns>
        <remarks>To be added.</remarks>
        <example>
            An example of an outgoing WebHook or slash command using this format is
            <c>/appointment add title=doctor visit; time=Feb 3 2016 2 PM; location=Children's Hospital</c>
            where '/appointment' is the trigger word or slash command, 'add' is the action and title, time, and
            location are parameters. In this case, caller would pass
            <c>title=doctor visit; time=Feb 3 2016 2 PM; location=Children's Hospital</c> to this method.
            </example>
      </Docs>
    </Member>
  </Members>
</Type>