<Type Name="AttributeMatcher" FullName="Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher">
  <TypeSignature Language="C#" Value="public static class AttributeMatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AttributeMatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class AttributeMatcher" />
  <TypeSignature Language="F#" Value="type AttributeMatcher = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class AttributeMatcher abstract sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class AttributeMatcher abstract sealed" />
  <TypeSignature Language="C++ WINRT" Value="class AttributeMatcher abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.TagHelpers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Methods for determining how an <see cref="T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper" /> should run based on the attributes that were specified.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryDetermineMode&lt;TMode&gt;">
      <MemberSignature Language="C#" Value="public static bool TryDetermineMode&lt;TMode&gt; (Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes&lt;TMode&gt;&gt; modeInfos, Func&lt;TMode,TMode,int&gt; compare, out TMode result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDetermineMode&lt;TMode&gt;(class Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes`1&lt;!!TMode&gt;&gt; modeInfos, class System.Func`3&lt;!!TMode, !!TMode, int32&gt; compare, [out] !!TMode&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher.TryDetermineMode``1(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes{``0}},System.Func{``0,``0,System.Int32},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDetermineMode(Of TMode) (context As TagHelperContext, modeInfos As IReadOnlyList(Of ModeAttributes(Of TMode)), compare As Func(Of TMode, TMode, Integer), ByRef result As TMode) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryDetermineMode : Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext * System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes&lt;'Mode&gt;&gt; * Func&lt;'Mode, 'Mode, int&gt; *  -&gt; bool" Usage="Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher.TryDetermineMode (context, modeInfos, compare, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TMode&gt;&#xA; static bool TryDetermineMode(Microsoft::AspNetCore::Razor::TagHelpers::TagHelperContext ^ context, System::Collections::Generic::IReadOnlyList&lt;Microsoft::AspNetCore::Mvc::TagHelpers::Internal::ModeAttributes&lt;TMode&gt; ^&gt; ^ modeInfos, Func&lt;TMode, TMode, int&gt; ^ compare, [Runtime::InteropServices::Out] TMode % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.TagHelpers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TMode" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext" />
        <Parameter Name="modeInfos" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes&lt;TMode&gt;&gt;" />
        <Parameter Name="compare" Type="System.Func&lt;TMode,TMode,System.Int32&gt;" />
        <Parameter Name="result" Type="TMode&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TMode">The type representing the <see cref="T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper" />'s modes.</typeparam>
        <param name="context">The <see cref="T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext" />.</param>
        <param name="modeInfos">The modes and their required attributes.</param>
        <param name="compare">A comparer delegate.</param>
        <param name="result">The resulting most effective mode.</param>
        <summary>
            Determines the most effective mode a <see cref="T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper" /> can run in based on which modes have
            all their required attributes present.
            </summary>
        <returns>
          <c>true</c> if a mode was determined, otherwise <c>false</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>