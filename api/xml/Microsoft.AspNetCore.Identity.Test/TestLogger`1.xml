<Type Name="TestLogger&lt;TName&gt;" FullName="Microsoft.AspNetCore.Identity.Test.TestLogger&lt;TName&gt;">
  <TypeSignature Language="C#" Value="public class TestLogger&lt;TName&gt; : Microsoft.AspNetCore.Identity.Test.ITestLogger, Microsoft.Extensions.Logging.ILogger&lt;TName&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TestLogger`1&lt;TName&gt; extends System.Object implements class Microsoft.AspNetCore.Identity.Test.ITestLogger, class Microsoft.Extensions.Logging.ILogger, class Microsoft.Extensions.Logging.ILogger`1&lt;!TName&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Identity.Test.TestLogger`1" />
  <TypeSignature Language="VB.NET" Value="Public Class TestLogger(Of TName)&#xA;Implements ILogger(Of TName), ITestLogger" />
  <TypeSignature Language="F#" Value="type TestLogger&lt;'Name&gt; = class&#xA;    interface ILogger&lt;'Name&gt;&#xA;    interface ILogger&#xA;    interface ITestLogger" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TName&gt;&#xA;public ref class TestLogger : Microsoft::AspNetCore::Identity::Test::ITestLogger, Microsoft::Extensions::Logging::ILogger&lt;TName&gt;" />
  <TypeSignature Language="C++ WINRT" Value="template &lt;typename TName&gt;&#xA;[Windows::Foundation::Metadata::WebHostHidden]&#xA;class TestLogger : Microsoft::AspNetCore::Identity::Test::ITestLogger, Microsoft::Extensions::Logging::ILogger&lt;TName&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Identity.Specification.Tests</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TName" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.Test.ITestLogger</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Logging.ILogger&lt;TName&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TName"></typeparam>
    <summary>
            Test logger.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TestLogger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.Test.TestLogger`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TestLogger();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; TestLogger();" />
      <MemberSignature Language="C++ WINRT" Value=" TestLogger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginScope&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public IDisposable BeginScope&lt;TState&gt; (TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable BeginScope&lt;TState&gt;(!!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.Test.TestLogger`1.BeginScope``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginScope(Of TState) (state As TState) As IDisposable" />
      <MemberSignature Language="F#" Value="abstract member BeginScope : 'State -&gt; IDisposable&#xA;override this.BeginScope : 'State -&gt; IDisposable" Usage="testLogger.BeginScope state" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; virtual IDisposable ^ BeginScope(TState state);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="state" Type="TState" />
      </Parameters>
      <Docs>
        <typeparam name="TState"></typeparam>
        <param name="state"></param>
        <summary />
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled (Microsoft.Extensions.Logging.LogLevel logLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(valuetype Microsoft.Extensions.Logging.LogLevel logLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.Test.TestLogger`1.IsEnabled(Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : Microsoft.Extensions.Logging.LogLevel -&gt; bool&#xA;override this.IsEnabled : Microsoft.Extensions.Logging.LogLevel -&gt; bool" Usage="testLogger.IsEnabled logLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnabled(Microsoft::Extensions::Logging::LogLevel logLevel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool IsEnabled(Microsoft::Extensions::Logging::LogLevel logLevel);" />
      <MemberSignature Language="C++ WINRT" Value="bool IsEnabled(Microsoft::Extensions::Logging::LogLevel logLevel);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="logLevel"></param>
        <summary />
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public void Log&lt;TState&gt; (Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, Exception exception, Func&lt;TState,Exception,string&gt; formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Log&lt;TState&gt;(valuetype Microsoft.Extensions.Logging.LogLevel logLevel, valuetype Microsoft.Extensions.Logging.EventId eventId, !!TState state, class System.Exception exception, class System.Func`3&lt;!!TState, class System.Exception, string&gt; formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.Test.TestLogger`1.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})" />
      <MemberSignature Language="F#" Value="abstract member Log : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * 'State * Exception * Func&lt;'State, Exception, string&gt; -&gt; unit&#xA;override this.Log : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * 'State * Exception * Func&lt;'State, Exception, string&gt; -&gt; unit" Usage="testLogger.Log (logLevel, eventId, state, exception, formatter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; virtual void Log(Microsoft::Extensions::Logging::LogLevel logLevel, Microsoft::Extensions::Logging::EventId eventId, TState state, Exception ^ exception, Func&lt;TState, Exception ^, System::String ^&gt; ^ formatter);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="formatter" Type="System.Func&lt;TState,System.Exception,System.String&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TState"></typeparam>
        <param name="logLevel"></param>
        <param name="eventId"></param>
        <param name="state"></param>
        <param name="exception"></param>
        <param name="formatter"></param>
        <summary />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogMessages">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; LogMessages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; LogMessages" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.Test.TestLogger`1.LogMessages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogMessages As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.LogMessages : System.Collections.Generic.IList&lt;string&gt;" Usage="Microsoft.AspNetCore.Identity.Test.TestLogger&lt;'Name&gt;.LogMessages" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::String ^&gt; ^ LogMessages { System::Collections::Generic::IList&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.AspNetCore.Identity.Test.ITestLogger.LogMessages</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            log messages.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>