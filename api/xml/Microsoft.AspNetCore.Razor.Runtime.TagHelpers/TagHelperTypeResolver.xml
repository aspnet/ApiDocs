<Type Name="TagHelperTypeResolver" FullName="Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperTypeResolver">
  <TypeSignature Language="C#" Value="public class TagHelperTypeResolver : Microsoft.AspNetCore.Razor.Runtime.TagHelpers.ITagHelperTypeResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TagHelperTypeResolver extends System.Object implements class Microsoft.AspNetCore.Razor.Runtime.TagHelpers.ITagHelperTypeResolver" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperTypeResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class TagHelperTypeResolver&#xA;Implements ITagHelperTypeResolver" />
  <TypeSignature Language="F#" Value="type TagHelperTypeResolver = class&#xA;    interface ITagHelperTypeResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class TagHelperTypeResolver : Microsoft::AspNetCore::Razor::Runtime::TagHelpers::ITagHelperTypeResolver" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class TagHelperTypeResolver : Microsoft::AspNetCore::Razor::Runtime::TagHelpers::ITagHelperTypeResolver" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Razor.Runtime</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Razor.Runtime.TagHelpers.ITagHelperTypeResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Class that locates valid <see cref="T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper" />s within an assembly.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TagHelperTypeResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperTypeResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TagHelperTypeResolver();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; TagHelperTypeResolver();" />
      <MemberSignature Language="C++ WINRT" Value=" TagHelperTypeResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor.Runtime</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportedTypes">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt; GetExportedTypes (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.TypeInfo&gt; GetExportedTypes(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperTypeResolver.GetExportedTypes(System.Reflection.AssemblyName)" />
      <MemberSignature Language="F#" Value="abstract member GetExportedTypes : System.Reflection.AssemblyName -&gt; seq&lt;System.Reflection.TypeInfo&gt;&#xA;override this.GetExportedTypes : System.Reflection.AssemblyName -&gt; seq&lt;System.Reflection.TypeInfo&gt;" Usage="tagHelperTypeResolver.GetExportedTypes assemblyName" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Reflection::TypeInfo ^&gt; ^ GetExportedTypes(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor.Runtime</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName" /> to get <see cref="T:System.Reflection.TypeInfo" />s from.</param>
        <summary>
            Returns all exported types from the given <paramref name="assemblyName" /></summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of types exported from the given <paramref name="assemblyName" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTagHelper">
      <MemberSignature Language="C#" Value="protected virtual bool IsTagHelper (System.Reflection.TypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsTagHelper(class System.Reflection.TypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperTypeResolver.IsTagHelper(System.Reflection.TypeInfo)" />
      <MemberSignature Language="F#" Value="abstract member IsTagHelper : System.Reflection.TypeInfo -&gt; bool&#xA;override this.IsTagHelper : System.Reflection.TypeInfo -&gt; bool" Usage="tagHelperTypeResolver.IsTagHelper typeInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsTagHelper(System::Reflection::TypeInfo ^ typeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor.Runtime</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Reflection.TypeInfo" />
      </Parameters>
      <Docs>
        <param name="typeInfo">The <see cref="T:System.Reflection.TypeInfo" /> to inspect.</param>
        <summary>
            Indicates if a <see cref="T:System.Reflection.TypeInfo" /> should be treated as a tag helper.
            </summary>
        <returns>
          <c>true</c> if <paramref name="typeInfo" /> should be treated as a tag helper; 
            <c>false</c> otherwise</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Type&gt; Resolve (string name, Microsoft.AspNetCore.Razor.SourceLocation documentLocation, Microsoft.AspNetCore.Razor.ErrorSink errorSink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; Resolve(string name, valuetype Microsoft.AspNetCore.Razor.SourceLocation documentLocation, class Microsoft.AspNetCore.Razor.ErrorSink errorSink) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperTypeResolver.Resolve(System.String,Microsoft.AspNetCore.Razor.SourceLocation,Microsoft.AspNetCore.Razor.ErrorSink)" />
      <MemberSignature Language="F#" Value="abstract member Resolve : string * Microsoft.AspNetCore.Razor.SourceLocation * Microsoft.AspNetCore.Razor.ErrorSink -&gt; seq&lt;Type&gt;&#xA;override this.Resolve : string * Microsoft.AspNetCore.Razor.SourceLocation * Microsoft.AspNetCore.Razor.ErrorSink -&gt; seq&lt;Type&gt;" Usage="tagHelperTypeResolver.Resolve (name, documentLocation, errorSink)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ Resolve(System::String ^ name, Microsoft::AspNetCore::Razor::SourceLocation documentLocation, Microsoft::AspNetCore::Razor::ErrorSink ^ errorSink);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.ITagHelperTypeResolver.Resolve(System.String,Microsoft.AspNetCore.Razor.SourceLocation,Microsoft.AspNetCore.Razor.ErrorSink)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor.Runtime</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="documentLocation" Type="Microsoft.AspNetCore.Razor.SourceLocation" />
        <Parameter Name="errorSink" Type="Microsoft.AspNetCore.Razor.ErrorSink" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="documentLocation">To be added.</param>
        <param name="errorSink">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
