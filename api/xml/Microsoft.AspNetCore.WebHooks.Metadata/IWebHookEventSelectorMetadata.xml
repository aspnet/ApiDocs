<Type Name="IWebHookEventSelectorMetadata" FullName="Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventSelectorMetadata">
  <TypeSignature Language="C#" Value="public interface IWebHookEventSelectorMetadata : Microsoft.AspNetCore.WebHooks.Metadata.IWebHookMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWebHookEventSelectorMetadata implements class Microsoft.AspNetCore.WebHooks.Metadata.IWebHookMetadata" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventSelectorMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWebHookEventSelectorMetadata&#xA;Implements IWebHookMetadata" />
  <TypeSignature Language="F#" Value="type IWebHookEventSelectorMetadata = interface&#xA;    interface IWebHookMetadata" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWebHookEventSelectorMetadata : Microsoft::AspNetCore::WebHooks::Metadata::IWebHookMetadata" />
  <TypeSignature Language="C++ CX" Value="public interface class IWebHookEventSelectorMetadata : Microsoft::AspNetCore::WebHooks::Metadata::IWebHookMetadata" />
  <TypeSignature Language="C++ WINRT" Value="__interface IWebHookEventSelectorMetadata : Microsoft::AspNetCore::WebHooks::Metadata::IWebHookMetadata" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.WebHooks.Metadata.IWebHookMetadata</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
            Metadata describing a WebHook action which accepts only events named <see cref="P:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventSelectorMetadata.EventName" />. Implemented in a
            <see cref="T:Microsoft.AspNetCore.WebHooks.WebHookAttribute" /> subclass for receivers that support multiple events and do not place event
            information in the request body. Receivers using this metadata must also provide an
            <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventMetadata" /> service.
            </para>
      <para>
            The <see cref="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventNamesConstraint" /> subclasses perform action selection based on this
            metadata.
            </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="EventName">
      <MemberSignature Language="C#" Value="public string EventName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EventName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventSelectorMetadata.EventName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventName As String" />
      <MemberSignature Language="F#" Value="member this.EventName : string" Usage="Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventSelectorMetadata.EventName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EventName { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::String ^ EventName { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the event the associated controller action accepts.
            </summary>
        <value>
            Should not return an empty string. <see langword="null" /> indicates associated action accepts all events.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>