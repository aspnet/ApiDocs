<Type Name="IEndpointSelectorPolicy" FullName="Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy">
  <TypeSignature Language="C#" Value="public interface IEndpointSelectorPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointSelectorPolicy" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointSelectorPolicy" />
  <TypeSignature Language="F#" Value="type IEndpointSelectorPolicy = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            A <see cref="T:Microsoft.AspNetCore.Routing.MatcherPolicy" /> interface that can implemented to filter endpoints
            in a <see cref="T:Microsoft.AspNetCore.Routing.Matching.CandidateSet" />. Implementations of <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" /> must
            inherit from <see cref="T:Microsoft.AspNetCore.Routing.MatcherPolicy" /> and should be registered in
            the dependency injection container as singleton services of type <see cref="T:Microsoft.AspNetCore.Routing.MatcherPolicy" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AppliesToEndpoints">
      <MemberSignature Language="C#" Value="public bool AppliesToEndpoints (System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; endpoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AppliesToEndpoints(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Http.Endpoint&gt; endpoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.AppliesToEndpoints(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})" />
      <MemberSignature Language="VB.NET" Value="Public Function AppliesToEndpoints (endpoints As IReadOnlyList(Of Endpoint)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AppliesToEndpoints : System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; -&gt; bool" Usage="iEndpointSelectorPolicy.AppliesToEndpoints endpoints" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoints" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt;" />
      </Parameters>
      <Docs>
        <param name="endpoints">The set of candidate <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> values.</param>
        <summary>
            Returns a value that indicates whether the <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" /> applies
            to any endpoint in <paramref name="endpoints" />.
            </summary>
        <returns>
          <c>true</c> if the policy applies to any endpoint in <paramref name="endpoints" />, otherwise <c>false</c>.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ApplyAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, Microsoft.AspNetCore.Routing.EndpointSelectorContext context, Microsoft.AspNetCore.Routing.Matching.CandidateSet candidates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ApplyAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class Microsoft.AspNetCore.Routing.EndpointSelectorContext context, class Microsoft.AspNetCore.Routing.Matching.CandidateSet candidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.ApplyAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.EndpointSelectorContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)" />
      <MemberSignature Language="F#" Value="abstract member ApplyAsync : Microsoft.AspNetCore.Http.HttpContext * Microsoft.AspNetCore.Routing.EndpointSelectorContext * Microsoft.AspNetCore.Routing.Matching.CandidateSet -&gt; System.Threading.Tasks.Task" Usage="iEndpointSelectorPolicy.ApplyAsync (httpContext, context, candidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="context" Type="Microsoft.AspNetCore.Routing.EndpointSelectorContext" />
        <Parameter Name="candidates" Type="Microsoft.AspNetCore.Routing.Matching.CandidateSet" />
      </Parameters>
      <Docs>
        <param name="httpContext">
            The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> associated with the current request.
            </param>
        <param name="context">
            The <see cref="T:Microsoft.AspNetCore.Routing.EndpointSelectorContext" /> associated with the current request.
            </param>
        <param name="candidates">The <see cref="T:Microsoft.AspNetCore.Routing.Matching.CandidateSet" />.</param>
        <summary>
            Applies the policy to the <see cref="T:Microsoft.AspNetCore.Routing.Matching.CandidateSet" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            Implementations of <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" /> should implement this method
            and filter the set of candidates in the <paramref name="candidates" /> by setting
            <see cref="M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.SetValidity(System.Int32,System.Boolean)" /> to <c>false</c> where desired.
            </para>
          <para>
            To signal an error condition, set <see cref="P:Microsoft.AspNetCore.Routing.EndpointSelectorContext.Endpoint" /> to an
            <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> value that will produce the desired error when executed.
            </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>