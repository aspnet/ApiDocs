<Type Name="WebHookRouteDataExtensions" FullName="Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions">
  <TypeSignature Language="C#" Value="public static class WebHookRouteDataExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit WebHookRouteDataExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module WebHookRouteDataExtensions" />
  <TypeSignature Language="F#" Value="type WebHookRouteDataExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebHookRouteDataExtensions abstract sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class WebHookRouteDataExtensions abstract sealed" />
  <TypeSignature Language="C++ WINRT" Value="class WebHookRouteDataExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Extension methods for the <see cref="T:Microsoft.AspNetCore.Routing.RouteData" /> class.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetWebHookReceiverExists">
      <MemberSignature Language="C#" Value="public static bool GetWebHookReceiverExists (this Microsoft.AspNetCore.Routing.RouteData routeData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetWebHookReceiverExists(class Microsoft.AspNetCore.Routing.RouteData routeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.GetWebHookReceiverExists(Microsoft.AspNetCore.Routing.RouteData)" />
      <MemberSignature Language="F#" Value="static member GetWebHookReceiverExists : Microsoft.AspNetCore.Routing.RouteData -&gt; bool" Usage="Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.GetWebHookReceiverExists routeData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool GetWebHookReceiverExists(Microsoft::AspNetCore::Routing::RouteData ^ routeData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routeData" Type="Microsoft.AspNetCore.Routing.RouteData" RefType="this" />
      </Parameters>
      <Docs>
        <param name="routeData">The <see cref="T:Microsoft.AspNetCore.Routing.RouteData" /> for the current request.</param>
        <summary>
            Gets an indication a WebHook receiver for the current request is configured.
            </summary>
        <returns>
          <see langword="true" /> if an indication <see cref="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookReceiverExistsConstraint" /> ran successfully was
            found in the <paramref name="routeData" />; <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWebHookEventNames">
      <MemberSignature Language="C#" Value="public static void SetWebHookEventNames (this Microsoft.AspNetCore.Routing.RouteData routeData, Microsoft.Extensions.Primitives.StringValues eventNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWebHookEventNames(class Microsoft.AspNetCore.Routing.RouteData routeData, valuetype Microsoft.Extensions.Primitives.StringValues eventNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.SetWebHookEventNames(Microsoft.AspNetCore.Routing.RouteData,Microsoft.Extensions.Primitives.StringValues)" />
      <MemberSignature Language="F#" Value="static member SetWebHookEventNames : Microsoft.AspNetCore.Routing.RouteData * Microsoft.Extensions.Primitives.StringValues -&gt; unit" Usage="Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.SetWebHookEventNames (routeData, eventNames)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetWebHookEventNames(Microsoft::AspNetCore::Routing::RouteData ^ routeData, Microsoft::Extensions::Primitives::StringValues eventNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routeData" Type="Microsoft.AspNetCore.Routing.RouteData" RefType="this" />
        <Parameter Name="eventNames" Type="Microsoft.Extensions.Primitives.StringValues" />
      </Parameters>
      <Docs>
        <param name="routeData">The <see cref="T:Microsoft.AspNetCore.Routing.RouteData" /> for the current request.</param>
        <param name="eventNames">The event names found in the request.</param>
        <summary>
            Stores the <paramref name="eventNames" /> for the current request in <paramref name="routeData" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetWebHookEventName">
      <MemberSignature Language="C#" Value="public static bool TryGetWebHookEventName (this Microsoft.AspNetCore.Routing.RouteData routeData, out string eventName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetWebHookEventName(class Microsoft.AspNetCore.Routing.RouteData routeData, [out] string&amp; eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.TryGetWebHookEventName(Microsoft.AspNetCore.Routing.RouteData,System.String@)" />
      <MemberSignature Language="F#" Value="static member TryGetWebHookEventName : Microsoft.AspNetCore.Routing.RouteData *  -&gt; bool" Usage="Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.TryGetWebHookEventName (routeData, eventName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetWebHookEventName(Microsoft::AspNetCore::Routing::RouteData ^ routeData, [Runtime::InteropServices::Out] System::String ^ % eventName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routeData" Type="Microsoft.AspNetCore.Routing.RouteData" RefType="this" />
        <Parameter Name="eventName" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="routeData">The <see cref="T:Microsoft.AspNetCore.Routing.RouteData" /> for the current request.</param>
        <param name="eventName">Set to the event name identified in the request.</param>
        <summary>
            Gets the single WebHook event name for the current request.
            </summary>
        <returns>
          <see langword="true" /> if exactly one event name was found in the <paramref name="routeData" />;
            <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetWebHookEventNames">
      <MemberSignature Language="C#" Value="public static bool TryGetWebHookEventNames (this Microsoft.AspNetCore.Routing.RouteData routeData, out string[] eventNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetWebHookEventNames(class Microsoft.AspNetCore.Routing.RouteData routeData, [out] string[]&amp; eventNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.TryGetWebHookEventNames(Microsoft.AspNetCore.Routing.RouteData,System.String[]@)" />
      <MemberSignature Language="F#" Value="static member TryGetWebHookEventNames : Microsoft.AspNetCore.Routing.RouteData *  -&gt; bool" Usage="Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.TryGetWebHookEventNames (routeData, eventNames)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetWebHookEventNames(Microsoft::AspNetCore::Routing::RouteData ^ routeData, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % eventNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routeData" Type="Microsoft.AspNetCore.Routing.RouteData" RefType="this" />
        <Parameter Name="eventNames" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="routeData">The <see cref="T:Microsoft.AspNetCore.Routing.RouteData" /> for the current request.</param>
        <param name="eventNames">Set to the event names identified in the request.</param>
        <summary>
            Gets the WebHook event names for the current request.
            </summary>
        <returns>
          <see langword="true" /> if event names were found in the <paramref name="routeData" />;
            <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetWebHookReceiverId">
      <MemberSignature Language="C#" Value="public static bool TryGetWebHookReceiverId (this Microsoft.AspNetCore.Routing.RouteData routeData, out string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetWebHookReceiverId(class Microsoft.AspNetCore.Routing.RouteData routeData, [out] string&amp; id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.TryGetWebHookReceiverId(Microsoft.AspNetCore.Routing.RouteData,System.String@)" />
      <MemberSignature Language="F#" Value="static member TryGetWebHookReceiverId : Microsoft.AspNetCore.Routing.RouteData *  -&gt; bool" Usage="Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.TryGetWebHookReceiverId (routeData, id)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetWebHookReceiverId(Microsoft::AspNetCore::Routing::RouteData ^ routeData, [Runtime::InteropServices::Out] System::String ^ % id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routeData" Type="Microsoft.AspNetCore.Routing.RouteData" RefType="this" />
        <Parameter Name="id" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="routeData">The <see cref="T:Microsoft.AspNetCore.Routing.RouteData" /> for the current request.</param>
        <param name="id">Set to the id of the requested receiver.</param>
        <summary>
            Gets the WebHook receiver id for the current request.
            </summary>
        <returns>
          <see langword="true" /> if a receiver id was found in the <paramref name="routeData" />;
            <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetWebHookReceiverName">
      <MemberSignature Language="C#" Value="public static bool TryGetWebHookReceiverName (this Microsoft.AspNetCore.Routing.RouteData routeData, out string receiverName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetWebHookReceiverName(class Microsoft.AspNetCore.Routing.RouteData routeData, [out] string&amp; receiverName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.TryGetWebHookReceiverName(Microsoft.AspNetCore.Routing.RouteData,System.String@)" />
      <MemberSignature Language="F#" Value="static member TryGetWebHookReceiverName : Microsoft.AspNetCore.Routing.RouteData *  -&gt; bool" Usage="Microsoft.AspNetCore.Routing.WebHookRouteDataExtensions.TryGetWebHookReceiverName (routeData, receiverName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetWebHookReceiverName(Microsoft::AspNetCore::Routing::RouteData ^ routeData, [Runtime::InteropServices::Out] System::String ^ % receiverName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routeData" Type="Microsoft.AspNetCore.Routing.RouteData" RefType="this" />
        <Parameter Name="receiverName" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="routeData">The <see cref="T:Microsoft.AspNetCore.Routing.RouteData" /> for the current request.</param>
        <param name="receiverName">Set to the name of the requested receiver.</param>
        <summary>
            Gets the WebHook receiver name for the current request.
            </summary>
        <returns>
          <see langword="true" /> if a receiver name was found in the <paramref name="routeData" />;
            <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>