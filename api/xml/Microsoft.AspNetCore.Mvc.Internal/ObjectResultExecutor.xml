<Type Name="ObjectResultExecutor" FullName="Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor">
  <TypeSignature Language="C#" Value="public class ObjectResultExecutor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectResultExecutor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectResultExecutor" />
  <TypeSignature Language="F#" Value="type ObjectResultExecutor = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectResultExecutor" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class ObjectResultExecutor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Executes an <see cref="T:Microsoft.AspNetCore.Mvc.ObjectResult" /> to write to the response.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectResultExecutor (Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Mvc.MvcOptions&gt; options, Microsoft.AspNetCore.Mvc.Internal.IHttpResponseStreamWriterFactory writerFactory, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.AspNetCore.Mvc.MvcOptions&gt; options, class Microsoft.AspNetCore.Mvc.Internal.IHttpResponseStreamWriterFactory writerFactory, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcOptions},Microsoft.AspNetCore.Mvc.Internal.IHttpResponseStreamWriterFactory,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As IOptions(Of MvcOptions), writerFactory As IHttpResponseStreamWriterFactory, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor : Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Mvc.MvcOptions&gt; * Microsoft.AspNetCore.Mvc.Internal.IHttpResponseStreamWriterFactory * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor" Usage="new Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor (options, writerFactory, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectResultExecutor(Microsoft::Extensions::Options::IOptions&lt;Microsoft::AspNetCore::Mvc::MvcOptions ^&gt; ^ options, Microsoft::AspNetCore::Mvc::Internal::IHttpResponseStreamWriterFactory ^ writerFactory, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Mvc.MvcOptions&gt;" />
        <Parameter Name="writerFactory" Type="Microsoft.AspNetCore.Mvc.Internal.IHttpResponseStreamWriterFactory" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="options">An accessor to <see cref="T:Microsoft.AspNetCore.Mvc.MvcOptions" />.</param>
        <param name="writerFactory">The <see cref="T:Microsoft.AspNetCore.Mvc.Internal.IHttpResponseStreamWriterFactory" />.</param>
        <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />.</param>
        <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ExecuteAsync (Microsoft.AspNetCore.Mvc.ActionContext context, Microsoft.AspNetCore.Mvc.ObjectResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ExecuteAsync(class Microsoft.AspNetCore.Mvc.ActionContext context, class Microsoft.AspNetCore.Mvc.ObjectResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ObjectResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteAsync (context As ActionContext, result As ObjectResult) As Task" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAsync : Microsoft.AspNetCore.Mvc.ActionContext * Microsoft.AspNetCore.Mvc.ObjectResult -&gt; System.Threading.Tasks.Task&#xA;override this.ExecuteAsync : Microsoft.AspNetCore.Mvc.ActionContext * Microsoft.AspNetCore.Mvc.ObjectResult -&gt; System.Threading.Tasks.Task" Usage="objectResultExecutor.ExecuteAsync (context, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ ExecuteAsync(Microsoft::AspNetCore::Mvc::ActionContext ^ context, Microsoft::AspNetCore::Mvc::ObjectResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.ActionContext" />
        <Parameter Name="result" Type="Microsoft.AspNetCore.Mvc.ObjectResult" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:Microsoft.AspNetCore.Mvc.ActionContext" /> for the current request.</param>
        <param name="result">The <see cref="T:Microsoft.AspNetCore.Mvc.ObjectResult" />.</param>
        <summary>
            Executes the <see cref="T:Microsoft.AspNetCore.Mvc.ObjectResult" />.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> which will complete once the <see cref="T:Microsoft.AspNetCore.Mvc.ObjectResult" /> is written to the response.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logger">
      <MemberSignature Language="C#" Value="protected Microsoft.Extensions.Logging.ILogger Logger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.ILogger Logger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.Logger" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Logger As ILogger" />
      <MemberSignature Language="F#" Value="member this.Logger : Microsoft.Extensions.Logging.ILogger" Usage="Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.Logger" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property Microsoft::Extensions::Logging::ILogger ^ Logger { Microsoft::Extensions::Logging::ILogger ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; property Microsoft::Extensions::Logging::ILogger ^ Logger { Microsoft::Extensions::Logging::ILogger ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionsFormatters">
      <MemberSignature Language="C#" Value="protected Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; OptionsFormatters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection`1&lt;class Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; OptionsFormatters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.OptionsFormatters" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property OptionsFormatters As FormatterCollection(Of IOutputFormatter)" />
      <MemberSignature Language="F#" Value="member this.OptionsFormatters : Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt;" Usage="Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.OptionsFormatters" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property Microsoft::AspNetCore::Mvc::Formatters::FormatterCollection&lt;Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^&gt; ^ OptionsFormatters { Microsoft::AspNetCore::Mvc::Formatters::FormatterCollection&lt;Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> instances from <see cref="T:Microsoft.AspNetCore.Mvc.MvcOptions" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RespectBrowserAcceptHeader">
      <MemberSignature Language="C#" Value="protected bool RespectBrowserAcceptHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RespectBrowserAcceptHeader" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.RespectBrowserAcceptHeader" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RespectBrowserAcceptHeader As Boolean" />
      <MemberSignature Language="F#" Value="member this.RespectBrowserAcceptHeader : bool" Usage="Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.RespectBrowserAcceptHeader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool RespectBrowserAcceptHeader { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; property bool RespectBrowserAcceptHeader { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the value of <see cref="P:Microsoft.AspNetCore.Mvc.MvcOptions.RespectBrowserAcceptHeader" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnHttpNotAcceptable">
      <MemberSignature Language="C#" Value="protected bool ReturnHttpNotAcceptable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReturnHttpNotAcceptable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.ReturnHttpNotAcceptable" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReturnHttpNotAcceptable As Boolean" />
      <MemberSignature Language="F#" Value="member this.ReturnHttpNotAcceptable : bool" Usage="Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.ReturnHttpNotAcceptable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool ReturnHttpNotAcceptable { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; property bool ReturnHttpNotAcceptable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the value of <see cref="P:Microsoft.AspNetCore.Mvc.MvcOptions.ReturnHttpNotAcceptable" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectFormatter">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatter (Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext formatterContext, Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection contentTypes, System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; formatters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatter(class Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext formatterContext, class Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection contentTypes, class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; formatters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.SelectFormatter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SelectFormatter (formatterContext As OutputFormatterWriteContext, contentTypes As MediaTypeCollection, formatters As IList(Of IOutputFormatter)) As IOutputFormatter" />
      <MemberSignature Language="F#" Value="abstract member SelectFormatter : Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext * Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; -&gt; Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&#xA;override this.SelectFormatter : Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext * Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; -&gt; Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" Usage="objectResultExecutor.SelectFormatter (formatterContext, contentTypes, formatters)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^ SelectFormatter(Microsoft::AspNetCore::Mvc::Formatters::OutputFormatterWriteContext ^ formatterContext, Microsoft::AspNetCore::Mvc::Formatters::MediaTypeCollection ^ contentTypes, System::Collections::Generic::IList&lt;Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^&gt; ^ formatters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatterContext" Type="Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext" />
        <Parameter Name="contentTypes" Type="Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection" />
        <Parameter Name="formatters" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt;" />
      </Parameters>
      <Docs>
        <param name="formatterContext">The <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext" />.</param>
        <param name="contentTypes">
            The list of content types provided by <see cref="P:Microsoft.AspNetCore.Mvc.ObjectResult.ContentTypes" />.
            </param>
        <param name="formatters">
            The list of <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> instances to consider.
            </param>
        <summary>
            Selects the <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> to write the response.
            </summary>
        <returns>
            The selected <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> or <c>null</c> if no formatter can write the response.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectFormatterNotUsingContentType">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatterNotUsingContentType (Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext formatterContext, System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; formatters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatterNotUsingContentType(class Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext formatterContext, class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; formatters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.SelectFormatterNotUsingContentType(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SelectFormatterNotUsingContentType (formatterContext As OutputFormatterWriteContext, formatters As IList(Of IOutputFormatter)) As IOutputFormatter" />
      <MemberSignature Language="F#" Value="abstract member SelectFormatterNotUsingContentType : Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; -&gt; Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&#xA;override this.SelectFormatterNotUsingContentType : Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; -&gt; Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" Usage="objectResultExecutor.SelectFormatterNotUsingContentType (formatterContext, formatters)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^ SelectFormatterNotUsingContentType(Microsoft::AspNetCore::Mvc::Formatters::OutputFormatterWriteContext ^ formatterContext, System::Collections::Generic::IList&lt;Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^&gt; ^ formatters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatterContext" Type="Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext" />
        <Parameter Name="formatters" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt;" />
      </Parameters>
      <Docs>
        <param name="formatterContext">The <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext" />.</param>
        <param name="formatters">
            The list of <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> instances to consider.
            </param>
        <summary>
            Selects the <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> to write the response. The first formatter which
            can write the response should be chosen without any consideration for content type.
            </summary>
        <returns>
            The selected <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> or <c>null</c> if no formatter can write the response.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectFormatterUsingAnyAcceptableContentType">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatterUsingAnyAcceptableContentType (Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext formatterContext, System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; formatters, Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection acceptableContentTypes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatterUsingAnyAcceptableContentType(class Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext formatterContext, class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; formatters, class Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection acceptableContentTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.SelectFormatterUsingAnyAcceptableContentType(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter},Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SelectFormatterUsingAnyAcceptableContentType (formatterContext As OutputFormatterWriteContext, formatters As IList(Of IOutputFormatter), acceptableContentTypes As MediaTypeCollection) As IOutputFormatter" />
      <MemberSignature Language="F#" Value="abstract member SelectFormatterUsingAnyAcceptableContentType : Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; * Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection -&gt; Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&#xA;override this.SelectFormatterUsingAnyAcceptableContentType : Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; * Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection -&gt; Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" Usage="objectResultExecutor.SelectFormatterUsingAnyAcceptableContentType (formatterContext, formatters, acceptableContentTypes)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^ SelectFormatterUsingAnyAcceptableContentType(Microsoft::AspNetCore::Mvc::Formatters::OutputFormatterWriteContext ^ formatterContext, System::Collections::Generic::IList&lt;Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^&gt; ^ formatters, Microsoft::AspNetCore::Mvc::Formatters::MediaTypeCollection ^ acceptableContentTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatterContext" Type="Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext" />
        <Parameter Name="formatters" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt;" />
        <Parameter Name="acceptableContentTypes" Type="Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection" />
      </Parameters>
      <Docs>
        <param name="formatterContext">The <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext" />.</param>
        <param name="formatters">
            The list of <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> instances to consider.
            </param>
        <param name="acceptableContentTypes">
            The ordered content types from <see cref="P:Microsoft.AspNetCore.Mvc.ObjectResult.ContentTypes" /> in descending priority order.
            </param>
        <summary>
            Selects the <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> to write the response based on the content type values
            present in <paramref name="acceptableContentTypes" />.
            </summary>
        <returns>
            The selected <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> or <c>null</c> if no formatter can write the response.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectFormatterUsingSortedAcceptHeaders">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatterUsingSortedAcceptHeaders (Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext formatterContext, System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; formatters, System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality&gt; sortedAcceptHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatterUsingSortedAcceptHeaders(class Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext formatterContext, class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; formatters, class System.Collections.Generic.IList`1&lt;valuetype Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality&gt; sortedAcceptHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.SelectFormatterUsingSortedAcceptHeaders(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter},System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SelectFormatterUsingSortedAcceptHeaders (formatterContext As OutputFormatterWriteContext, formatters As IList(Of IOutputFormatter), sortedAcceptHeaders As IList(Of MediaTypeSegmentWithQuality)) As IOutputFormatter" />
      <MemberSignature Language="F#" Value="abstract member SelectFormatterUsingSortedAcceptHeaders : Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality&gt; -&gt; Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&#xA;override this.SelectFormatterUsingSortedAcceptHeaders : Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality&gt; -&gt; Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" Usage="objectResultExecutor.SelectFormatterUsingSortedAcceptHeaders (formatterContext, formatters, sortedAcceptHeaders)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^ SelectFormatterUsingSortedAcceptHeaders(Microsoft::AspNetCore::Mvc::Formatters::OutputFormatterWriteContext ^ formatterContext, System::Collections::Generic::IList&lt;Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^&gt; ^ formatters, System::Collections::Generic::IList&lt;Microsoft::AspNetCore::Mvc::Formatters::Internal::MediaTypeSegmentWithQuality&gt; ^ sortedAcceptHeaders);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatterContext" Type="Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext" />
        <Parameter Name="formatters" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt;" />
        <Parameter Name="sortedAcceptHeaders" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality&gt;" />
      </Parameters>
      <Docs>
        <param name="formatterContext">The <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext" />.</param>
        <param name="formatters">
            The list of <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> instances to consider.
            </param>
        <param name="sortedAcceptHeaders">
            The ordered content types from the <c>Accept</c> header, sorted by descending q-value.
            </param>
        <summary>
            Selects the <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> to write the response based on the content type values
            present in <paramref name="sortedAcceptHeaders" />.
            </summary>
        <returns>
            The selected <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> or <c>null</c> if no formatter can write the response.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectFormatterUsingSortedAcceptHeadersAndContentTypes">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatterUsingSortedAcceptHeadersAndContentTypes (Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext formatterContext, System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; formatters, System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality&gt; sortedAcceptableContentTypes, Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection possibleOutputContentTypes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatterUsingSortedAcceptHeadersAndContentTypes(class Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext formatterContext, class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; formatters, class System.Collections.Generic.IList`1&lt;valuetype Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality&gt; sortedAcceptableContentTypes, class Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection possibleOutputContentTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.SelectFormatterUsingSortedAcceptHeadersAndContentTypes(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter},System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality},Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SelectFormatterUsingSortedAcceptHeadersAndContentTypes (formatterContext As OutputFormatterWriteContext, formatters As IList(Of IOutputFormatter), sortedAcceptableContentTypes As IList(Of MediaTypeSegmentWithQuality), possibleOutputContentTypes As MediaTypeCollection) As IOutputFormatter" />
      <MemberSignature Language="F#" Value="abstract member SelectFormatterUsingSortedAcceptHeadersAndContentTypes : Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality&gt; * Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection -&gt; Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&#xA;override this.SelectFormatterUsingSortedAcceptHeadersAndContentTypes : Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt; * System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality&gt; * Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection -&gt; Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" Usage="objectResultExecutor.SelectFormatterUsingSortedAcceptHeadersAndContentTypes (formatterContext, formatters, sortedAcceptableContentTypes, possibleOutputContentTypes)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^ SelectFormatterUsingSortedAcceptHeadersAndContentTypes(Microsoft::AspNetCore::Mvc::Formatters::OutputFormatterWriteContext ^ formatterContext, System::Collections::Generic::IList&lt;Microsoft::AspNetCore::Mvc::Formatters::IOutputFormatter ^&gt; ^ formatters, System::Collections::Generic::IList&lt;Microsoft::AspNetCore::Mvc::Formatters::Internal::MediaTypeSegmentWithQuality&gt; ^ sortedAcceptableContentTypes, Microsoft::AspNetCore::Mvc::Formatters::MediaTypeCollection ^ possibleOutputContentTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatterContext" Type="Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext" />
        <Parameter Name="formatters" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter&gt;" />
        <Parameter Name="sortedAcceptableContentTypes" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality&gt;" />
        <Parameter Name="possibleOutputContentTypes" Type="Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection" />
      </Parameters>
      <Docs>
        <param name="formatterContext">The <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext" />.</param>
        <param name="formatters">
            The list of <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> instances to consider.
            </param>
        <param name="sortedAcceptableContentTypes">
            The ordered content types from the <c>Accept</c> header, sorted by descending q-value.
            </param>
        <param name="possibleOutputContentTypes">
            The ordered content types from <see cref="P:Microsoft.AspNetCore.Mvc.ObjectResult.ContentTypes" /> in descending priority order.
            </param>
        <summary>
            Selects the <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> to write the response based on the content type values
            present in <paramref name="sortedAcceptableContentTypes" /> and <paramref name="possibleOutputContentTypes" />.
            </summary>
        <returns>
            The selected <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter" /> or <c>null</c> if no formatter can write the response.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriterFactory">
      <MemberSignature Language="C#" Value="protected Func&lt;System.IO.Stream,System.Text.Encoding,System.IO.TextWriter&gt; WriterFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`3&lt;class System.IO.Stream, class System.Text.Encoding, class System.IO.TextWriter&gt; WriterFactory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.WriterFactory" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriterFactory As Func(Of Stream, Encoding, TextWriter)" />
      <MemberSignature Language="F#" Value="member this.WriterFactory : Func&lt;System.IO.Stream, System.Text.Encoding, System.IO.TextWriter&gt;" Usage="Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor.WriterFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property Func&lt;System::IO::Stream ^, System::Text::Encoding ^, System::IO::TextWriter ^&gt; ^ WriterFactory { Func&lt;System::IO::Stream ^, System::Text::Encoding ^, System::IO::TextWriter ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.IO.Stream,System.Text.Encoding,System.IO.TextWriter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the writer factory delegate.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>