<Type Name="FilterCursor" FullName="Microsoft.AspNetCore.Mvc.Internal.FilterCursor">
  <TypeSignature Language="C#" Value="public struct FilterCursor" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit FilterCursor extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Mvc.Internal.FilterCursor" />
  <TypeSignature Language="VB.NET" Value="Public Structure FilterCursor" />
  <TypeSignature Language="F#" Value="type FilterCursor = struct" />
  <TypeSignature Language="C++ CLI" Value="public value class FilterCursor" />
  <TypeSignature Language="C++ WINRT" Value="struct FilterCursor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             A one-way cursor for filters.
             </summary>
    <remarks>
             This will iterate the filter collection once per-stage, and skip any filters that don't have
             the one of interfaces that applies to the current stage.
            
             Filters are always executed in the following order, but short circuiting plays a role.
            
             Indentation reflects nesting.
            
             1. Exception Filters
                 2. Authorization Filters
                 3. Action Filters
                    Action
            
             4. Result Filters
                Result
            
             </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilterCursor (Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata[] filters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata[] filters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.FilterCursor.#ctor(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filters As IFilterMetadata())" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Mvc.Internal.FilterCursor : Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata[] -&gt; Microsoft.AspNetCore.Mvc.Internal.FilterCursor" Usage="new Microsoft.AspNetCore.Mvc.Internal.FilterCursor filters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FilterCursor(cli::array &lt;Microsoft::AspNetCore::Mvc::Filters::IFilterMetadata ^&gt; ^ filters);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; FilterCursor(Platform::Array &lt;Microsoft::AspNetCore::Mvc::Filters::IFilterMetadata ^&gt; ^ filters);" />
      <MemberSignature Language="C++ WINRT" Value=" FilterCursor(std::Array &lt;Microsoft::AspNetCore::Mvc::Filters::IFilterMetadata const &amp;&gt; const &amp; filters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filters" Type="Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata[]" />
      </Parameters>
      <Docs>
        <param name="filters">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextFilter&lt;TFilter,TFilterAsync&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Internal.FilterCursorItem&lt;TFilter,TFilterAsync&gt; GetNextFilter&lt;TFilter,TFilterAsync&gt; () where TFilter : class where TFilterAsync : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.AspNetCore.Mvc.Internal.FilterCursorItem`2&lt;!!TFilter, !!TFilterAsync&gt; GetNextFilter&lt;class TFilter, class TFilterAsync&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.FilterCursor.GetNextFilter``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextFilter(Of TFilter As Class, TFilterAsync As Class) () As FilterCursorItem(Of TFilter, TFilterAsync)" />
      <MemberSignature Language="F#" Value="member this.GetNextFilter : unit -&gt; Microsoft.AspNetCore.Mvc.Internal.FilterCursorItem&lt;'Filter, 'FilterAsync (requires 'Filter : null and 'FilterAsync : null)&gt; (requires 'Filter : null and 'FilterAsync : null)" Usage="filterCursor.GetNextFilter " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFilter, typename TFilterAsync&gt;&#xA; where TFilter : class where TFilterAsync : class Microsoft::AspNetCore::Mvc::Internal::FilterCursorItem&lt;TFilter, TFilterAsync&gt; GetNextFilter();" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TFilter, typename TFilterAsync&gt;&#xA; where TFilter : class where TFilterAsync : class Microsoft::AspNetCore::Mvc::Internal::FilterCursorItem&lt;TFilter, TFilterAsync&gt; GetNextFilter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Internal.FilterCursorItem&lt;TFilter,TFilterAsync&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFilter">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TFilterAsync">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TFilter">To be added.</typeparam>
        <typeparam name="TFilterAsync">To be added.</typeparam>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.FilterCursor.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="filterCursor.Reset " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="C++ WINRT" Value="void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>