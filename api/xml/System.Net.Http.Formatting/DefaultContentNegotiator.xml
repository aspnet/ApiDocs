<Type Name="DefaultContentNegotiator" FullName="System.Net.Http.Formatting.DefaultContentNegotiator">
  <TypeSignature Language="C#" Value="public class DefaultContentNegotiator : System.Net.Http.Formatting.IContentNegotiator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultContentNegotiator extends System.Object implements class System.Net.Http.Formatting.IContentNegotiator" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.Formatting.DefaultContentNegotiator" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultContentNegotiator&#xA;Implements IContentNegotiator" />
  <TypeSignature Language="F#" Value="type DefaultContentNegotiator = class&#xA;    interface IContentNegotiator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Http.Formatting</AssemblyName>
    <AssemblyVersion>5.2.4.0</AssemblyVersion>
    <AssemblyVersion>5.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Net.Http.Formatting.IContentNegotiator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Class that selects a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> for an <see cref="T:System.Net.Http.HttpRequestMessage" />
            or <see cref="T:System.Net.Http.HttpResponseMessage" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultContentNegotiator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultContentNegotiator (bool excludeMatchOnTypeOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool excludeMatchOnTypeOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (excludeMatchOnTypeOnly As Boolean)" />
      <MemberSignature Language="F#" Value="new System.Net.Http.Formatting.DefaultContentNegotiator : bool -&gt; System.Net.Http.Formatting.DefaultContentNegotiator" Usage="new System.Net.Http.Formatting.DefaultContentNegotiator excludeMatchOnTypeOnly" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="excludeMatchOnTypeOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="excludeMatchOnTypeOnly">
            If ExcludeMatchOnTypeOnly is true then we don't match on type only which means
            that we return null if we can't match on anything in the request. This is useful
            for generating 406 (Not Acceptable) status codes.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" /> with
            the given setting for <paramref name="excludeMatchOnTypeOnly" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeFormatterMatches">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ObjectModel.Collection&lt;System.Net.Http.Formatting.MediaTypeFormatterMatch&gt; ComputeFormatterMatches (Type type, System.Net.Http.HttpRequestMessage request, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ObjectModel.Collection`1&lt;class System.Net.Http.Formatting.MediaTypeFormatterMatch&gt; ComputeFormatterMatches(class System.Type type, class System.Net.Http.HttpRequestMessage request, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.ComputeFormatterMatches(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" />
      <MemberSignature Language="F#" Value="abstract member ComputeFormatterMatches : Type * System.Net.Http.HttpRequestMessage * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; -&gt; System.Collections.ObjectModel.Collection&lt;System.Net.Http.Formatting.MediaTypeFormatterMatch&gt;&#xA;override this.ComputeFormatterMatches : Type * System.Net.Http.HttpRequestMessage * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; -&gt; System.Collections.ObjectModel.Collection&lt;System.Net.Http.Formatting.MediaTypeFormatterMatch&gt;" Usage="defaultContentNegotiator.ComputeFormatterMatches (type, request, formatters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Net.Http.Formatting.MediaTypeFormatterMatch&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
      </Parameters>
      <Docs>
        <param name="type">The type to be serialized.</param>
        <param name="request">The request.</param>
        <param name="formatters">The set of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> objects from which to choose.</param>
        <summary>
            Determine how well each formatter matches by associating a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking" />
            value with the formatter. Then associate the quality of the match based on q-factors and other parameters.
            The result of this method is a collection of the matches found categorized and assigned a quality value.
            </summary>
        <returns>A collection containing all the matches.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeMatchOnTypeOnly">
      <MemberSignature Language="C#" Value="public bool ExcludeMatchOnTypeOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExcludeMatchOnTypeOnly" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.Formatting.DefaultContentNegotiator.ExcludeMatchOnTypeOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExcludeMatchOnTypeOnly As Boolean" />
      <MemberSignature Language="F#" Value="member this.ExcludeMatchOnTypeOnly : bool" Usage="System.Net.Http.Formatting.DefaultContentNegotiator.ExcludeMatchOnTypeOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If ExcludeMatchOnTypeOnly is true then we don't match on type only which means
            that we return null if we can't match on anything in the request. This is useful
            for generating 406 (Not Acceptable) status codes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchAcceptHeader">
      <MemberSignature Language="C#" Value="protected virtual System.Net.Http.Formatting.MediaTypeFormatterMatch MatchAcceptHeader (System.Collections.Generic.IEnumerable&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; sortedAcceptValues, System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.Http.Formatting.MediaTypeFormatterMatch MatchAcceptHeader(class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; sortedAcceptValues, class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchAcceptHeader(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue},System.Net.Http.Formatting.MediaTypeFormatter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MatchAcceptHeader (sortedAcceptValues As IEnumerable(Of MediaTypeWithQualityHeaderValue), formatter As MediaTypeFormatter) As MediaTypeFormatterMatch" />
      <MemberSignature Language="F#" Value="abstract member MatchAcceptHeader : seq&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch&#xA;override this.MatchAcceptHeader : seq&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch" Usage="defaultContentNegotiator.MatchAcceptHeader (sortedAcceptValues, formatter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Formatting.MediaTypeFormatterMatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortedAcceptValues" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt;" />
        <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
      </Parameters>
      <Docs>
        <param name="sortedAcceptValues">The sorted accept header values to match.</param>
        <param name="formatter">The formatter to match against.</param>
        <summary>
            Match the request accept header field values against the formatter's registered supported media types.
            </summary>
        <returns>
            A <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> indicating the quality of the match or null is no match.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchMediaTypeMapping">
      <MemberSignature Language="C#" Value="protected virtual System.Net.Http.Formatting.MediaTypeFormatterMatch MatchMediaTypeMapping (System.Net.Http.HttpRequestMessage request, System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.Http.Formatting.MediaTypeFormatterMatch MatchMediaTypeMapping(class System.Net.Http.HttpRequestMessage request, class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchMediaTypeMapping(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MatchMediaTypeMapping (request As HttpRequestMessage, formatter As MediaTypeFormatter) As MediaTypeFormatterMatch" />
      <MemberSignature Language="F#" Value="abstract member MatchMediaTypeMapping : System.Net.Http.HttpRequestMessage * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch&#xA;override this.MatchMediaTypeMapping : System.Net.Http.HttpRequestMessage * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch" Usage="defaultContentNegotiator.MatchMediaTypeMapping (request, formatter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Formatting.MediaTypeFormatterMatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="formatter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchRequestMediaType">
      <MemberSignature Language="C#" Value="protected virtual System.Net.Http.Formatting.MediaTypeFormatterMatch MatchRequestMediaType (System.Net.Http.HttpRequestMessage request, System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.Http.Formatting.MediaTypeFormatterMatch MatchRequestMediaType(class System.Net.Http.HttpRequestMessage request, class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchRequestMediaType(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MatchRequestMediaType (request As HttpRequestMessage, formatter As MediaTypeFormatter) As MediaTypeFormatterMatch" />
      <MemberSignature Language="F#" Value="abstract member MatchRequestMediaType : System.Net.Http.HttpRequestMessage * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch&#xA;override this.MatchRequestMediaType : System.Net.Http.HttpRequestMessage * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch" Usage="defaultContentNegotiator.MatchRequestMediaType (request, formatter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Formatting.MediaTypeFormatterMatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
      </Parameters>
      <Docs>
        <param name="request">The request to match.</param>
        <param name="formatter">The formatter to match against.</param>
        <summary>
            Match any request media type (in case there is a request entity body) against the formatter's registered
            media types.
            </summary>
        <returns>
            A <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> indicating the quality of the match or null is no match.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchType">
      <MemberSignature Language="C#" Value="protected virtual System.Net.Http.Formatting.MediaTypeFormatterMatch MatchType (Type type, System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.Http.Formatting.MediaTypeFormatterMatch MatchType(class System.Type type, class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchType(System.Type,System.Net.Http.Formatting.MediaTypeFormatter)" />
      <MemberSignature Language="F#" Value="abstract member MatchType : Type * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch&#xA;override this.MatchType : Type * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch" Usage="defaultContentNegotiator.MatchType (type, formatter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Formatting.MediaTypeFormatterMatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
      </Parameters>
      <Docs>
        <param name="type">The type to be serialized.</param>
        <param name="formatter">The formatter we are matching against.</param>
        <summary>
            Pick the first supported media type and indicate we've matched only on type
            </summary>
        <returns>
            A <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> indicating the quality of the match or null is no match.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negotiate">
      <MemberSignature Language="C#" Value="public virtual System.Net.Http.Formatting.ContentNegotiationResult Negotiate (Type type, System.Net.Http.HttpRequestMessage request, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.Http.Formatting.ContentNegotiationResult Negotiate(class System.Type type, class System.Net.Http.HttpRequestMessage request, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" />
      <MemberSignature Language="F#" Value="abstract member Negotiate : Type * System.Net.Http.HttpRequestMessage * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; -&gt; System.Net.Http.Formatting.ContentNegotiationResult&#xA;override this.Negotiate : Type * System.Net.Http.HttpRequestMessage * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; -&gt; System.Net.Http.Formatting.ContentNegotiationResult" Usage="defaultContentNegotiator.Negotiate (type, request, formatters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Formatting.ContentNegotiationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
      </Parameters>
      <Docs>
        <param name="type">The type to be serialized.</param>
        <param name="request">The request.</param>
        <param name="formatters">The set of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> objects from which to choose.</param>
        <summary>
            Performs content negotiating by selecting the most appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> out of the
            passed in <paramref name="formatters" /> for the given <paramref name="request" /> that can serialize an
            object of the given <paramref name="type" />.
            </summary>
        <returns>The result of the negotiation containing the most appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />
            instance, or <c>null</c> if there is no appropriate formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectResponseCharacterEncoding">
      <MemberSignature Language="C#" Value="protected virtual System.Text.Encoding SelectResponseCharacterEncoding (System.Net.Http.HttpRequestMessage request, System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Text.Encoding SelectResponseCharacterEncoding(class System.Net.Http.HttpRequestMessage request, class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseCharacterEncoding(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SelectResponseCharacterEncoding (request As HttpRequestMessage, formatter As MediaTypeFormatter) As Encoding" />
      <MemberSignature Language="F#" Value="abstract member SelectResponseCharacterEncoding : System.Net.Http.HttpRequestMessage * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Text.Encoding&#xA;override this.SelectResponseCharacterEncoding : System.Net.Http.HttpRequestMessage * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Text.Encoding" Usage="defaultContentNegotiator.SelectResponseCharacterEncoding (request, formatter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="formatter">To be added.</param>
        <summary>
            Determine the best character encoding for writing the response. First we look
            for accept-charset headers and if not found then we try to match
            any charset encoding in the request (in case of PUT, POST, etc.)
            If no encoding is found then we use the default for the formatter.
            </summary>
        <returns>The <see cref="T:System.Text.Encoding" /> determined to be the best match.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectResponseMediaTypeFormatter">
      <MemberSignature Language="C#" Value="protected virtual System.Net.Http.Formatting.MediaTypeFormatterMatch SelectResponseMediaTypeFormatter (System.Collections.Generic.ICollection&lt;System.Net.Http.Formatting.MediaTypeFormatterMatch&gt; matches);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.Http.Formatting.MediaTypeFormatterMatch SelectResponseMediaTypeFormatter(class System.Collections.Generic.ICollection`1&lt;class System.Net.Http.Formatting.MediaTypeFormatterMatch&gt; matches) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseMediaTypeFormatter(System.Collections.Generic.ICollection{System.Net.Http.Formatting.MediaTypeFormatterMatch})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SelectResponseMediaTypeFormatter (matches As ICollection(Of MediaTypeFormatterMatch)) As MediaTypeFormatterMatch" />
      <MemberSignature Language="F#" Value="abstract member SelectResponseMediaTypeFormatter : System.Collections.Generic.ICollection&lt;System.Net.Http.Formatting.MediaTypeFormatterMatch&gt; -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch&#xA;override this.SelectResponseMediaTypeFormatter : System.Collections.Generic.ICollection&lt;System.Net.Http.Formatting.MediaTypeFormatterMatch&gt; -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch" Usage="defaultContentNegotiator.SelectResponseMediaTypeFormatter matches" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Formatting.MediaTypeFormatterMatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matches" Type="System.Collections.Generic.ICollection&lt;System.Net.Http.Formatting.MediaTypeFormatterMatch&gt;" />
      </Parameters>
      <Docs>
        <param name="matches">The collection of matches.</param>
        <summary>
            Select the best match among the candidate matches found.
            </summary>
        <returns>The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> determined to be the best match.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldMatchOnType">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldMatchOnType (System.Collections.Generic.IEnumerable&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; sortedAcceptValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldMatchOnType(class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; sortedAcceptValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.ShouldMatchOnType(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldMatchOnType (sortedAcceptValues As IEnumerable(Of MediaTypeWithQualityHeaderValue)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldMatchOnType : seq&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; -&gt; bool&#xA;override this.ShouldMatchOnType : seq&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; -&gt; bool" Usage="defaultContentNegotiator.ShouldMatchOnType sortedAcceptValues" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortedAcceptValues" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt;" />
      </Parameters>
      <Docs>
        <param name="sortedAcceptValues">The sorted accept header values to match.</param>
        <summary>
            Determine whether to match on type or not. This is used to determine whether to
            generate a 406 response or use the default media type formatter in case there
            is no match against anything in the request. If ExcludeMatchOnTypeOnly is true
            then we don't match on type unless there are no accept headers.
            </summary>
        <returns>
            True if not ExcludeMatchOnTypeOnly and accept headers with a q-factor bigger than 0.0 are present.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SortMediaTypeWithQualityHeaderValuesByQFactor">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; SortMediaTypeWithQualityHeaderValuesByQFactor (System.Collections.Generic.ICollection&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; headerValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; SortMediaTypeWithQualityHeaderValuesByQFactor(class System.Collections.Generic.ICollection`1&lt;class System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; headerValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SortMediaTypeWithQualityHeaderValuesByQFactor (headerValues As ICollection(Of MediaTypeWithQualityHeaderValue)) As IEnumerable(Of MediaTypeWithQualityHeaderValue)" />
      <MemberSignature Language="F#" Value="abstract member SortMediaTypeWithQualityHeaderValuesByQFactor : System.Collections.Generic.ICollection&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; -&gt; seq&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt;&#xA;override this.SortMediaTypeWithQualityHeaderValuesByQFactor : System.Collections.Generic.ICollection&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt; -&gt; seq&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt;" Usage="defaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor headerValues" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerValues" Type="System.Collections.Generic.ICollection&lt;System.Net.Http.Headers.MediaTypeWithQualityHeaderValue&gt;" />
      </Parameters>
      <Docs>
        <param name="headerValues">The header values to sort.</param>
        <summary>
            Sort Accept header values and related header field values with similar syntax rules
            (if more than 1) in descending order based on q-factor.
            </summary>
        <returns>The sorted header values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SortStringWithQualityHeaderValuesByQFactor">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Net.Http.Headers.StringWithQualityHeaderValue&gt; SortStringWithQualityHeaderValuesByQFactor (System.Collections.Generic.ICollection&lt;System.Net.Http.Headers.StringWithQualityHeaderValue&gt; headerValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Headers.StringWithQualityHeaderValue&gt; SortStringWithQualityHeaderValuesByQFactor(class System.Collections.Generic.ICollection`1&lt;class System.Net.Http.Headers.StringWithQualityHeaderValue&gt; headerValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortStringWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.StringWithQualityHeaderValue})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SortStringWithQualityHeaderValuesByQFactor (headerValues As ICollection(Of StringWithQualityHeaderValue)) As IEnumerable(Of StringWithQualityHeaderValue)" />
      <MemberSignature Language="F#" Value="abstract member SortStringWithQualityHeaderValuesByQFactor : System.Collections.Generic.ICollection&lt;System.Net.Http.Headers.StringWithQualityHeaderValue&gt; -&gt; seq&lt;System.Net.Http.Headers.StringWithQualityHeaderValue&gt;&#xA;override this.SortStringWithQualityHeaderValuesByQFactor : System.Collections.Generic.ICollection&lt;System.Net.Http.Headers.StringWithQualityHeaderValue&gt; -&gt; seq&lt;System.Net.Http.Headers.StringWithQualityHeaderValue&gt;" Usage="defaultContentNegotiator.SortStringWithQualityHeaderValuesByQFactor headerValues" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Net.Http.Headers.StringWithQualityHeaderValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerValues" Type="System.Collections.Generic.ICollection&lt;System.Net.Http.Headers.StringWithQualityHeaderValue&gt;" />
      </Parameters>
      <Docs>
        <param name="headerValues">The header values to sort.</param>
        <summary>
            Sort Accept-Charset, Accept-Encoding, Accept-Language and related header field values with similar syntax
            rules (if more than 1) in descending order based on q-factor.
            </summary>
        <returns>The sorted header values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateBestMatch">
      <MemberSignature Language="C#" Value="protected virtual System.Net.Http.Formatting.MediaTypeFormatterMatch UpdateBestMatch (System.Net.Http.Formatting.MediaTypeFormatterMatch current, System.Net.Http.Formatting.MediaTypeFormatterMatch potentialReplacement);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.Http.Formatting.MediaTypeFormatterMatch UpdateBestMatch(class System.Net.Http.Formatting.MediaTypeFormatterMatch current, class System.Net.Http.Formatting.MediaTypeFormatterMatch potentialReplacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.DefaultContentNegotiator.UpdateBestMatch(System.Net.Http.Formatting.MediaTypeFormatterMatch,System.Net.Http.Formatting.MediaTypeFormatterMatch)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function UpdateBestMatch (current As MediaTypeFormatterMatch, potentialReplacement As MediaTypeFormatterMatch) As MediaTypeFormatterMatch" />
      <MemberSignature Language="F#" Value="abstract member UpdateBestMatch : System.Net.Http.Formatting.MediaTypeFormatterMatch * System.Net.Http.Formatting.MediaTypeFormatterMatch -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch&#xA;override this.UpdateBestMatch : System.Net.Http.Formatting.MediaTypeFormatterMatch * System.Net.Http.Formatting.MediaTypeFormatterMatch -&gt; System.Net.Http.Formatting.MediaTypeFormatterMatch" Usage="defaultContentNegotiator.UpdateBestMatch (current, potentialReplacement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.WebApiCompatShim</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Formatting.MediaTypeFormatterMatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Net.Http.Formatting.MediaTypeFormatterMatch" />
        <Parameter Name="potentialReplacement" Type="System.Net.Http.Formatting.MediaTypeFormatterMatch" />
      </Parameters>
      <Docs>
        <param name="current">To be added.</param>
        <param name="potentialReplacement">To be added.</param>
        <summary>
            Evaluates whether a match is better than the current match and if so returns the replacement; otherwise
            returns the current match.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>