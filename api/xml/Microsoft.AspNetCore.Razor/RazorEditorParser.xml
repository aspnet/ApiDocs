<Type Name="RazorEditorParser" FullName="Microsoft.AspNetCore.Razor.RazorEditorParser">
  <TypeSignature Language="C#" Value="public class RazorEditorParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RazorEditorParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Razor.RazorEditorParser" />
  <TypeSignature Language="VB.NET" Value="Public Class RazorEditorParser&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type RazorEditorParser = class&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class RazorEditorParser : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Parser used by editors to avoid reparsing the entire document on each text change.
            </summary>
    <remarks>
      <para>
            This parser is designed to allow editors to avoid having to worry about incremental parsing.
            The <see cref="M:Microsoft.AspNetCore.Razor.RazorEditorParser.CheckForStructureChanges(Microsoft.AspNetCore.Razor.Text.TextChange)" /> method can be called with every change made by a user in an editor
            and the parser will provide a result indicating if it was able to incrementally apply the change.
            </para>
      <para>
            The general workflow for editors with this parser is:
            <list type="number"><item><description>User edits document.</description></item><item><description>Editor builds a <see cref="T:Microsoft.AspNetCore.Razor.Text.TextChange" /> structure describing the edit and providing a
            reference to the <em>updated</em> text buffer.</description></item><item><description>Editor calls <see cref="M:Microsoft.AspNetCore.Razor.RazorEditorParser.CheckForStructureChanges(Microsoft.AspNetCore.Razor.Text.TextChange)" /> passing in that change.
            </description></item><item><description>Parser determines if the change can be simply applied to an existing parse tree node.
            </description></item><list type="number"><item><description>If it can, the Parser updates its parse tree and returns
            <see cref="F:Microsoft.AspNetCore.Razor.PartialParseResult.Accepted" />.</description></item><item><description>If it cannot, the Parser starts a background parse task and returns
            <see cref="F:Microsoft.AspNetCore.Razor.PartialParseResult.Rejected" />.</description></item></list></list>
            NOTE: Additional flags can be applied to the <see cref="T:Microsoft.AspNetCore.Razor.PartialParseResult" />, see that <c>enum</c> for more
            details. However, the <see cref="F:Microsoft.AspNetCore.Razor.PartialParseResult.Accepted" /> or <see cref="F:Microsoft.AspNetCore.Razor.PartialParseResult.Rejected" />
            flags will ALWAYS be present.
            </para>
      <para>
            A change can only be incrementally parsed if a single, unique, <see cref="T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span" /> (see
            <see cref="N:Microsoft.AspNetCore.Razor.Parser.SyntaxTree" />) in the syntax tree can be identified as owning the entire change.
            For example, if a change overlaps with multiple <see cref="T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span" />s, the change cannot be parsed incrementally
            and a full reparse is necessary. A <see cref="T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span" /> "owns" a change if the change occurs either a) entirely
            within it's boundaries or b) it is a pure insertion (see <see cref="T:Microsoft.AspNetCore.Razor.Text.TextChange" />) at the end of a
            <see cref="T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span" /> whose <see cref="P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.EditHandler" /> can accept the change (see
            <see cref="M:Microsoft.AspNetCore.Razor.Editor.SpanEditHandler.CanAcceptChange(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span,Microsoft.AspNetCore.Razor.Text.TextChange)" />).
            </para>
      <para>
            When the <see cref="T:Microsoft.AspNetCore.Razor.RazorEditorParser" /> returns <see cref="F:Microsoft.AspNetCore.Razor.PartialParseResult.Accepted" />, it updates
            <see cref="P:Microsoft.AspNetCore.Razor.RazorEditorParser.CurrentParseTree" /> immediately. However, the editor is expected to update it's own data structures
            independently. It can use <see cref="P:Microsoft.AspNetCore.Razor.RazorEditorParser.CurrentParseTree" /> to do this, as soon as the editor returns from
            <see cref="M:Microsoft.AspNetCore.Razor.RazorEditorParser.CheckForStructureChanges(Microsoft.AspNetCore.Razor.Text.TextChange)" />, but it should (ideally) have logic for doing so without needing the new
            tree.
            </para>
      <para>
            When <see cref="F:Microsoft.AspNetCore.Razor.PartialParseResult.Rejected" /> is returned by <see cref="M:Microsoft.AspNetCore.Razor.RazorEditorParser.CheckForStructureChanges(Microsoft.AspNetCore.Razor.Text.TextChange)" />, a
            background parse task has <em>already</em> been started. When that task finishes, the
            <see cref="E:Microsoft.AspNetCore.Razor.RazorEditorParser.DocumentParseComplete" /> event will be fired containing the new generated code, parse tree and a
            reference to the original <see cref="T:Microsoft.AspNetCore.Razor.Text.TextChange" /> that caused the reparse, to allow the editor to resolve the
            new tree against any changes made since calling <see cref="M:Microsoft.AspNetCore.Razor.RazorEditorParser.CheckForStructureChanges(Microsoft.AspNetCore.Razor.Text.TextChange)" />.
            </para>
      <para>
            If a call to <see cref="M:Microsoft.AspNetCore.Razor.RazorEditorParser.CheckForStructureChanges(Microsoft.AspNetCore.Razor.Text.TextChange)" /> occurs while a reparse is already in-progress, the reparse
            is canceled IMMEDIATELY and <see cref="F:Microsoft.AspNetCore.Razor.PartialParseResult.Rejected" /> is returned without attempting to
            reparse. This means that if a consumer calls <see cref="M:Microsoft.AspNetCore.Razor.RazorEditorParser.CheckForStructureChanges(Microsoft.AspNetCore.Razor.Text.TextChange)" />, which returns
            <see cref="F:Microsoft.AspNetCore.Razor.PartialParseResult.Rejected" />, then calls it again before <see cref="E:Microsoft.AspNetCore.Razor.RazorEditorParser.DocumentParseComplete" /> is
            fired, it will only receive one <see cref="E:Microsoft.AspNetCore.Razor.RazorEditorParser.DocumentParseComplete" /> event, for the second change.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RazorEditorParser (Microsoft.AspNetCore.Razor.RazorEngineHost host, string sourceFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Razor.RazorEngineHost host, string sourceFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.RazorEditorParser.#ctor(Microsoft.AspNetCore.Razor.RazorEngineHost,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (host As RazorEngineHost, sourceFileName As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Razor.RazorEditorParser : Microsoft.AspNetCore.Razor.RazorEngineHost * string -&gt; Microsoft.AspNetCore.Razor.RazorEditorParser" Usage="new Microsoft.AspNetCore.Razor.RazorEditorParser (host, sourceFileName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RazorEditorParser(Microsoft::AspNetCore::Razor::RazorEngineHost ^ host, System::String ^ sourceFileName);" />
      <MemberSignature Language="C++ WINRT" Value=" RazorEditorParser(Microsoft::AspNetCore::Razor::RazorEngineHost const &amp; host, std::wstring const &amp; sourceFileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="host" Type="Microsoft.AspNetCore.Razor.RazorEngineHost" />
        <Parameter Name="sourceFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">The <see cref="T:Microsoft.AspNetCore.Razor.RazorEngineHost" /> which defines the environment in which the generated
            code will live. <see cref="P:Microsoft.AspNetCore.Razor.RazorEngineHost.DesignTimeMode" /> should be set if design-time behavior is
            desired.</param>
        <param name="sourceFileName">The physical path to use in line pragmas.</param>
        <summary>
            Constructs the editor parser. One instance should be used per active editor. This
            instance <em>can</em> be shared among reparses, but should <em>never</em> be shared between documents.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckForStructureChanges">
      <MemberSignature Language="C#" Value="public virtual Microsoft.AspNetCore.Razor.PartialParseResult CheckForStructureChanges (Microsoft.AspNetCore.Razor.Text.TextChange change);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.AspNetCore.Razor.PartialParseResult CheckForStructureChanges(valuetype Microsoft.AspNetCore.Razor.Text.TextChange change) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.RazorEditorParser.CheckForStructureChanges(Microsoft.AspNetCore.Razor.Text.TextChange)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckForStructureChanges (change As TextChange) As PartialParseResult" />
      <MemberSignature Language="F#" Value="abstract member CheckForStructureChanges : Microsoft.AspNetCore.Razor.Text.TextChange -&gt; Microsoft.AspNetCore.Razor.PartialParseResult&#xA;override this.CheckForStructureChanges : Microsoft.AspNetCore.Razor.Text.TextChange -&gt; Microsoft.AspNetCore.Razor.PartialParseResult" Usage="razorEditorParser.CheckForStructureChanges change" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::AspNetCore::Razor::PartialParseResult CheckForStructureChanges(Microsoft::AspNetCore::Razor::Text::TextChange change);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::AspNetCore::Razor::PartialParseResult CheckForStructureChanges(Microsoft::AspNetCore::Razor::Text::TextChange change);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Razor.PartialParseResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="change" Type="Microsoft.AspNetCore.Razor.Text.TextChange" />
      </Parameters>
      <Docs>
        <param name="change">The change to apply to the parse tree.</param>
        <summary>
            Determines if a change will cause a structural change to the document and if not, applies it to the
            existing tree. If a structural change would occur, automatically starts a reparse.
            </summary>
        <returns>A <see cref="T:Microsoft.AspNetCore.Razor.PartialParseResult" /> value indicating the result of the incremental parse.</returns>
        <remarks>
            NOTE: The initial incremental parsing check and actual incremental parsing (if possible) occurs
            on the caller's thread. However, if a full reparse is needed, this occurs on a background thread.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentParseTree">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block CurrentParseTree { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block CurrentParseTree" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Razor.RazorEditorParser.CurrentParseTree" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentParseTree As Block" />
      <MemberSignature Language="F#" Value="member this.CurrentParseTree : Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block" Usage="Microsoft.AspNetCore.Razor.RazorEditorParser.CurrentParseTree" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::Razor::Parser::SyntaxTree::Block ^ CurrentParseTree { Microsoft::AspNetCore::Razor::Parser::SyntaxTree::Block ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.RazorEditorParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="razorEditorParser.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="C++ WINRT" Value="void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Disposes of this parser. Should be called when the editor window is closed and the document is unloaded.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.RazorEditorParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="razorEditorParser.Dispose disposing" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentParseComplete">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.AspNetCore.Razor.DocumentParseCompleteEventArgs&gt; DocumentParseComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.AspNetCore.Razor.DocumentParseCompleteEventArgs&gt; DocumentParseComplete" />
      <MemberSignature Language="DocId" Value="E:Microsoft.AspNetCore.Razor.RazorEditorParser.DocumentParseComplete" />
      <MemberSignature Language="VB.NET" Value="Public Event DocumentParseComplete As EventHandler(Of DocumentParseCompleteEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DocumentParseComplete : EventHandler&lt;Microsoft.AspNetCore.Razor.DocumentParseCompleteEventArgs&gt; " Usage="member this.DocumentParseComplete : System.EventHandler&lt;Microsoft.AspNetCore.Razor.DocumentParseCompleteEventArgs&gt; " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Microsoft::AspNetCore::Razor::DocumentParseCompleteEventArgs ^&gt; ^ DocumentParseComplete;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.AspNetCore.Razor.DocumentParseCompleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Event fired when a full reparse of the document completes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Razor.RazorEditorParser.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="Microsoft.AspNetCore.Razor.RazorEditorParser.FileName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::String ^ FileName { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAutoCompleteString">
      <MemberSignature Language="C#" Value="public virtual string GetAutoCompleteString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAutoCompleteString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.RazorEditorParser.GetAutoCompleteString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAutoCompleteString () As String" />
      <MemberSignature Language="F#" Value="abstract member GetAutoCompleteString : unit -&gt; string&#xA;override this.GetAutoCompleteString : unit -&gt; string" Usage="razorEditorParser.GetAutoCompleteString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetAutoCompleteString();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual Platform::String ^ GetAutoCompleteString();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual std::wstring GetAutoCompleteString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Razor.RazorEngineHost Host { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Razor.RazorEngineHost Host" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Razor.RazorEditorParser.Host" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Host As RazorEngineHost" />
      <MemberSignature Language="F#" Value="member this.Host : Microsoft.AspNetCore.Razor.RazorEngineHost" Usage="Microsoft.AspNetCore.Razor.RazorEditorParser.Host" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::Razor::RazorEngineHost ^ Host { Microsoft::AspNetCore::Razor::RazorEngineHost ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Razor.RazorEngineHost</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastResultProvisional">
      <MemberSignature Language="C#" Value="public bool LastResultProvisional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LastResultProvisional" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Razor.RazorEditorParser.LastResultProvisional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastResultProvisional As Boolean" />
      <MemberSignature Language="F#" Value="member this.LastResultProvisional : bool" Usage="Microsoft.AspNetCore.Razor.RazorEditorParser.LastResultProvisional" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LastResultProvisional { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool LastResultProvisional { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Razor</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>