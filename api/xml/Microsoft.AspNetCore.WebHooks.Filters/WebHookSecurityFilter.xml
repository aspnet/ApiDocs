<Type Name="WebHookSecurityFilter" FullName="Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter">
  <TypeSignature Language="C#" Value="public abstract class WebHookSecurityFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WebHookSecurityFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WebHookSecurityFilter" />
  <TypeSignature Language="F#" Value="type WebHookSecurityFilter = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebHookSecurityFilter abstract" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class WebHookSecurityFilter abstract" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class WebHookSecurityFilter abstract" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Base class for <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" /> or <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter" />
            implementations that for example verify request signatures or <c>code</c> query parameters. Subclasses may
            also implement <see cref="T:Microsoft.AspNetCore.WebHooks.IWebHookReceiver" />. Subclasses should have an
            <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> equal to <see cref="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Order" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebHookSecurityFilter (Microsoft.Extensions.Configuration.IConfiguration configuration, Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Configuration.IConfiguration configuration, class Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (configuration As IConfiguration, hostingEnvironment As IHostingEnvironment, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter : Microsoft.Extensions.Configuration.IConfiguration * Microsoft.AspNetCore.Hosting.IHostingEnvironment * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter" Usage="new Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter (configuration, hostingEnvironment, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WebHookSecurityFilter(Microsoft::Extensions::Configuration::IConfiguration ^ configuration, Microsoft::AspNetCore::Hosting::IHostingEnvironment ^ hostingEnvironment, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" />
        <Parameter Name="hostingEnvironment" Type="Microsoft.AspNetCore.Hosting.IHostingEnvironment" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="configuration">
            The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> used to initialize <see cref="F:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Configuration" />.
            </param>
        <param name="hostingEnvironment">
            The <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" /> used to initialize <see cref="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.HostingEnvironment" />.
            </param>
        <param name="loggerFactory">
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> used to initialize <see cref="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Logger" />.
            </param>
        <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="protected Microsoft.Extensions.Configuration.IConfiguration Configuration;" />
      <MemberSignature Language="ILAsm" Value=".field family class Microsoft.Extensions.Configuration.IConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Configuration" />
      <MemberSignature Language="VB.NET" Value="Protected Configuration As IConfiguration " />
      <MemberSignature Language="F#" Value="val mutable Configuration : Microsoft.Extensions.Configuration.IConfiguration" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Configuration" />
      <MemberSignature Language="C++ CLI" Value="protected: Microsoft::Extensions::Configuration::IConfiguration ^ Configuration;" />
      <MemberSignature Language="C++ CX" Value="protected: Microsoft::Extensions::Configuration::IConfiguration ^ Configuration;" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::Extensions::Configuration::IConfiguration Configuration;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Configuration.IConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> for the application.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureSecureConnection">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.AspNetCore.Mvc.IActionResult EnsureSecureConnection (string receiverName, Microsoft.AspNetCore.Http.HttpRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.IActionResult EnsureSecureConnection(string receiverName, class Microsoft.AspNetCore.Http.HttpRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.EnsureSecureConnection(System.String,Microsoft.AspNetCore.Http.HttpRequest)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EnsureSecureConnection (receiverName As String, request As HttpRequest) As IActionResult" />
      <MemberSignature Language="F#" Value="abstract member EnsureSecureConnection : string * Microsoft.AspNetCore.Http.HttpRequest -&gt; Microsoft.AspNetCore.Mvc.IActionResult&#xA;override this.EnsureSecureConnection : string * Microsoft.AspNetCore.Http.HttpRequest -&gt; Microsoft.AspNetCore.Mvc.IActionResult" Usage="webHookSecurityFilter.EnsureSecureConnection (receiverName, request)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::IActionResult ^ EnsureSecureConnection(System::String ^ receiverName, Microsoft::AspNetCore::Http::HttpRequest ^ request);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::IActionResult ^ EnsureSecureConnection(Platform::String ^ receiverName, Microsoft::AspNetCore::Http::HttpRequest ^ request);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::AspNetCore::Mvc::IActionResult EnsureSecureConnection(std::wstring const &amp; receiverName, Microsoft::AspNetCore::Http::HttpRequest const &amp; request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.IActionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiverName" Type="System.String" />
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" />
      </Parameters>
      <Docs>
        <param name="receiverName">The name of an available <see cref="T:Microsoft.AspNetCore.WebHooks.IWebHookReceiver" />.</param>
        <param name="request">The current <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" />.</param>
        <summary>
            Some WebHooks rely on HTTPS for sending WebHook requests in a secure manner. A
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter" /> subclass can call this method to ensure that the incoming WebHook
            request is using HTTPS. If the request is not using HTTPS an error will be generated and the request will
            not be further processed.
            </summary>
        <returns>
          <see langword="null" /> in the success case. When a check fails, an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" /> that when
            executed will produce a response containing details about the problem.
            </returns>
        <remarks>
            This method allows HTTP requests while the application is in development or if the
            <see cref="P:Microsoft.AspNetCore.WebHooks.WebHookConstants.DisableHttpsCheckConfigurationKey" /> is <see langword="true" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSecretKey">
      <MemberSignature Language="C#" Value="protected virtual string GetSecretKey (string sectionKey, Microsoft.AspNetCore.Routing.RouteData routeData, int minLength, int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetSecretKey(string sectionKey, class Microsoft.AspNetCore.Routing.RouteData routeData, int32 minLength, int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.GetSecretKey(System.String,Microsoft.AspNetCore.Routing.RouteData,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetSecretKey : string * Microsoft.AspNetCore.Routing.RouteData * int * int -&gt; string&#xA;override this.GetSecretKey : string * Microsoft.AspNetCore.Routing.RouteData * int * int -&gt; string" Usage="webHookSecurityFilter.GetSecretKey (sectionKey, routeData, minLength, maxLength)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetSecretKey(System::String ^ sectionKey, Microsoft::AspNetCore::Routing::RouteData ^ routeData, int minLength, int maxLength);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual std::wstring GetSecretKey(std::wstring const &amp; sectionKey, Microsoft::AspNetCore::Routing::RouteData const &amp; routeData, int minLength, int maxLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionKey" Type="System.String" />
        <Parameter Name="routeData" Type="Microsoft.AspNetCore.Routing.RouteData" />
        <Parameter Name="minLength" Type="System.Int32" />
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sectionKey">
            The key (relative to <see cref="P:Microsoft.AspNetCore.WebHooks.WebHookConstants.ReceiverConfigurationSectionKey" />) of the
            <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" /> containing the receiver-specific
            <see cref="P:Microsoft.AspNetCore.WebHooks.WebHookConstants.SecretKeyConfigurationKeySectionKey" /><see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" />.
            Typically this is the name of the receiver e.g. <c>github</c>.
            </param>
        <param name="routeData">
            The <see cref="T:Microsoft.AspNetCore.Routing.RouteData" /> for this request. A (potentially empty) ID value in this data allows a
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter" /> subclass to support multiple senders with individual configurations.
            </param>
        <param name="minLength">The minimum length of the key value.</param>
        <param name="maxLength">The maximum length of the key value.</param>
        <summary>
            Gets the locally configured WebHook secret key used to validate any signature header provided in a WebHook
            request.
            </summary>
        <returns>
            The configured WebHook secret key. <see langword="null" /> if the configuration value does not exist.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSecretKeys">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.Extensions.Configuration.IConfigurationSection GetSecretKeys (string sectionKey, Microsoft.AspNetCore.Routing.RouteData routeData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.Extensions.Configuration.IConfigurationSection GetSecretKeys(string sectionKey, class Microsoft.AspNetCore.Routing.RouteData routeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.GetSecretKeys(System.String,Microsoft.AspNetCore.Routing.RouteData)" />
      <MemberSignature Language="F#" Value="abstract member GetSecretKeys : string * Microsoft.AspNetCore.Routing.RouteData -&gt; Microsoft.Extensions.Configuration.IConfigurationSection&#xA;override this.GetSecretKeys : string * Microsoft.AspNetCore.Routing.RouteData -&gt; Microsoft.Extensions.Configuration.IConfigurationSection" Usage="webHookSecurityFilter.GetSecretKeys (sectionKey, routeData)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::Extensions::Configuration::IConfigurationSection ^ GetSecretKeys(System::String ^ sectionKey, Microsoft::AspNetCore::Routing::RouteData ^ routeData);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::Extensions::Configuration::IConfigurationSection GetSecretKeys(std::wstring const &amp; sectionKey, Microsoft::AspNetCore::Routing::RouteData const &amp; routeData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Configuration.IConfigurationSection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionKey" Type="System.String" />
        <Parameter Name="routeData" Type="Microsoft.AspNetCore.Routing.RouteData" />
      </Parameters>
      <Docs>
        <param name="sectionKey">
            The key (relative to <see cref="P:Microsoft.AspNetCore.WebHooks.WebHookConstants.ReceiverConfigurationSectionKey" />) of the
            <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" /> containing the receiver-specific
            <see cref="P:Microsoft.AspNetCore.WebHooks.WebHookConstants.SecretKeyConfigurationKeySectionKey" /><see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" />.
            Typically this is the name of the receiver e.g. <c>github</c>.
            </param>
        <param name="routeData">
            The <see cref="T:Microsoft.AspNetCore.Routing.RouteData" /> for this request. A (potentially empty) ID value in this data allows a
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter" /> subclass to support multiple senders with individual configurations.
            </param>
        <summary>
            Gets the locally configured WebHook secret keys used to validate any signature header provided in a WebHook
            request.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" /> containing the configured WebHook secret keys.
            <see langword="null" /> if the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" /> does not exist.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingEnvironment">
      <MemberSignature Language="C#" Value="protected Microsoft.AspNetCore.Hosting.IHostingEnvironment HostingEnvironment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Hosting.IHostingEnvironment HostingEnvironment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.HostingEnvironment" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property HostingEnvironment As IHostingEnvironment" />
      <MemberSignature Language="F#" Value="member this.HostingEnvironment : Microsoft.AspNetCore.Hosting.IHostingEnvironment" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.HostingEnvironment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property Microsoft::AspNetCore::Hosting::IHostingEnvironment ^ HostingEnvironment { Microsoft::AspNetCore::Hosting::IHostingEnvironment ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; property Microsoft::AspNetCore::Hosting::IHostingEnvironment ^ HostingEnvironment { Microsoft::AspNetCore::Hosting::IHostingEnvironment ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Hosting.IHostingEnvironment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logger">
      <MemberSignature Language="C#" Value="protected Microsoft.Extensions.Logging.ILogger Logger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.ILogger Logger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Logger" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Logger As ILogger" />
      <MemberSignature Language="F#" Value="member this.Logger : Microsoft.Extensions.Logging.ILogger" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Logger" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property Microsoft::Extensions::Logging::ILogger ^ Logger { Microsoft::Extensions::Logging::ILogger ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; property Microsoft::Extensions::Logging::ILogger ^ Logger { Microsoft::Extensions::Logging::ILogger ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets an <see cref="T:Microsoft.Extensions.Logging.ILogger" /> for use in this class and any subclasses.
            </summary>
        <value>To be added.</value>
        <remarks>
            Methods in this class use <see cref="T:Microsoft.Extensions.Logging.EventId" />s that should be distinct from (higher than) those used in
            subclasses.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public static int Order { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 Order" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Order" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Order As Integer" />
      <MemberSignature Language="F#" Value="member this.Order : int" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Order" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int Order { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static property int Order { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> recommended for all
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter" /> instances. The recommended filter sequence is
            <list type="number"><item>
            Confirm signature or <c>code</c> query parameter e.g. in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyCodeFilter" /> or other
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter" /> subclass.
            </item><item>
            Confirm required headers, <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary" /> entries and query parameters are provided (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyRequiredValueFilter" />).
            </item><item>
            Short-circuit GET or HEAD requests, if receiver supports either (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter" />).
            </item><item>Confirm it's a POST request (in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyMethodFilter" />).</item><item>Confirm body type (in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter" />).</item><item>
            Map event name(s), if not done in <see cref="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint" /> for this receiver (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter" />).
            </item><item>
            Short-circuit ping requests, if not done in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter" /> for this receiver (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookPingRequestFilter" />).
            </item></list></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretEqual">
      <MemberSignature Language="C#" Value="protected internal static bool SecretEqual (string inputA, string inputB);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig bool SecretEqual(string inputA, string inputB) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.SecretEqual(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function SecretEqual (inputA As String, inputB As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member SecretEqual : string * string -&gt; bool" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.SecretEqual (inputA, inputB)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static bool SecretEqual(System::String ^ inputA, System::String ^ inputB);" />
      <MemberSignature Language="C++ CX" Value="protected public:&#xA; static bool SecretEqual(Platform::String ^ inputA, Platform::String ^ inputB);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool SecretEqual(std::wstring const &amp; inputA, std::wstring const &amp; inputB);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputA" Type="System.String" />
        <Parameter Name="inputB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputA">The first secret to compare.</param>
        <param name="inputB">The second secret to compare.</param>
        <summary>
            Provides a time consistent comparison of two secrets in the form of two strings.
            </summary>
        <returns>
            Returns <see langword="true" /> if the two secrets are equal; <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>