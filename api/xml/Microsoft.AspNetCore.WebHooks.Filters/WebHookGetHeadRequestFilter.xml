<Type Name="WebHookGetHeadRequestFilter" FullName="Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter">
  <TypeSignature Language="C#" Value="public class WebHookGetHeadRequestFilter : Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter, Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebHookGetHeadRequestFilter extends Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter implements class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata, class Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class WebHookGetHeadRequestFilter&#xA;Inherits WebHookSecurityFilter&#xA;Implements IResourceFilter" />
  <TypeSignature Language="F#" Value="type WebHookGetHeadRequestFilter = class&#xA;    inherit WebHookSecurityFilter&#xA;    interface IResourceFilter&#xA;    interface IFilterMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebHookGetHeadRequestFilter : Microsoft::AspNetCore::WebHooks::Filters::WebHookSecurityFilter, Microsoft::AspNetCore::Mvc::Filters::IResourceFilter" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class WebHookGetHeadRequestFilter : Microsoft::AspNetCore::WebHooks::Filters::WebHookSecurityFilter, Microsoft::AspNetCore::Mvc::Filters::IResourceFilter" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Mvc.Filters.IResourceFilter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" /> to verify secret keys and short-circuit WebHook GET or HEAD requests.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebHookGetHeadRequestFilter (Microsoft.Extensions.Configuration.IConfiguration configuration, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookGetHeadRequestMetadata&gt; getHeadRequestMetadata, Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Configuration.IConfiguration configuration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.WebHooks.Metadata.IWebHookGetHeadRequestMetadata&gt; getHeadRequestMetadata, class Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.WebHooks.Metadata.IWebHookGetHeadRequestMetadata},Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configuration As IConfiguration, getHeadRequestMetadata As IEnumerable(Of IWebHookGetHeadRequestMetadata), hostingEnvironment As IHostingEnvironment, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter : Microsoft.Extensions.Configuration.IConfiguration * seq&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookGetHeadRequestMetadata&gt; * Microsoft.AspNetCore.Hosting.IHostingEnvironment * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter" Usage="new Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter (configuration, getHeadRequestMetadata, hostingEnvironment, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebHookGetHeadRequestFilter(Microsoft::Extensions::Configuration::IConfiguration ^ configuration, System::Collections::Generic::IEnumerable&lt;Microsoft::AspNetCore::WebHooks::Metadata::IWebHookGetHeadRequestMetadata ^&gt; ^ getHeadRequestMetadata, Microsoft::AspNetCore::Hosting::IHostingEnvironment ^ hostingEnvironment, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" />
        <Parameter Name="getHeadRequestMetadata" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookGetHeadRequestMetadata&gt;" />
        <Parameter Name="hostingEnvironment" Type="Microsoft.AspNetCore.Hosting.IHostingEnvironment" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="configuration">
            The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> used to initialize <see cref="F:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Configuration" />.
            </param>
        <param name="getHeadRequestMetadata">
            The collection of <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookGetHeadRequestMetadata" /> services.
            </param>
        <param name="hostingEnvironment">
            The <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" /> used to initialize
            <see cref="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.HostingEnvironment" />.
            </param>
        <param name="loggerFactory">
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> used to initialize <see cref="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Logger" />.
            </param>
        <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResourceExecuted">
      <MemberSignature Language="C#" Value="public void OnResourceExecuted (Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnResourceExecuted(class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnResourceExecuted (context As ResourceExecutedContext)" />
      <MemberSignature Language="F#" Value="abstract member OnResourceExecuted : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext -&gt; unit&#xA;override this.OnResourceExecuted : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext -&gt; unit" Usage="webHookGetHeadRequestFilter.OnResourceExecuted context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnResourceExecuted(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutedContext ^ context);" />
      <MemberSignature Language="C++ WINRT" Value="void OnResourceExecuted(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutedContext const &amp; context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="OnResourceExecuting">
      <MemberSignature Language="C#" Value="public void OnResourceExecuting (Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnResourceExecuting(class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnResourceExecuting (context As ResourceExecutingContext)" />
      <MemberSignature Language="F#" Value="abstract member OnResourceExecuting : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext -&gt; unit&#xA;override this.OnResourceExecuting : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext -&gt; unit" Usage="webHookGetHeadRequestFilter.OnResourceExecuting context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnResourceExecuting(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutingContext ^ context);" />
      <MemberSignature Language="C++ WINRT" Value="void OnResourceExecuting(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutingContext const &amp; context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public static int Order { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 Order" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter.Order" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Order As Integer" />
      <MemberSignature Language="F#" Value="member this.Order : int" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter.Order" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int Order { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static property int Order { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> recommended for all <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter" />
            instances. The recommended filter sequence is
            <list type="number"><item>
            Confirm signature or <c>code</c> query parameter e.g. in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyCodeFilter" /> or other
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter" /> subclass.
            </item><item>
            Confirm required headers, <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary" /> entries and query parameters are provided (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyRequiredValueFilter" />).
            </item><item>Short-circuit GET or HEAD requests, if receiver supports either (in this filter).</item><item>Confirm it's a POST request (in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyMethodFilter" />).</item><item>Confirm body type (in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter" />).</item><item>
            Map event name(s), if not done in <see cref="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint" /> for this receiver (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter" />).
            </item><item>
            Short-circuit ping requests, if not done in this filter for this receiver (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookPingRequestFilter" />).
            </item></list></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>