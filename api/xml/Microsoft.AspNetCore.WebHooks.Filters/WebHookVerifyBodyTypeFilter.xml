<Type Name="WebHookVerifyBodyTypeFilter" FullName="Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter">
  <TypeSignature Language="C#" Value="public class WebHookVerifyBodyTypeFilter : Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter, Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebHookVerifyBodyTypeFilter extends System.Object implements class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata, class Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter, class Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class WebHookVerifyBodyTypeFilter&#xA;Implements IOrderedFilter, IResourceFilter" />
  <TypeSignature Language="F#" Value="type WebHookVerifyBodyTypeFilter = class&#xA;    interface IResourceFilter&#xA;    interface IFilterMetadata&#xA;    interface IOrderedFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebHookVerifyBodyTypeFilter : Microsoft::AspNetCore::Mvc::Filters::IOrderedFilter, Microsoft::AspNetCore::Mvc::Filters::IResourceFilter" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class WebHookVerifyBodyTypeFilter : Microsoft::AspNetCore::Mvc::Filters::IOrderedFilter, Microsoft::AspNetCore::Mvc::Filters::IResourceFilter" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Mvc.Filters.IResourceFilter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" /> to allow only WebHook requests with a <c>Content-Type</c> matching the
            receiver's <see cref="P:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService.BodyType" />.
            </summary>
    <remarks>
      <para>
            Done as an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" /> implementation and not an
            <see cref="T:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata" /> because receivers do not dynamically vary their
            <see cref="P:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService.BodyType" />s.
            </para>
      <para>
            Use <see cref="P:Microsoft.AspNetCore.WebHooks.WebHookAttribute.Id" /> values to control routing to multiple actions with
            <see cref="T:Microsoft.AspNetCore.WebHooks.GeneralWebHookAttribute" /> and distinct non-<see langword="null" /><see cref="P:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadata.BodyType" /> settings.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebHookVerifyBodyTypeFilter (Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService receiverBodyTypeMetadata, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService receiverBodyTypeMetadata, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.#ctor(Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (receiverBodyTypeMetadata As IWebHookBodyTypeMetadataService, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter : Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter" Usage="new Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter (receiverBodyTypeMetadata, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebHookVerifyBodyTypeFilter(Microsoft::AspNetCore::WebHooks::Metadata::IWebHookBodyTypeMetadataService ^ receiverBodyTypeMetadata, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="receiverBodyTypeMetadata" Type="Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="receiverBodyTypeMetadata">
            The receiver's <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService" />.
            </param>
        <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />.</param>
        <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter" /> instance to verify the given
            <paramref name="receiverBodyTypeMetadata" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebHookVerifyBodyTypeFilter (System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService&gt; allBodyTypeMetadata, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService&gt; allBodyTypeMetadata, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService},Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (allBodyTypeMetadata As IReadOnlyList(Of IWebHookBodyTypeMetadataService), loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter : System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService&gt; * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter" Usage="new Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter (allBodyTypeMetadata, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebHookVerifyBodyTypeFilter(System::Collections::Generic::IReadOnlyList&lt;Microsoft::AspNetCore::WebHooks::Metadata::IWebHookBodyTypeMetadataService ^&gt; ^ allBodyTypeMetadata, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="allBodyTypeMetadata" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService&gt;" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="allBodyTypeMetadata">
            The collection of <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService" /> services. Searched for applicable metadata
            per-request.
            </param>
        <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />.</param>
        <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter" /> instance to verify the receiver's
            <see cref="P:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService.BodyType" />. That <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.WebHookBodyType" /> value is found
            in <paramref name="allBodyTypeMetadata" />).
            </summary>
        <remarks>
            This overload is intended for use with <see cref="T:Microsoft.AspNetCore.WebHooks.GeneralWebHookAttribute" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsJson">
      <MemberSignature Language="C#" Value="protected static bool IsJson (Microsoft.Net.Http.Headers.MediaTypeHeaderValue contentType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool IsJson(class Microsoft.Net.Http.Headers.MediaTypeHeaderValue contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.IsJson(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function IsJson (contentType As MediaTypeHeaderValue) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsJson : Microsoft.Net.Http.Headers.MediaTypeHeaderValue -&gt; bool" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.IsJson contentType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool IsJson(Microsoft::Net::Http::Headers::MediaTypeHeaderValue ^ contentType);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsJson(Microsoft::Net::Http::Headers::MediaTypeHeaderValue const &amp; contentType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="Microsoft.Net.Http.Headers.MediaTypeHeaderValue" />
      </Parameters>
      <Docs>
        <param name="contentType">The request's <see cref="T:Microsoft.Net.Http.Headers.MediaTypeHeaderValue" />.</param>
        <summary>
            Determines whether the specified <paramref name="contentType" /> is <c>application/json</c>,
            <c>text/json</c> or <c>application/xyz+json</c>. The term <c>xyz</c> can for example be <c>hal</c> or some
            other JSON-derived media type.
            </summary>
        <returns>
          <see langword="true" /> if the <paramref name="contentType" /> indicates the request has JSON content;
            otherwise, <see langword="false" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXml">
      <MemberSignature Language="C#" Value="protected static bool IsXml (Microsoft.Net.Http.Headers.MediaTypeHeaderValue contentType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool IsXml(class Microsoft.Net.Http.Headers.MediaTypeHeaderValue contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.IsXml(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function IsXml (contentType As MediaTypeHeaderValue) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsXml : Microsoft.Net.Http.Headers.MediaTypeHeaderValue -&gt; bool" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.IsXml contentType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool IsXml(Microsoft::Net::Http::Headers::MediaTypeHeaderValue ^ contentType);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsXml(Microsoft::Net::Http::Headers::MediaTypeHeaderValue const &amp; contentType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="Microsoft.Net.Http.Headers.MediaTypeHeaderValue" />
      </Parameters>
      <Docs>
        <param name="contentType">The request's <see cref="T:Microsoft.Net.Http.Headers.MediaTypeHeaderValue" />.</param>
        <summary>
            Determines whether the specified <paramref name="contentType" /> is <c>application/xml</c>, <c>text/xml</c>
            or <c>application/xyz+xml</c>. The term <c>xyz</c> can for example be <c>rdf</c> or some other XML-derived
            media type.
            </summary>
        <returns>
          <see langword="true" /> if the <paramref name="contentType" /> indicates the request has XML content;
            otherwise, <see langword="false" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order">
      <MemberSignature Language="C#" Value="int Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.Microsoft#AspNetCore#Mvc#Filters#IOrderedFilter#Order" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Order As Integer Implements IOrderedFilter.Order" />
      <MemberSignature Language="F#" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />
      <MemberSignature Language="C++ CLI" Value="property int Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order { int get(); };" />
      <MemberSignature Language="C++ CX" Value="property int Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="OnResourceExecuted">
      <MemberSignature Language="C#" Value="public void OnResourceExecuted (Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnResourceExecuted(class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnResourceExecuted (context As ResourceExecutedContext)" />
      <MemberSignature Language="F#" Value="abstract member OnResourceExecuted : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext -&gt; unit&#xA;override this.OnResourceExecuted : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext -&gt; unit" Usage="webHookVerifyBodyTypeFilter.OnResourceExecuted context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnResourceExecuted(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutedContext ^ context);" />
      <MemberSignature Language="C++ WINRT" Value="void OnResourceExecuted(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutedContext const &amp; context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="OnResourceExecuting">
      <MemberSignature Language="C#" Value="public void OnResourceExecuting (Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnResourceExecuting(class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnResourceExecuting (context As ResourceExecutingContext)" />
      <MemberSignature Language="F#" Value="abstract member OnResourceExecuting : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext -&gt; unit&#xA;override this.OnResourceExecuting : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext -&gt; unit" Usage="webHookVerifyBodyTypeFilter.OnResourceExecuting context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnResourceExecuting(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutingContext ^ context);" />
      <MemberSignature Language="C++ WINRT" Value="void OnResourceExecuting(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutingContext const &amp; context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public static int Order { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 Order" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.Order" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Order As Integer" />
      <MemberSignature Language="F#" Value="member this.Order : int" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter.Order" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int Order { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static property int Order { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> used in all <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter" />
            instances. The recommended filter sequence is
            <list type="number"><item>
            Confirm signature or <c>code</c> query parameter e.g. in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyCodeFilter" /> or other
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter" /> subclass.
            </item><item>
            Confirm required headers, <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary" /> entries and query parameters are provided
            (in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyRequiredValueFilter" />).
            </item><item>
            Short-circuit GET or HEAD requests, if receiver supports either (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter" />).
            </item><item>Confirm it's a POST request (in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyMethodFilter" />).</item><item>Confirm body type (in this filter).</item><item>
            Map event name(s), if not done in <see cref="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint" /> for this receiver (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter" />).
            </item><item>
            Short-circuit ping requests, if not done in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter" /> for this receiver (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookPingRequestFilter" />).
            </item></list></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>