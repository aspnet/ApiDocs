<Type Name="WebHookEventMapperFilter" FullName="Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter">
  <TypeSignature Language="C#" Value="public class WebHookEventMapperFilter : Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebHookEventMapperFilter extends System.Object implements class Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter, class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class WebHookEventMapperFilter&#xA;Implements IAsyncResourceFilter" />
  <TypeSignature Language="F#" Value="type WebHookEventMapperFilter = class&#xA;    interface IAsyncResourceFilter&#xA;    interface IFilterMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebHookEventMapperFilter : Microsoft::AspNetCore::Mvc::Filters::IAsyncResourceFilter" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class WebHookEventMapperFilter : Microsoft::AspNetCore::Mvc::Filters::IAsyncResourceFilter" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
            An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter" /> implementation which uses <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventFromBodyMetadata" /> to
            determine the event names for a WebHook request. Reads the event names from the request body and makes them
            available for model binding and short-circuiting ping requests but not for action selection.
            </para>
      <para>
            This filter accepts all requests for receivers lacking <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventFromBodyMetadata" /> or with
            <see cref="P:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventFromBodyMetadata.AllowMissing" /> set to <see langword="true" />. Otherwise, the filter
            short-circuits requests with no event names in the body.
            </para>
    </summary>
    <remarks>
            This filter ignores errors other filters will handle but rejects requests that cause model binding failures.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebHookEventMapperFilter (System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService&gt; bodyTypeMetadata, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventFromBodyMetadata&gt; eventFromBodyMetadata, Microsoft.AspNetCore.WebHooks.IWebHookRequestReader requestReader, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService&gt; bodyTypeMetadata, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventFromBodyMetadata&gt; eventFromBodyMetadata, class Microsoft.AspNetCore.WebHooks.IWebHookRequestReader requestReader, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventFromBodyMetadata},Microsoft.AspNetCore.WebHooks.IWebHookRequestReader,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bodyTypeMetadata As IEnumerable(Of IWebHookBodyTypeMetadataService), eventFromBodyMetadata As IEnumerable(Of IWebHookEventFromBodyMetadata), requestReader As IWebHookRequestReader, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter : seq&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService&gt; * seq&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventFromBodyMetadata&gt; * Microsoft.AspNetCore.WebHooks.IWebHookRequestReader * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter" Usage="new Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter (bodyTypeMetadata, eventFromBodyMetadata, requestReader, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebHookEventMapperFilter(System::Collections::Generic::IEnumerable&lt;Microsoft::AspNetCore::WebHooks::Metadata::IWebHookBodyTypeMetadataService ^&gt; ^ bodyTypeMetadata, System::Collections::Generic::IEnumerable&lt;Microsoft::AspNetCore::WebHooks::Metadata::IWebHookEventFromBodyMetadata ^&gt; ^ eventFromBodyMetadata, Microsoft::AspNetCore::WebHooks::IWebHookRequestReader ^ requestReader, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bodyTypeMetadata" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService&gt;" />
        <Parameter Name="eventFromBodyMetadata" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventFromBodyMetadata&gt;" />
        <Parameter Name="requestReader" Type="Microsoft.AspNetCore.WebHooks.IWebHookRequestReader" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="bodyTypeMetadata">
            The collection of <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookBodyTypeMetadataService" /> services.
            </param>
        <param name="eventFromBodyMetadata">
            The collection of <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookEventFromBodyMetadata" /> services.
            </param>
        <param name="requestReader">The <see cref="T:Microsoft.AspNetCore.WebHooks.IWebHookRequestReader" />.</param>
        <param name="loggerFactory">The <see creFf="ILoggerFactory" />.</param>
        <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResourceExecutionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task OnResourceExecutionAsync (Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext context, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate next);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task OnResourceExecutionAsync(class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext context, class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate next) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter.OnResourceExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnResourceExecutionAsync (context As ResourceExecutingContext, next As ResourceExecutionDelegate) As Task" />
      <MemberSignature Language="F#" Value="abstract member OnResourceExecutionAsync : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext * Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate -&gt; System.Threading.Tasks.Task&#xA;override this.OnResourceExecutionAsync : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext * Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate -&gt; System.Threading.Tasks.Task" Usage="webHookEventMapperFilter.OnResourceExecutionAsync (context, next)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ OnResourceExecutionAsync(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutingContext ^ context, Microsoft::AspNetCore::Mvc::Filters::ResourceExecutionDelegate ^ next);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter.OnResourceExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter/&lt;OnResourceExecutionAsync&gt;d__7))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext" />
        <Parameter Name="next" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="next">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public static int Order { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 Order" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter.Order" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Order As Integer" />
      <MemberSignature Language="F#" Value="member this.Order : int" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter.Order" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int Order { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static property int Order { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> recommended for all <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookEventMapperFilter" />
            instances. The recommended filter sequence is
            <list type="number"><item>
            Confirm signature or <c>code</c> query parameter (e.g. in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyCodeFilter" /> or a
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter" /> subclass).
            </item><item>
            Confirm required headers, <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary" /> entries and query parameters are provided (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyRequiredValueFilter" />).
            </item><item>
            Short-circuit GET or HEAD requests, if receiver supports either (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter" />).
            </item><item>Confirm it's a POST request (in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyMethodFilter" />).</item><item>Confirm body type (in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifyBodyTypeFilter" />).</item><item>
            Map event name(s), if not done in <see cref="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookEventMapperConstraint" /> for this receiver (in
            this filter).
            </item><item>
            Short-circuit ping requests, if not done in <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookGetHeadRequestFilter" /> for this receiver (in
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookPingRequestFilter" />).
            </item></list></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>