<Type Name="WebHookVerifySignatureFilter" FullName="Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter">
  <TypeSignature Language="C#" Value="public abstract class WebHookVerifySignatureFilter : Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter, Microsoft.AspNetCore.WebHooks.IWebHookReceiver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WebHookVerifySignatureFilter extends Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter implements class Microsoft.AspNetCore.WebHooks.IWebHookReceiver" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WebHookVerifySignatureFilter&#xA;Inherits WebHookSecurityFilter&#xA;Implements IWebHookReceiver" />
  <TypeSignature Language="F#" Value="type WebHookVerifySignatureFilter = class&#xA;    inherit WebHookSecurityFilter&#xA;    interface IWebHookReceiver" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebHookVerifySignatureFilter abstract : Microsoft::AspNetCore::WebHooks::Filters::WebHookSecurityFilter, Microsoft::AspNetCore::WebHooks::IWebHookReceiver" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class WebHookVerifySignatureFilter abstract : Microsoft::AspNetCore::WebHooks::Filters::WebHookSecurityFilter, Microsoft::AspNetCore::WebHooks::IWebHookReceiver" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class WebHookVerifySignatureFilter abstract : Microsoft::AspNetCore::WebHooks::Filters::WebHookSecurityFilter, Microsoft::AspNetCore::WebHooks::IWebHookReceiver" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.WebHooks.IWebHookReceiver</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Base class for <see cref="T:Microsoft.AspNetCore.WebHooks.IWebHookReceiver" /> and <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" /> or
            <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter" /> implementations that verify request body content e.g. filters
            that verify signatures of request body content. Subclasses should have an
            <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> equal to <see cref="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Order" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebHookVerifySignatureFilter (Microsoft.Extensions.Configuration.IConfiguration configuration, Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Configuration.IConfiguration configuration, class Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (configuration As IConfiguration, hostingEnvironment As IHostingEnvironment, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter : Microsoft.Extensions.Configuration.IConfiguration * Microsoft.AspNetCore.Hosting.IHostingEnvironment * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter" Usage="new Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter (configuration, hostingEnvironment, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WebHookVerifySignatureFilter(Microsoft::Extensions::Configuration::IConfiguration ^ configuration, Microsoft::AspNetCore::Hosting::IHostingEnvironment ^ hostingEnvironment, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" />
        <Parameter Name="hostingEnvironment" Type="Microsoft.AspNetCore.Hosting.IHostingEnvironment" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="configuration">
            The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> used to initialize <see cref="F:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Configuration" />.
            </param>
        <param name="hostingEnvironment">
            The <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" /> used to initialize
            <see cref="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.HostingEnvironment" />.
            </param>
        <param name="loggerFactory">
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> used to initialize <see cref="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter.Logger" />.
            </param>
        <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeRequestBodySha1HashAsync">
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task&lt;byte[]&gt; ComputeRequestBodySha1HashAsync (Microsoft.AspNetCore.Http.HttpRequest request, byte[] secret);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ComputeRequestBodySha1HashAsync(class Microsoft.AspNetCore.Http.HttpRequest request, unsigned int8[] secret) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.ComputeRequestBodySha1HashAsync(Microsoft.AspNetCore.Http.HttpRequest,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function ComputeRequestBodySha1HashAsync (request As HttpRequest, secret As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="F#" Value="member this.ComputeRequestBodySha1HashAsync : Microsoft.AspNetCore.Http.HttpRequest * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webHookVerifySignatureFilter.ComputeRequestBodySha1HashAsync (request, secret)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ ComputeRequestBodySha1HashAsync(Microsoft::AspNetCore::Http::HttpRequest ^ request, cli::array &lt;System::Byte&gt; ^ secret);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" />
        <Parameter Name="secret" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="request">The current <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" />.</param>
        <param name="secret">The key data used to initialize the <see cref="T:System.Security.Cryptography.HMACSHA1" />.</param>
        <summary>
            Returns the SHA1 HMAC of the given <paramref name="request" />'s body.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that on completion provides a <see cref="T:System.Byte" /> array containing the SHA1 HMAC of
            the <paramref name="request" />'s body.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeRequestBodySha1HashAsync">
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task&lt;byte[]&gt; ComputeRequestBodySha1HashAsync (Microsoft.AspNetCore.Http.HttpRequest request, byte[] secret, byte[] prefix);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ComputeRequestBodySha1HashAsync(class Microsoft.AspNetCore.Http.HttpRequest request, unsigned int8[] secret, unsigned int8[] prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.ComputeRequestBodySha1HashAsync(Microsoft.AspNetCore.Http.HttpRequest,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function ComputeRequestBodySha1HashAsync (request As HttpRequest, secret As Byte(), prefix As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="F#" Value="member this.ComputeRequestBodySha1HashAsync : Microsoft.AspNetCore.Http.HttpRequest * byte[] * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webHookVerifySignatureFilter.ComputeRequestBodySha1HashAsync (request, secret, prefix)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ ComputeRequestBodySha1HashAsync(Microsoft::AspNetCore::Http::HttpRequest ^ request, cli::array &lt;System::Byte&gt; ^ secret, cli::array &lt;System::Byte&gt; ^ prefix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" />
        <Parameter Name="secret" Type="System.Byte[]" />
        <Parameter Name="prefix" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="request">The current <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" />.</param>
        <param name="secret">The key data used to initialize the <see cref="T:System.Security.Cryptography.HMACSHA1" />.</param>
        <param name="prefix">
            If non-<see langword="null" /> and non-empty, additional <c>byte</c>s to include in the hashed content
            before the <paramref name="request" />'s body.
            </param>
        <summary>
            Returns the SHA1 HMAC of the given <paramref name="prefix" /> followed by the given
            <paramref name="request" />'s body.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that on completion provides a <see cref="T:System.Byte" /> array containing the SHA1 HMAC of
            the <paramref name="prefix" /> followed by the <paramref name="request" />'s body.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeRequestBodySha1HashAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;byte[]&gt; ComputeRequestBodySha1HashAsync (Microsoft.AspNetCore.Http.HttpRequest request, byte[] secret, byte[] prefix, byte[] suffix);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ComputeRequestBodySha1HashAsync(class Microsoft.AspNetCore.Http.HttpRequest request, unsigned int8[] secret, unsigned int8[] prefix, unsigned int8[] suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.ComputeRequestBodySha1HashAsync(Microsoft.AspNetCore.Http.HttpRequest,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ComputeRequestBodySha1HashAsync (request As HttpRequest, secret As Byte(), prefix As Byte(), suffix As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="F#" Value="abstract member ComputeRequestBodySha1HashAsync : Microsoft.AspNetCore.Http.HttpRequest * byte[] * byte[] * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;&#xA;override this.ComputeRequestBodySha1HashAsync : Microsoft.AspNetCore.Http.HttpRequest * byte[] * byte[] * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webHookVerifySignatureFilter.ComputeRequestBodySha1HashAsync (request, secret, prefix, suffix)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ ComputeRequestBodySha1HashAsync(Microsoft::AspNetCore::Http::HttpRequest ^ request, cli::array &lt;System::Byte&gt; ^ secret, cli::array &lt;System::Byte&gt; ^ prefix, cli::array &lt;System::Byte&gt; ^ suffix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter/&lt;ComputeRequestBodySha1HashAsync&gt;d__10))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" />
        <Parameter Name="secret" Type="System.Byte[]" />
        <Parameter Name="prefix" Type="System.Byte[]" />
        <Parameter Name="suffix" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="request">The current <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" />.</param>
        <param name="secret">The key data used to initialize the <see cref="T:System.Security.Cryptography.HMACSHA1" />.</param>
        <param name="prefix">
            If non-<see langword="null" /> and non-empty, additional <c>byte</c>s to include in the hashed content
            before the <paramref name="request" />'s body.
            </param>
        <param name="suffix">
            If non-<see langword="null" /> and non-empty, additional <c>byte</c>s to include in the hashed content
            after the <paramref name="request" />'s body.
            </param>
        <summary>
            Returns the SHA1 HMAC of the given <paramref name="prefix" />, the given <paramref name="request" />'s
            body, and the given <paramref name="suffix" /> (in that order).
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that on completion provides a <see cref="T:System.Byte" /> array containing the SHA1 HMAC of
            the <paramref name="prefix" />, the <paramref name="request" />'s body, and the <paramref name="suffix" />
            (in that order).
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeRequestBodySha256HashAsync">
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task&lt;byte[]&gt; ComputeRequestBodySha256HashAsync (Microsoft.AspNetCore.Http.HttpRequest request, byte[] secret);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ComputeRequestBodySha256HashAsync(class Microsoft.AspNetCore.Http.HttpRequest request, unsigned int8[] secret) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.ComputeRequestBodySha256HashAsync(Microsoft.AspNetCore.Http.HttpRequest,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function ComputeRequestBodySha256HashAsync (request As HttpRequest, secret As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="F#" Value="member this.ComputeRequestBodySha256HashAsync : Microsoft.AspNetCore.Http.HttpRequest * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webHookVerifySignatureFilter.ComputeRequestBodySha256HashAsync (request, secret)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ ComputeRequestBodySha256HashAsync(Microsoft::AspNetCore::Http::HttpRequest ^ request, cli::array &lt;System::Byte&gt; ^ secret);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" />
        <Parameter Name="secret" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="request">The current <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" />.</param>
        <param name="secret">The key data used to initialize the <see cref="T:System.Security.Cryptography.HMACSHA256" />.</param>
        <summary>
            Returns the SHA256 HMAC of the given <paramref name="request" />'s body.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that on completion provides a <see cref="T:System.Byte" /> array containing the SHA256 HMAC of
            the <paramref name="request" />'s body.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeRequestBodySha256HashAsync">
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task&lt;byte[]&gt; ComputeRequestBodySha256HashAsync (Microsoft.AspNetCore.Http.HttpRequest request, byte[] secret, byte[] prefix);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ComputeRequestBodySha256HashAsync(class Microsoft.AspNetCore.Http.HttpRequest request, unsigned int8[] secret, unsigned int8[] prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.ComputeRequestBodySha256HashAsync(Microsoft.AspNetCore.Http.HttpRequest,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function ComputeRequestBodySha256HashAsync (request As HttpRequest, secret As Byte(), prefix As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="F#" Value="member this.ComputeRequestBodySha256HashAsync : Microsoft.AspNetCore.Http.HttpRequest * byte[] * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webHookVerifySignatureFilter.ComputeRequestBodySha256HashAsync (request, secret, prefix)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ ComputeRequestBodySha256HashAsync(Microsoft::AspNetCore::Http::HttpRequest ^ request, cli::array &lt;System::Byte&gt; ^ secret, cli::array &lt;System::Byte&gt; ^ prefix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" />
        <Parameter Name="secret" Type="System.Byte[]" />
        <Parameter Name="prefix" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="request">The current <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" />.</param>
        <param name="secret">The key data used to initialize the <see cref="T:System.Security.Cryptography.HMACSHA256" />.</param>
        <param name="prefix">
            If non-<see langword="null" /> and non-empty, additional <c>byte</c>s to include in the hashed content
            before the <paramref name="request" />'s body.
            </param>
        <summary>
            Returns the SHA256 HMAC of the given <paramref name="prefix" /> followed by the given
            <paramref name="request" />'s body.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that on completion provides a <see cref="T:System.Byte" /> array containing the SHA256 HMAC of
            the <paramref name="prefix" /> followed by the <paramref name="request" />'s body.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeRequestBodySha256HashAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;byte[]&gt; ComputeRequestBodySha256HashAsync (Microsoft.AspNetCore.Http.HttpRequest request, byte[] secret, byte[] prefix, byte[] suffix);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ComputeRequestBodySha256HashAsync(class Microsoft.AspNetCore.Http.HttpRequest request, unsigned int8[] secret, unsigned int8[] prefix, unsigned int8[] suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.ComputeRequestBodySha256HashAsync(Microsoft.AspNetCore.Http.HttpRequest,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ComputeRequestBodySha256HashAsync (request As HttpRequest, secret As Byte(), prefix As Byte(), suffix As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="F#" Value="abstract member ComputeRequestBodySha256HashAsync : Microsoft.AspNetCore.Http.HttpRequest * byte[] * byte[] * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;&#xA;override this.ComputeRequestBodySha256HashAsync : Microsoft.AspNetCore.Http.HttpRequest * byte[] * byte[] * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webHookVerifySignatureFilter.ComputeRequestBodySha256HashAsync (request, secret, prefix, suffix)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ ComputeRequestBodySha256HashAsync(Microsoft::AspNetCore::Http::HttpRequest ^ request, cli::array &lt;System::Byte&gt; ^ secret, cli::array &lt;System::Byte&gt; ^ prefix, cli::array &lt;System::Byte&gt; ^ suffix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter/&lt;ComputeRequestBodySha256HashAsync&gt;d__13))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" />
        <Parameter Name="secret" Type="System.Byte[]" />
        <Parameter Name="prefix" Type="System.Byte[]" />
        <Parameter Name="suffix" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="request">The current <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" />.</param>
        <param name="secret">The key data used to initialize the <see cref="T:System.Security.Cryptography.HMACSHA256" />.</param>
        <param name="prefix">
            If non-<see langword="null" /> and non-empty, additional <c>byte</c>s to include in the hashed content
            before the <paramref name="request" />'s body.
            </param>
        <param name="suffix">
            If non-<see langword="null" /> and non-empty, additional <c>byte</c>s to include in the hashed content
            after the <paramref name="request" />'s body.
            </param>
        <summary>
            Returns the SHA256 HMAC of the given <paramref name="prefix" />, the given <paramref name="request" />'s
            body, and the given <paramref name="suffix" /> (in that order).
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that on completion provides a <see cref="T:System.Byte" /> array containing the SHA256 HMAC of
            the <paramref name="prefix" />, the <paramref name="request" />'s body, and the <paramref name="suffix" />
            (in that order).
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBadBase64EncodingResult">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.AspNetCore.Mvc.IActionResult CreateBadBase64EncodingResult (string signatureHeaderName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.IActionResult CreateBadBase64EncodingResult(string signatureHeaderName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.CreateBadBase64EncodingResult(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateBadBase64EncodingResult (signatureHeaderName As String) As IActionResult" />
      <MemberSignature Language="F#" Value="abstract member CreateBadBase64EncodingResult : string -&gt; Microsoft.AspNetCore.Mvc.IActionResult&#xA;override this.CreateBadBase64EncodingResult : string -&gt; Microsoft.AspNetCore.Mvc.IActionResult" Usage="webHookVerifySignatureFilter.CreateBadBase64EncodingResult signatureHeaderName" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::IActionResult ^ CreateBadBase64EncodingResult(System::String ^ signatureHeaderName);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::IActionResult ^ CreateBadBase64EncodingResult(Platform::String ^ signatureHeaderName);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::AspNetCore::Mvc::IActionResult CreateBadBase64EncodingResult(std::wstring const &amp; signatureHeaderName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.IActionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signatureHeaderName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="signatureHeaderName">The name of the HTTP header with invalid content.</param>
        <summary>
            Returns a new <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" /> that when executed produces a response indicating the request
            had a signature header containing an invalid (non-Base64-encoded) hash value.
            </summary>
        <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" /> that when executed will produce a response with status code 400 "Bad
            Request" and containing details about the problem.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBadHexEncodingResult">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.AspNetCore.Mvc.IActionResult CreateBadHexEncodingResult (string signatureHeaderName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.IActionResult CreateBadHexEncodingResult(string signatureHeaderName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.CreateBadHexEncodingResult(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateBadHexEncodingResult (signatureHeaderName As String) As IActionResult" />
      <MemberSignature Language="F#" Value="abstract member CreateBadHexEncodingResult : string -&gt; Microsoft.AspNetCore.Mvc.IActionResult&#xA;override this.CreateBadHexEncodingResult : string -&gt; Microsoft.AspNetCore.Mvc.IActionResult" Usage="webHookVerifySignatureFilter.CreateBadHexEncodingResult signatureHeaderName" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::IActionResult ^ CreateBadHexEncodingResult(System::String ^ signatureHeaderName);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::IActionResult ^ CreateBadHexEncodingResult(Platform::String ^ signatureHeaderName);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::AspNetCore::Mvc::IActionResult CreateBadHexEncodingResult(std::wstring const &amp; signatureHeaderName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.IActionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signatureHeaderName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="signatureHeaderName">The name of the HTTP header with invalid content.</param>
        <summary>
            Returns a new <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" /> that when executed produces a response indicating the request
            had a signature header containing an invalid (non-hex-encoded) hash value.
            </summary>
        <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" /> that when executed will produce a response with status code 400 "Bad
            Request" and containing details about the problem.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBadSignatureResult">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.AspNetCore.Mvc.IActionResult CreateBadSignatureResult (string signatureHeaderName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.IActionResult CreateBadSignatureResult(string signatureHeaderName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.CreateBadSignatureResult(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateBadSignatureResult (signatureHeaderName As String) As IActionResult" />
      <MemberSignature Language="F#" Value="abstract member CreateBadSignatureResult : string -&gt; Microsoft.AspNetCore.Mvc.IActionResult&#xA;override this.CreateBadSignatureResult : string -&gt; Microsoft.AspNetCore.Mvc.IActionResult" Usage="webHookVerifySignatureFilter.CreateBadSignatureResult signatureHeaderName" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::IActionResult ^ CreateBadSignatureResult(System::String ^ signatureHeaderName);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual Microsoft::AspNetCore::Mvc::IActionResult ^ CreateBadSignatureResult(Platform::String ^ signatureHeaderName);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::AspNetCore::Mvc::IActionResult CreateBadSignatureResult(std::wstring const &amp; signatureHeaderName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.IActionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signatureHeaderName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="signatureHeaderName">The name of the HTTP header with invalid content.</param>
        <summary>
            Returns a new <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" /> that when executed produces a response indicating the request
            invalid signature (an unexpected hash value) and as a result could not be processed. Also logs about the
            problem.
            </summary>
        <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" /> that when executed will produce a response with status code 400 "Bad
            Request" and containing details about the problem.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromBase64">
      <MemberSignature Language="C#" Value="protected byte[] FromBase64 (string content, string signatureHeaderName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance unsigned int8[] FromBase64(string content, string signatureHeaderName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.FromBase64(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function FromBase64 (content As String, signatureHeaderName As String) As Byte()" />
      <MemberSignature Language="F#" Value="member this.FromBase64 : string * string -&gt; byte[]" Usage="webHookVerifySignatureFilter.FromBase64 (content, signatureHeaderName)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Byte&gt; ^ FromBase64(System::String ^ content, System::String ^ signatureHeaderName);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; Platform::Array &lt;byte&gt; ^ FromBase64(Platform::String ^ content, Platform::String ^ signatureHeaderName);" />
      <MemberSignature Language="C++ WINRT" Value="std::Array &lt;byte&gt; FromBase64(std::wstring const &amp; content, std::wstring const &amp; signatureHeaderName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="signatureHeaderName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="content">THe Base64-encoded string to convert.</param>
        <param name="signatureHeaderName">
            The name of the HTTP header containing <paramref name="content" />.
            </param>
        <summary>
            Converts a Base64-encoded string to a <see cref="T:byte[]" />.
            </summary>
        <returns>The converted <see cref="T:byte[]" />. <see langword="null" /> if conversion fails.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHex">
      <MemberSignature Language="C#" Value="protected byte[] FromHex (string content, string signatureHeaderName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance unsigned int8[] FromHex(string content, string signatureHeaderName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.FromHex(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function FromHex (content As String, signatureHeaderName As String) As Byte()" />
      <MemberSignature Language="F#" Value="member this.FromHex : string * string -&gt; byte[]" Usage="webHookVerifySignatureFilter.FromHex (content, signatureHeaderName)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Byte&gt; ^ FromHex(System::String ^ content, System::String ^ signatureHeaderName);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; Platform::Array &lt;byte&gt; ^ FromHex(Platform::String ^ content, Platform::String ^ signatureHeaderName);" />
      <MemberSignature Language="C++ WINRT" Value="std::Array &lt;byte&gt; FromHex(std::wstring const &amp; content, std::wstring const &amp; signatureHeaderName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="signatureHeaderName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="content">THe hex-encoded string to convert.</param>
        <param name="signatureHeaderName">
            The name of the HTTP header containing <paramref name="content" />.
            </param>
        <summary>
            Converts a hex-encoded string to a <see cref="T:byte[]" />.
            </summary>
        <returns>The converted <see cref="T:byte[]" />. <see langword="null" /> if conversion fails.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequestHeader">
      <MemberSignature Language="C#" Value="protected virtual string GetRequestHeader (Microsoft.AspNetCore.Http.HttpRequest request, string headerName, out Microsoft.AspNetCore.Mvc.IActionResult errorResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetRequestHeader(class Microsoft.AspNetCore.Http.HttpRequest request, string headerName, [out] class Microsoft.AspNetCore.Mvc.IActionResult&amp; errorResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.GetRequestHeader(Microsoft.AspNetCore.Http.HttpRequest,System.String,Microsoft.AspNetCore.Mvc.IActionResult@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetRequestHeader (request As HttpRequest, headerName As String, ByRef errorResult As IActionResult) As String" />
      <MemberSignature Language="F#" Value="abstract member GetRequestHeader : Microsoft.AspNetCore.Http.HttpRequest * string *  -&gt; string&#xA;override this.GetRequestHeader : Microsoft.AspNetCore.Http.HttpRequest * string *  -&gt; string" Usage="webHookVerifySignatureFilter.GetRequestHeader (request, headerName, errorResult)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetRequestHeader(Microsoft::AspNetCore::Http::HttpRequest ^ request, System::String ^ headerName, [Runtime::InteropServices::Out] Microsoft::AspNetCore::Mvc::IActionResult ^ % errorResult);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual Platform::String ^ GetRequestHeader(Microsoft::AspNetCore::Http::HttpRequest ^ request, Platform::String ^ headerName, [Runtime::InteropServices::Out] Microsoft::AspNetCore::Mvc::IActionResult ^ &amp;  errorResult);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual std::wstring GetRequestHeader(Microsoft::AspNetCore::Http::HttpRequest const &amp; request, std::wstring const &amp; headerName, [Runtime::InteropServices::Out] Microsoft::AspNetCore::Mvc::IActionResult const &amp; &amp; errorResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" />
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="errorResult" Type="Microsoft.AspNetCore.Mvc.IActionResult&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="request">The current <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" />.</param>
        <param name="headerName">The name of the HTTP request header to look up.</param>
        <param name="errorResult">
            Set to <see langword="null" /> in the success case. When a check fails, an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" /> that
            when executed will produce a response containing details about the problem.
            </param>
        <summary>
            Gets the value of a given HTTP request <paramref name="headerName" />. If the field is either not present in
            the <paramref name="request" /> or has more than one value then an error is generated and returned in
            <paramref name="errorResult" />.
            </summary>
        <returns>The signature header; <see langword="null" /> if this cannot be found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsApplicable">
      <MemberSignature Language="C#" Value="public bool IsApplicable (string receiverName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsApplicable(string receiverName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.IsApplicable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsApplicable (receiverName As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsApplicable : string -&gt; bool&#xA;override this.IsApplicable : string -&gt; bool" Usage="webHookVerifySignatureFilter.IsApplicable receiverName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsApplicable(System::String ^ receiverName);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool IsApplicable(Platform::String ^ receiverName);" />
      <MemberSignature Language="C++ WINRT" Value="bool IsApplicable(std::wstring const &amp; receiverName);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.WebHooks.IWebHookReceiver.IsApplicable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiverName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="receiverName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ReceiverName">
      <MemberSignature Language="C#" Value="public abstract string ReceiverName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReceiverName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.ReceiverName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ReceiverName As String" />
      <MemberSignature Language="F#" Value="member this.ReceiverName : string" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.ReceiverName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ ReceiverName { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract property Platform::String ^ ReceiverName { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.AspNetCore.WebHooks.IWebHookReceiver.ReceiverName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="SecretEqual">
      <MemberSignature Language="C#" Value="protected static bool SecretEqual (byte[] inputA, byte[] inputB);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool SecretEqual(unsigned int8[] inputA, unsigned int8[] inputB) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.SecretEqual(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function SecretEqual (inputA As Byte(), inputB As Byte()) As Boolean" />
      <MemberSignature Language="F#" Value="static member SecretEqual : byte[] * byte[] -&gt; bool" Usage="Microsoft.AspNetCore.WebHooks.Filters.WebHookVerifySignatureFilter.SecretEqual (inputA, inputB)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool SecretEqual(cli::array &lt;System::Byte&gt; ^ inputA, cli::array &lt;System::Byte&gt; ^ inputB);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; static bool SecretEqual(Platform::Array &lt;byte&gt; ^ inputA, Platform::Array &lt;byte&gt; ^ inputB);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool SecretEqual(std::Array &lt;byte&gt; const &amp; inputA, std::Array &lt;byte&gt; const &amp; inputB);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputA" Type="System.Byte[]" />
        <Parameter Name="inputB" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="inputA">The first secret to compare.</param>
        <param name="inputB">The second secret to compare.</param>
        <summary>
            Provides a time consistent comparison of two secrets in the form of two byte arrays.
            </summary>
        <returns>
          <see langword="true" /> if the two secrets are equal; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>