<Type Name="WebHookReceiverExistsFilter" FullName="Microsoft.AspNetCore.WebHooks.Filters.WebHookReceiverExistsFilter">
  <TypeSignature Language="C#" Value="public class WebHookReceiverExistsFilter : Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebHookReceiverExistsFilter extends System.Object implements class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata, class Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookReceiverExistsFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class WebHookReceiverExistsFilter&#xA;Implements IResourceFilter" />
  <TypeSignature Language="F#" Value="type WebHookReceiverExistsFilter = class&#xA;    interface IResourceFilter&#xA;    interface IFilterMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebHookReceiverExistsFilter : Microsoft::AspNetCore::Mvc::Filters::IResourceFilter" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class WebHookReceiverExistsFilter : Microsoft::AspNetCore::Mvc::Filters::IResourceFilter" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Mvc.Filters.IResourceFilter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" /> that confirms the <see cref="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookReceiverExistsConstraint" /> is
            configured and ran successfully for this request. Also confirms either <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookVerifyCodeMetadata" />
            is applicable or at least one <see cref="T:Microsoft.AspNetCore.WebHooks.IWebHookReceiver" /> filter is configured to handle this request.
            The minimal configuration for a receiver without <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookVerifyCodeMetadata" /> includes a
            <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookSecurityFilter" /> subclass to verify signatures or otherwise check secret keys.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebHookReceiverExistsFilter (System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookVerifyCodeMetadata&gt; verifyCodeMetadata, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.WebHooks.Metadata.IWebHookVerifyCodeMetadata&gt; verifyCodeMetadata, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookReceiverExistsFilter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.WebHooks.Metadata.IWebHookVerifyCodeMetadata},Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (verifyCodeMetadata As IEnumerable(Of IWebHookVerifyCodeMetadata), loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.WebHooks.Filters.WebHookReceiverExistsFilter : seq&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookVerifyCodeMetadata&gt; * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.WebHooks.Filters.WebHookReceiverExistsFilter" Usage="new Microsoft.AspNetCore.WebHooks.Filters.WebHookReceiverExistsFilter (verifyCodeMetadata, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebHookReceiverExistsFilter(System::Collections::Generic::IEnumerable&lt;Microsoft::AspNetCore::WebHooks::Metadata::IWebHookVerifyCodeMetadata ^&gt; ^ verifyCodeMetadata, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="verifyCodeMetadata" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.WebHooks.Metadata.IWebHookVerifyCodeMetadata&gt;" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="verifyCodeMetadata">
            The collection of <see cref="T:Microsoft.AspNetCore.WebHooks.Metadata.IWebHookVerifyCodeMetadata" /> services.
            </param>
        <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />.</param>
        <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.WebHooks.Filters.WebHookReceiverExistsFilter" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResourceExecuted">
      <MemberSignature Language="C#" Value="public void OnResourceExecuted (Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnResourceExecuted(class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookReceiverExistsFilter.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnResourceExecuted (context As ResourceExecutedContext)" />
      <MemberSignature Language="F#" Value="abstract member OnResourceExecuted : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext -&gt; unit&#xA;override this.OnResourceExecuted : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext -&gt; unit" Usage="webHookReceiverExistsFilter.OnResourceExecuted context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnResourceExecuted(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutedContext ^ context);" />
      <MemberSignature Language="C++ WINRT" Value="void OnResourceExecuted(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutedContext const &amp; context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="OnResourceExecuting">
      <MemberSignature Language="C#" Value="public void OnResourceExecuting (Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnResourceExecuting(class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebHooks.Filters.WebHookReceiverExistsFilter.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnResourceExecuting (context As ResourceExecutingContext)" />
      <MemberSignature Language="F#" Value="abstract member OnResourceExecuting : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext -&gt; unit&#xA;override this.OnResourceExecuting : Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext -&gt; unit" Usage="webHookReceiverExistsFilter.OnResourceExecuting context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnResourceExecuting(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutingContext ^ context);" />
      <MemberSignature Language="C++ WINRT" Value="void OnResourceExecuting(Microsoft::AspNetCore::Mvc::Filters::ResourceExecutingContext const &amp; context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.WebHooks.Receivers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext" />.</param>
        <summary>
          <para>
            Confirms the <see cref="T:Microsoft.AspNetCore.WebHooks.Routing.WebHookReceiverExistsConstraint" /> is configured and ran successfully for
            this request. Also confirms at least one <see cref="T:Microsoft.AspNetCore.WebHooks.IWebHookReceiver" /> filter is configured to handle this
            request.
            </para>
          <para>
            Logs an informational message when both confirmations succeed. If either confirmation fails, sets
            <see cref="P:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext.Result" /> to a <see cref="T:Microsoft.AspNetCore.Mvc.StatusCodeResult" /> with
            <see cref="P:Microsoft.AspNetCore.Mvc.StatusCodeResult.StatusCode" /> set to <see cref="F:Microsoft.AspNetCore.Http.StatusCodes.Status500InternalServerError" />.
            </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>