<Type Name="DefaultFilesMiddleware" FullName="Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware">
  <TypeSignature Language="C#" Value="public class DefaultFilesMiddleware" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultFilesMiddleware extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultFilesMiddleware" />
  <TypeSignature Language="F#" Value="type DefaultFilesMiddleware = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultFilesMiddleware" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class DefaultFilesMiddleware" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.StaticFiles</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This examines a directory path and determines if there is a default file present.
            If so the file name is appended to the path and execution continues.
            Note we don't just serve the file because it may require interpretation.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultFilesMiddleware (Microsoft.AspNetCore.Http.RequestDelegate next, Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnv, Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Builder.DefaultFilesOptions&gt; options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Http.RequestDelegate next, class Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnv, class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.AspNetCore.Builder.DefaultFilesOptions&gt; options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.DefaultFilesOptions})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (next As RequestDelegate, hostingEnv As IHostingEnvironment, options As IOptions(Of DefaultFilesOptions))" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware : Microsoft.AspNetCore.Http.RequestDelegate * Microsoft.AspNetCore.Hosting.IHostingEnvironment * Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Builder.DefaultFilesOptions&gt; -&gt; Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware" Usage="new Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware (next, hostingEnv, options)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultFilesMiddleware(Microsoft::AspNetCore::Http::RequestDelegate ^ next, Microsoft::AspNetCore::Hosting::IHostingEnvironment ^ hostingEnv, Microsoft::Extensions::Options::IOptions&lt;Microsoft::AspNetCore::Builder::DefaultFilesOptions ^&gt; ^ options);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.StaticFiles</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="next" Type="Microsoft.AspNetCore.Http.RequestDelegate" />
        <Parameter Name="hostingEnv" Type="Microsoft.AspNetCore.Hosting.IHostingEnvironment" />
        <Parameter Name="options" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Builder.DefaultFilesOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="next">The next middleware in the pipeline.</param>
        <param name="hostingEnv">The <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" /> used by this middleware.</param>
        <param name="options">The configuration options for this middleware.</param>
        <summary>
            Creates a new instance of the DefaultFilesMiddleware.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Invoke (Microsoft.AspNetCore.Http.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task Invoke(class Microsoft.AspNetCore.Http.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (context As HttpContext) As Task" />
      <MemberSignature Language="F#" Value="member this.Invoke : Microsoft.AspNetCore.Http.HttpContext -&gt; System.Threading.Tasks.Task" Usage="defaultFilesMiddleware.Invoke context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ Invoke(Microsoft::AspNetCore::Http::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.StaticFiles</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">
        </param>
        <summary>
            This examines the request to see if it matches a configured directory, and if there are any files with the
            configured default names in that directory.  If so this will append the corresponding file name to the request
            path for a later middleware to handle.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
