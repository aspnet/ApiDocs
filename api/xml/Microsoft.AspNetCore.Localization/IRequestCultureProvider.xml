<Type Name="IRequestCultureProvider" FullName="Microsoft.AspNetCore.Localization.IRequestCultureProvider">
  <TypeSignature Language="C#" Value="public interface IRequestCultureProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRequestCultureProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Localization.IRequestCultureProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRequestCultureProvider" />
  <TypeSignature Language="F#" Value="type IRequestCultureProvider = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRequestCultureProvider" />
  <TypeSignature Language="C++ CX" Value="public interface class IRequestCultureProvider" />
  <TypeSignature Language="C++ WINRT" Value="__interface IRequestCultureProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Localization</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Represents a provider for determining the culture information of an <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DetermineProviderCultureResult">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Localization.ProviderCultureResult&gt; DetermineProviderCultureResult (Microsoft.AspNetCore.Http.HttpContext httpContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Localization.ProviderCultureResult&gt; DetermineProviderCultureResult(class Microsoft.AspNetCore.Http.HttpContext httpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Localization.IRequestCultureProvider.DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)" />
      <MemberSignature Language="F#" Value="abstract member DetermineProviderCultureResult : Microsoft.AspNetCore.Http.HttpContext -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Localization.ProviderCultureResult&gt;" Usage="iRequestCultureProvider.DetermineProviderCultureResult httpContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Localization::ProviderCultureResult ^&gt; ^ DetermineProviderCultureResult(Microsoft::AspNetCore::Http::HttpContext ^ httpContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Localization</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Localization.ProviderCultureResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" />
      </Parameters>
      <Docs>
        <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> for the request.</param>
        <summary>
            Implements the provider to determine the culture of the given request.
            </summary>
        <returns>
                The determined <see cref="T:Microsoft.AspNetCore.Localization.ProviderCultureResult" />.
                Returns <c>null</c> if the provider couldn't determine a <see cref="T:Microsoft.AspNetCore.Localization.ProviderCultureResult" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
