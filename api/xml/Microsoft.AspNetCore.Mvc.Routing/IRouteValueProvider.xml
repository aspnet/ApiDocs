<Type Name="IRouteValueProvider" FullName="Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider">
  <TypeSignature Language="C#" Value="public interface IRouteValueProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRouteValueProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRouteValueProvider" />
  <TypeSignature Language="F#" Value="type IRouteValueProvider = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRouteValueProvider" />
  <TypeSignature Language="C++ CX" Value="public interface class IRouteValueProvider" />
  <TypeSignature Language="C++ WINRT" Value="__interface IRouteValueProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <para>
            A metadata interface which specifies a route value which is required for the action selector to
            choose an action. When applied to an action using attribute routing, the route value will be added
            to the <see cref="P:Microsoft.AspNetCore.Routing.RouteData.Values" /> when the action is selected.
            </para>
      <para>
            When an <see cref="T:Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider" /> is used to provide a new route value to an action, all
            actions in the application must also have a value associated with that key, or have an implicit value
            of <c>null</c>. See remarks for more details.
            </para>
    </summary>
    <remarks>
      <para>
            The typical scheme for action selection in an MVC application is that an action will require the
            matching values for its <see cref="P:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.ControllerName" /> and
            <see cref="P:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.ActionName" /></para>
      <example>
            For an action like <code>MyApp.Controllers.HomeController.Index()</code>, in order to be selected, the
            <see cref="P:Microsoft.AspNetCore.Routing.RouteData.Values" /> must contain the values
            { 
                "action": "Index",
                "controller": "Home"
            }
            </example>
      <para>
            If areas are in use in the application (see <see cref="T:Microsoft.AspNetCore.Mvc.AreaAttribute" /> which implements
            <see cref="T:Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider" />) then all actions are consider either in an area by having a
            non-<c>null</c> area value (specified by <see cref="T:Microsoft.AspNetCore.Mvc.AreaAttribute" /> or another 
            <see cref="T:Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider" />) or are considered 'outside' of areas by having the value <c>null</c>.
            </para>
      <example>
            Consider an application with two controllers, each with an <code>Index</code> action method:
                - <code>MyApp.Controllers.HomeController.Index()</code>
                - <code>MyApp.Areas.Blog.Controllers.HomeController.Index()</code>
            where <code>MyApp.Areas.Blog.Controllers.HomeController</code> has an area attribute
            <code>[Area("Blog")]</code>.
            
            For <see cref="P:Microsoft.AspNetCore.Routing.RouteData.Values" /> like:
            { 
                "action": "Index",
                "controller": "Home"
            }
            
            <code>MyApp.Controllers.HomeController.Index()</code> will be selected.
            <code>MyApp.Area.Blog.Controllers.HomeController.Index()</code> is not considered eligible because the
            <see cref="P:Microsoft.AspNetCore.Routing.RouteData.Values" /> does not contain the value 'Blog' for 'area'.
            
            For <see cref="P:Microsoft.AspNetCore.Routing.RouteData.Values" /> like:
            {
                "area": "Blog",
                "action": "Index",
                "controller": "Home"
            }
            
            <code>MyApp.Area.Blog.Controllers.HomeController.Index()</code> will be selected.
            <code>MyApp.Controllers.HomeController.Index()</code> is not considered eligible because the route values
            contain a value for 'area'. <code>MyApp.Controllers.HomeController.Index()</code> cannot match any value
            for 'area' other than <c>null</c>.
            </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="RouteKey">
      <MemberSignature Language="C#" Value="public string RouteKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RouteKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider.RouteKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RouteKey As String" />
      <MemberSignature Language="F#" Value="member this.RouteKey : string" Usage="Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider.RouteKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RouteKey { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::String ^ RouteKey { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The route value key.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RouteValue">
      <MemberSignature Language="C#" Value="public string RouteValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RouteValue" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider.RouteValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RouteValue As String" />
      <MemberSignature Language="F#" Value="member this.RouteValue : string" Usage="Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider.RouteValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RouteValue { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::String ^ RouteValue { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The route value. If <c>null</c> or empty, requires the route value associated with <see cref="P:Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider.RouteKey" />
            to be missing or <c>null</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>