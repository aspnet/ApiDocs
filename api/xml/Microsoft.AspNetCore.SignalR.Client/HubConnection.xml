<Type Name="HubConnection" FullName="Microsoft.AspNetCore.SignalR.Client.HubConnection">
  <TypeSignature Language="C#" Value="public class HubConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HubConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" />
  <TypeSignature Language="VB.NET" Value="Public Class HubConnection" />
  <TypeSignature Language="F#" Value="type HubConnection = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A connection used to invoke hub methods on a SignalR Server.
            </summary>
    <remarks>
            A <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> should be created using <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnectionBuilder" />.
            Before hub methods can be invoked the connection must be started using <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(System.Threading.CancellationToken)" />.
            Clean up a connection using <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StopAsync(System.Threading.CancellationToken)" /> or <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.DisposeAsync" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HubConnection (Microsoft.AspNetCore.SignalR.Client.IConnectionFactory connectionFactory, Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.SignalR.Client.IConnectionFactory connectionFactory, class Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.#ctor(Microsoft.AspNetCore.SignalR.Client.IConnectionFactory,Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionFactory As IConnectionFactory, protocol As IHubProtocol, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.SignalR.Client.HubConnection : Microsoft.AspNetCore.SignalR.Client.IConnectionFactory * Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.SignalR.Client.HubConnection" Usage="new Microsoft.AspNetCore.SignalR.Client.HubConnection (connectionFactory, protocol, loggerFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionFactory" Type="Microsoft.AspNetCore.SignalR.Client.IConnectionFactory" />
        <Parameter Name="protocol" Type="Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="connectionFactory">The <see cref="T:Microsoft.AspNetCore.SignalR.Client.IConnectionFactory" /> used to create a connection each time <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(System.Threading.CancellationToken)" /> is called.</param>
        <param name="protocol">The <see cref="T:Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" /> used by the connection.</param>
        <param name="loggerFactory">The logger factory.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HubConnection (Microsoft.AspNetCore.SignalR.Client.IConnectionFactory connectionFactory, Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.SignalR.Client.IConnectionFactory connectionFactory, class Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, class System.IServiceProvider serviceProvider, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.#ctor(Microsoft.AspNetCore.SignalR.Client.IConnectionFactory,Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol,System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionFactory As IConnectionFactory, protocol As IHubProtocol, serviceProvider As IServiceProvider, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.SignalR.Client.HubConnection : Microsoft.AspNetCore.SignalR.Client.IConnectionFactory * Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol * IServiceProvider * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.SignalR.Client.HubConnection" Usage="new Microsoft.AspNetCore.SignalR.Client.HubConnection (connectionFactory, protocol, serviceProvider, loggerFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionFactory" Type="Microsoft.AspNetCore.SignalR.Client.IConnectionFactory" />
        <Parameter Name="protocol" Type="Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="connectionFactory">The <see cref="T:Microsoft.AspNetCore.SignalR.Client.IConnectionFactory" /> used to create a connection each time <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(System.Threading.CancellationToken)" /> is called.</param>
        <param name="protocol">The <see cref="T:Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" /> used by the connection.</param>
        <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> containing the services provided to this <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> instance.</param>
        <param name="loggerFactory">The logger factory.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> class.
            </summary>
        <remarks>
            The <see cref="T:System.IServiceProvider" /> used to initialize the connection will be disposed when the connection is disposed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public event Func&lt;Exception,System.Threading.Tasks.Task&gt; Closed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Func`2&lt;class System.Exception, class System.Threading.Tasks.Task&gt; Closed" />
      <MemberSignature Language="DocId" Value="E:Microsoft.AspNetCore.SignalR.Client.HubConnection.Closed" />
      <MemberSignature Language="VB.NET" Value="Public Event Closed As Func(Of Exception, Task) " />
      <MemberSignature Language="F#" Value="member this.Closed : Func&lt;Exception, System.Threading.Tasks.Task&gt; " Usage="member this.Closed : System.Func&lt;System.Exception, System.Threading.Tasks.Task&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Exception,System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultHandshakeTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan DefaultHandshakeTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan DefaultHandshakeTimeout" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultHandshakeTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultHandshakeTimeout As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultHandshakeTimeout : TimeSpan" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultHandshakeTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultKeepAliveInterval">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan DefaultKeepAliveInterval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan DefaultKeepAliveInterval" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultKeepAliveInterval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultKeepAliveInterval As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultKeepAliveInterval : TimeSpan" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultKeepAliveInterval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultServerTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan DefaultServerTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan DefaultServerTimeout" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultServerTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultServerTimeout As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultServerTimeout : TimeSpan" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultServerTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As Task" />
      <MemberSignature Language="F#" Value="member this.DisposeAsync : unit -&gt; System.Threading.Tasks.Task" Usage="hubConnection.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Disposes the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous dispose.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandshakeTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan HandshakeTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan HandshakeTimeout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.SignalR.Client.HubConnection.HandshakeTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property HandshakeTimeout As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.HandshakeTimeout : TimeSpan with get, set" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.HandshakeTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the timeout for the initial handshake.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCoreAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;object&gt; InvokeCoreAsync (string methodName, Type returnType, object[] args, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;object&gt; InvokeCoreAsync(string methodName, class System.Type returnType, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCoreAsync(System.String,System.Type,System.Object[],System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.InvokeCoreAsync : string * Type * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="hubConnection.InvokeCoreAsync (methodName, returnType, args, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the server method to invoke.</param>
        <param name="returnType">The return type of the server method.</param>
        <param name="args">The arguments used to invoke the server method.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Invokes a hub method on the server using the specified method name, return type and arguments.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous invoke.
            The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property returns an <see cref="T:System.Object" /> for the hub method return value.
            </returns>
        <remarks>
            This is a low level method for invoking a hub method on the server. Using an <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions" /><c>InvokeAsync</c> extension method is recommended.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAliveInterval">
      <MemberSignature Language="C#" Value="public TimeSpan KeepAliveInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan KeepAliveInterval" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.SignalR.Client.HubConnection.KeepAliveInterval" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepAliveInterval As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.KeepAliveInterval : TimeSpan with get, set" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.KeepAliveInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the interval at which the client sends ping messages.
            </summary>
        <value>To be added.</value>
        <remarks>
            Sending any message resets the timer to the start of the interval.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="On">
      <MemberSignature Language="C#" Value="public IDisposable On (string methodName, Type[] parameterTypes, Func&lt;object[],object,System.Threading.Tasks.Task&gt; handler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable On(string methodName, class System.Type[] parameterTypes, class System.Func`3&lt;object[], object, class System.Threading.Tasks.Task&gt; handler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.On(System.String,System.Type[],System.Func{System.Object[],System.Object,System.Threading.Tasks.Task},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function On (methodName As String, parameterTypes As Type(), handler As Func(Of Object(), Object, Task), state As Object) As IDisposable" />
      <MemberSignature Language="F#" Value="member this.On : string * Type[] * Func&lt;obj[], obj, System.Threading.Tasks.Task&gt; * obj -&gt; IDisposable" Usage="hubConnection.On (methodName, parameterTypes, handler, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="handler" Type="System.Func&lt;System.Object[],System.Object,System.Threading.Tasks.Task&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the hub method to define.</param>
        <param name="parameterTypes">The parameters types expected by the hub method.</param>
        <param name="handler">The handler that will be raised when the hub method is invoked.</param>
        <param name="state">A state object that will be passed to the handler.</param>
        <summary>
            Registers a handler that will be invoked when the hub method with the specified method name is invoked.
            </summary>
        <returns>A subscription that can be disposed to unsubscribe from the hub method.</returns>
        <remarks>
            This is a low level method for registering a handler. Using an <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions" /><c>On</c> extension method is recommended.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (methodName As String)" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="hubConnection.Remove methodName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the hub method from which handlers are being removed</param>
        <summary>
            Removes all handlers associated with the method with the specified method name.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetSendPing">
      <MemberSignature Language="C#" Value="public void ResetSendPing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetSendPing() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.ResetSendPing" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetSendPing ()" />
      <MemberSignature Language="F#" Value="member this.ResetSendPing : unit -&gt; unit" Usage="hubConnection.ResetSendPing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTimeout">
      <MemberSignature Language="C#" Value="public void ResetTimeout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTimeout() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.ResetTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTimeout ()" />
      <MemberSignature Language="F#" Value="member this.ResetTimeout : unit -&gt; unit" Usage="hubConnection.ResetTimeout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendCoreAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendCoreAsync (string methodName, object[] args, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendCoreAsync(string methodName, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.SendCoreAsync(System.String,System.Object[],System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.SendCoreAsync : string * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="hubConnection.SendCoreAsync (methodName, args, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the server method to invoke.</param>
        <param name="args">The arguments used to invoke the server method.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Invokes a hub method on the server using the specified method name and arguments.
            Does not wait for a response from the receiver.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous invoke.</returns>
        <remarks>
            This is a low level method for invoking a hub method on the server. Using an <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions" /><c>SendAsync</c> extension method is recommended.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ServerTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ServerTimeout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.SignalR.Client.HubConnection.ServerTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ServerTimeout As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.ServerTimeout : TimeSpan with get, set" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.ServerTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the server timeout interval for the connection. 
            </summary>
        <value>To be added.</value>
        <remarks>
            The client times out if it hasn't heard from the server for `this` long.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.StartAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="hubConnection.StartAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Starts a connection to the server.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous start.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.SignalR.Client.HubConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.AspNetCore.SignalR.Client.HubConnectionState State" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.SignalR.Client.HubConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As HubConnectionState" />
      <MemberSignature Language="F#" Value="member this.State : Microsoft.AspNetCore.SignalR.Client.HubConnectionState" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.SignalR.Client.HubConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates the state of the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> to the server.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StopAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StopAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.StopAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="hubConnection.StopAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Stops a connection to the server.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous stop.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StreamAsChannelCoreAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Threading.Channels.ChannelReader&lt;object&gt;&gt; StreamAsChannelCoreAsync (string methodName, Type returnType, object[] args, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Threading.Channels.ChannelReader`1&lt;object&gt;&gt; StreamAsChannelCoreAsync(string methodName, class System.Type returnType, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StreamAsChannelCoreAsync(System.String,System.Type,System.Object[],System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.StreamAsChannelCoreAsync : string * Type * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Threading.Channels.ChannelReader&lt;obj&gt;&gt;" Usage="hubConnection.StreamAsChannelCoreAsync (methodName, returnType, args, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Channels.ChannelReader&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the server method to invoke.</param>
        <param name="returnType">The return type of the server method.</param>
        <param name="args">The arguments used to invoke the server method.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Invokes a streaming hub method on the server using the specified method name, return type and arguments.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous invoke.
            The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property returns a <see cref="T:System.Threading.Channels.ChannelReader`1" /> for the streamed hub method values.
            </returns>
        <remarks>
            This is a low level method for invoking a streaming hub method on the server. Using an <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions" /><c>StreamAsChannelAsync</c> extension method is recommended.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>