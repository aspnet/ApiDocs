<Type Name="WrapperProviderContext" FullName="Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext">
  <TypeSignature Language="C#" Value="public class WrapperProviderContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WrapperProviderContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext" />
  <TypeSignature Language="VB.NET" Value="Public Class WrapperProviderContext" />
  <TypeSignature Language="F#" Value="type WrapperProviderContext = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class WrapperProviderContext" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class WrapperProviderContext" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.Formatters.Xml</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The context used by an <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider" /> to wrap or un-wrap types.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WrapperProviderContext (Type declaredType, bool isSerialization);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type declaredType, bool isSerialization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext.#ctor(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (declaredType As Type, isSerialization As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext : Type * bool -&gt; Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext" Usage="new Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext (declaredType, isSerialization)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WrapperProviderContext(Type ^ declaredType, bool isSerialization);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; WrapperProviderContext(Platform::Type ^ declaredType, bool isSerialization);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Formatters.Xml</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="declaredType" Type="System.Type" />
        <Parameter Name="isSerialization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="declaredType">The declared type of the object that needs to be wrapped.</param>
        <param name="isSerialization">
          <see langword="true" /> if the wrapper provider is invoked during
            serialization, otherwise <see langword="false" />.</param>
        <summary>
            Initializes a <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaredType">
      <MemberSignature Language="C#" Value="public Type DeclaredType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaredType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext.DeclaredType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaredType As Type" />
      <MemberSignature Language="F#" Value="member this.DeclaredType : Type" Usage="Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext.DeclaredType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DeclaredType { Type ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::Type ^ DeclaredType { Platform::Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Formatters.Xml</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The declared type which could be wrapped/un-wrapped by a different type 
            during serialization or de-serializatoin.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerialization">
      <MemberSignature Language="C#" Value="public bool IsSerialization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerialization" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext.IsSerialization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSerialization As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSerialization : bool" Usage="Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext.IsSerialization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSerialization { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsSerialization { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Formatters.Xml</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> if a wrapper provider is invoked during serialization,
            <see langword="false" /> otherwise.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
